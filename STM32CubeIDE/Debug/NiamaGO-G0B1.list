
NiamaGO-G0B1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2fc  0800a2fc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a304  0800a304  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a304  0800a304  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a308  0800a308  0001a308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ae0  200001e8  0800a4f4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc8  0800a4f4  00021cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f51  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d1a  00000000  00000000  00037161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0003ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  0003bf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe52  00000000  00000000  0003cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180e1  00000000  00000000  0005cd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b805d  00000000  00000000  00074e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012cea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e0  00000000  00000000  0012cef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e8 	.word	0x200001e8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a094 	.word	0x0800a094

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001ec 	.word	0x200001ec
 8000100:	0800a094 	.word	0x0800a094

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f001 f8c2 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f834 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f900 	bl	800082c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800062c:	f000 f8b0 	bl	8000790 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000630:	f000 f88a 	bl	8000748 <MX_CRC_Init>
  MX_USB_Device_Init();
 8000634:	f000 fb1e 	bl	8000c74 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  printf("NiamaGO: Init done!\n");
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <main+0x6c>)
 800063a:	0018      	movs	r0, r3
 800063c:	f009 f852 	bl	80096e4 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // LED2 on, LED3 off
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <main+0x70>)
 8000642:	2201      	movs	r2, #1
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0018      	movs	r0, r3
 8000648:	f001 fc8c 	bl	8001f64 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <main+0x70>)
 800064e:	2200      	movs	r2, #0
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	0018      	movs	r0, r3
 8000654:	f001 fc86 	bl	8001f64 <HAL_GPIO_WritePin>

	HAL_Delay(500);
 8000658:	23fa      	movs	r3, #250	; 0xfa
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	0018      	movs	r0, r3
 800065e:	f001 f929 	bl	80018b4 <HAL_Delay>

    // LED2 off, LED3 on
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <main+0x70>)
 8000664:	2200      	movs	r2, #0
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	0018      	movs	r0, r3
 800066a:	f001 fc7b 	bl	8001f64 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <main+0x70>)
 8000670:	2201      	movs	r2, #1
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fc75 	bl	8001f64 <HAL_GPIO_WritePin>

	HAL_Delay(500);
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	0018      	movs	r0, r3
 8000680:	f001 f918 	bl	80018b4 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000684:	e7dc      	b.n	8000640 <main+0x24>
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	0800a0ac 	.word	0x0800a0ac
 800068c:	50000800 	.word	0x50000800

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b095      	sub	sp, #84	; 0x54
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	2414      	movs	r4, #20
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	233c      	movs	r3, #60	; 0x3c
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f008 ffa5 	bl	80095f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	2310      	movs	r3, #16
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f008 ff9e 	bl	80095f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f003 facb 	bl	8003c54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2221      	movs	r2, #33	; 0x21
 80006c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0252      	lsls	r2, r2, #9
 80006ca:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	03d2      	lsls	r2, r2, #15
 80006d2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	0021      	movs	r1, r4
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2202      	movs	r2, #2
 80006da:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2203      	movs	r2, #3
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2210      	movs	r2, #16
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2280      	movs	r2, #128	; 0x80
 80006f2:	0292      	lsls	r2, r2, #10
 80006f4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	0492      	lsls	r2, r2, #18
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	0592      	lsls	r2, r2, #22
 8000704:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	187b      	adds	r3, r7, r1
 8000708:	0018      	movs	r0, r3
 800070a:	f003 faef 	bl	8003cec <HAL_RCC_OscConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000712:	f000 f903 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2202      	movs	r2, #2
 8000720:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2102      	movs	r1, #2
 8000732:	0018      	movs	r0, r3
 8000734:	f003 fe3a 	bl	80043ac <HAL_RCC_ClockConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800073c:	f000 f8ee 	bl	800091c <Error_Handler>
  }
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b015      	add	sp, #84	; 0x54
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_CRC_Init+0x40>)
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <MX_CRC_Init+0x44>)
 8000750:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_CRC_Init+0x40>)
 8000754:	2200      	movs	r2, #0
 8000756:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_CRC_Init+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_CRC_Init+0x40>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_CRC_Init+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_CRC_Init+0x40>)
 800076c:	2201      	movs	r2, #1
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <MX_CRC_Init+0x40>)
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f9b6 	bl	8001ae4 <HAL_CRC_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800077c:	f000 f8ce 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	20000204 	.word	0x20000204
 800078c:	40023000 	.word	0x40023000

08000790 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <MX_USART3_UART_Init+0x94>)
 8000796:	4a24      	ldr	r2, [pc, #144]	; (8000828 <MX_USART3_UART_Init+0x98>)
 8000798:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <MX_USART3_UART_Init+0x94>)
 800079c:	22e1      	movs	r2, #225	; 0xe1
 800079e:	0252      	lsls	r2, r2, #9
 80007a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007b6:	220c      	movs	r2, #12
 80007b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c0:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c6:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f004 f9cc 	bl	8004b78 <HAL_UART_Init>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007e4:	f000 f89a 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007ea:	2100      	movs	r1, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f005 f81b 	bl	8005828 <HAL_UARTEx_SetTxFifoThreshold>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007f6:	f000 f891 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_USART3_UART_Init+0x94>)
 80007fc:	2100      	movs	r1, #0
 80007fe:	0018      	movs	r0, r3
 8000800:	f005 f852 	bl	80058a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000808:	f000 f888 	bl	800091c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MX_USART3_UART_Init+0x94>)
 800080e:	0018      	movs	r0, r3
 8000810:	f004 ffd0 	bl	80057b4 <HAL_UARTEx_DisableFifoMode>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000818:	f000 f880 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000228 	.word	0x20000228
 8000828:	40004800 	.word	0x40004800

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b08b      	sub	sp, #44	; 0x2c
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	2414      	movs	r4, #20
 8000834:	193b      	adds	r3, r7, r4
 8000836:	0018      	movs	r0, r3
 8000838:	2314      	movs	r3, #20
 800083a:	001a      	movs	r2, r3
 800083c:	2100      	movs	r1, #0
 800083e:	f008 fed7 	bl	80095f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000848:	2120      	movs	r1, #32
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	4b31      	ldr	r3, [pc, #196]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000852:	2220      	movs	r2, #32
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <MX_GPIO_Init+0xe8>)
 800085c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000860:	2104      	movs	r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086a:	2204      	movs	r2, #4
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b28      	ldr	r3, [pc, #160]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000878:	2101      	movs	r1, #1
 800087a:	430a      	orrs	r2, r1
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
 800087e:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000882:	2201      	movs	r2, #1
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_GPIO_Init+0xe8>)
 800088c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000890:	2102      	movs	r1, #2
 8000892:	430a      	orrs	r2, r1
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_GPIO_Init+0xe8>)
 8000898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800089a:	2202      	movs	r2, #2
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_GPIO_Init+0xec>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	21c0      	movs	r1, #192	; 0xc0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fb5b 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_ENA_GPIO_Port, USB_ENA_Pin, GPIO_PIN_SET);
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	0219      	lsls	r1, r3, #8
 80008b2:	23a0      	movs	r3, #160	; 0xa0
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	2201      	movs	r2, #1
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 fb53 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	22c0      	movs	r2, #192	; 0xc0
 80008c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2201      	movs	r2, #1
 80008c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_GPIO_Init+0xec>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f001 f9d5 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_ENA_Pin */
  GPIO_InitStruct.Pin = USB_ENA_Pin;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	0212      	lsls	r2, r2, #8
 80008ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2201      	movs	r2, #1
 80008f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USB_ENA_GPIO_Port, &GPIO_InitStruct);
 80008fe:	187a      	adds	r2, r7, r1
 8000900:	23a0      	movs	r3, #160	; 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f001 f9c0 	bl	8001c8c <HAL_GPIO_Init>

}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b00b      	add	sp, #44	; 0x2c
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	50000800 	.word	0x50000800

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_MspInit+0x4c>)
 8000930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_MspInit+0x4c>)
 8000934:	2101      	movs	r1, #1
 8000936:	430a      	orrs	r2, r1
 8000938:	641a      	str	r2, [r3, #64]	; 0x40
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	2201      	movs	r2, #1
 8000940:	4013      	ands	r3, r2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_MspInit+0x4c>)
 8000948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_MspInit+0x4c>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	0549      	lsls	r1, r1, #21
 8000950:	430a      	orrs	r2, r1
 8000952:	63da      	str	r2, [r3, #60]	; 0x3c
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_MspInit+0x4c>)
 8000956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	055b      	lsls	r3, r3, #21
 800095c:	4013      	ands	r3, r2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000962:	23c0      	movs	r3, #192	; 0xc0
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	0018      	movs	r0, r3
 8000968:	f000 ffc8 	bl	80018fc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b002      	add	sp, #8
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_CRC_MspInit+0x38>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d10d      	bne.n	80009a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_CRC_MspInit+0x3c>)
 800098c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_CRC_MspInit+0x3c>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	0149      	lsls	r1, r1, #5
 8000994:	430a      	orrs	r2, r1
 8000996:	639a      	str	r2, [r3, #56]	; 0x38
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_CRC_MspInit+0x3c>)
 800099a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	015b      	lsls	r3, r3, #5
 80009a0:	4013      	ands	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b004      	add	sp, #16
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40023000 	.word	0x40023000
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b09d      	sub	sp, #116	; 0x74
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	235c      	movs	r3, #92	; 0x5c
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	0018      	movs	r0, r3
 80009c6:	2314      	movs	r3, #20
 80009c8:	001a      	movs	r2, r3
 80009ca:	2100      	movs	r1, #0
 80009cc:	f008 fe10 	bl	80095f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	2410      	movs	r4, #16
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	234c      	movs	r3, #76	; 0x4c
 80009d8:	001a      	movs	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f008 fe08 	bl	80095f0 <memset>
  if(huart->Instance==USART3)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <HAL_UART_MspInit+0xb8>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d13e      	bne.n	8000a68 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2204      	movs	r2, #4
 80009ee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	0018      	movs	r0, r3
 80009fa:	f003 fe81 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a02:	f7ff ff8b 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	02c9      	lsls	r1, r1, #11
 8000a10:	430a      	orrs	r2, r1
 8000a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	02db      	lsls	r3, r3, #11
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a28:	2102      	movs	r1, #2
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_UART_MspInit+0xbc>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2202      	movs	r2, #2
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB8     ------> USART3_TX
    PB9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a3a:	215c      	movs	r1, #92	; 0x5c
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	22c0      	movs	r2, #192	; 0xc0
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2202      	movs	r2, #2
 8000a48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2204      	movs	r2, #4
 8000a5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_UART_MspInit+0xc0>)
 8000a60:	0019      	movs	r1, r3
 8000a62:	0010      	movs	r0, r2
 8000a64:	f001 f912 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b01d      	add	sp, #116	; 0x74
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	40004800 	.word	0x40004800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	50000400 	.word	0x50000400

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 feec 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <USB_UCPD1_2_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 fc1a 	bl	80022ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	2000178c 	.word	0x2000178c

08000ac4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	e00a      	b.n	8000aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad6:	e000      	b.n	8000ada <_read+0x16>
 8000ad8:	bf00      	nop
 8000ada:	0001      	movs	r1, r0
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	60ba      	str	r2, [r7, #8]
 8000ae2:	b2ca      	uxtb	r2, r1
 8000ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbf0      	blt.n	8000ad6 <_read+0x12>
	}

return len;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b006      	add	sp, #24
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 f86f 	bl	8000bfc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x12>
	}
	return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b006      	add	sp, #24
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_close>:

int _close(int file)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	425b      	negs	r3, r3
}
 8000b42:	0018      	movs	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
 8000b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	0192      	lsls	r2, r2, #6
 8000b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	0018      	movs	r0, r3
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_isatty>:

int _isatty(int file)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b002      	add	sp, #8
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	18d3      	adds	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f008 fcec 	bl	800959c <__errno>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	425b      	negs	r3, r3
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	18d2      	adds	r2, r2, r3
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b006      	add	sp, #24
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20024000 	.word	0x20024000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	200002b8 	.word	0x200002b8
 8000bf8:	20001cc8 	.word	0x20001cc8

08000bfc <__io_putchar>:
static char dtx_buffer[64];
extern UART_HandleTypeDef huart3;

#ifdef DBG_ENABLE_PRINTF
PUTCHAR_PROTOTYPE
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	1d39      	adds	r1, r7, #4
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <__io_putchar+0x20>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f004 f809 	bl	8004c24 <HAL_UART_Transmit>
  return ch;
 8000c12:	687b      	ldr	r3, [r7, #4]
}
 8000c14:	0018      	movs	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000228 	.word	0x20000228

08000c20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c24:	f000 fdba 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c4e:	f008 fcab 	bl	80095a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c52:	f7ff fce3 	bl	800061c <main>

08000c56 <LoopForever>:

LoopForever:
  b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   r0, =_estack
 8000c58:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000c64:	0800a30c 	.word	0x0800a30c
  ldr r2, =_sbss
 8000c68:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000c6c:	20001cc8 	.word	0x20001cc8

08000c70 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_COMP_IRQHandler>
	...

08000c74 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8000c78:	4914      	ldr	r1, [pc, #80]	; (8000ccc <MX_USB_Device_Init+0x58>)
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_USB_Device_Init+0x5c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f007 f9d6 	bl	8008030 <USBD_Init>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8000c88:	f7ff fe48 	bl	800091c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8000c8c:	4a11      	ldr	r2, [pc, #68]	; (8000cd4 <MX_USB_Device_Init+0x60>)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USB_Device_Init+0x5c>)
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f007 fa06 	bl	80080a4 <USBD_RegisterClass>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 8000c9c:	f7ff fe3e 	bl	800091c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <MX_USB_Device_Init+0x64>)
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USB_Device_Init+0x5c>)
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f007 f948 	bl	8007f3c <USBD_CDC_RegisterInterface>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8000cb0:	f7ff fe34 	bl	800091c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USB_Device_Init+0x5c>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f007 fa21 	bl	80080fe <USBD_Start>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8000cc0:	f7ff fe2c 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	20000014 	.word	0x20000014
 8000cd0:	200002bc 	.word	0x200002bc
 8000cd4:	20000080 	.word	0x20000080
 8000cd8:	20000000 	.word	0x20000000

08000cdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <CDC_Init_FS+0x24>)
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <CDC_Init_FS+0x28>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f007 f93c 	bl	8007f64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <CDC_Init_FS+0x2c>)
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <CDC_Init_FS+0x28>)
 8000cf0:	0011      	movs	r1, r2
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f007 f955 	bl	8007fa2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000cf8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000d8c 	.word	0x20000d8c
 8000d04:	200002bc 	.word	0x200002bc
 8000d08:	2000058c 	.word	0x2000058c

08000d0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000d10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6039      	str	r1, [r7, #0]
 8000d20:	0011      	movs	r1, r2
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	1c02      	adds	r2, r0, #0
 8000d26:	701a      	strb	r2, [r3, #0]
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	1c0a      	adds	r2, r1, #0
 8000d2c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b23      	cmp	r3, #35	; 0x23
 8000d34:	d804      	bhi.n	8000d40 <CDC_Control_FS+0x28>
 8000d36:	009a      	lsls	r2, r3, #2
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <CDC_Control_FS+0x34>)
 8000d3a:	18d3      	adds	r3, r2, r3
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000d40:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8000d42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	0800a100 	.word	0x0800a100

08000d50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <CDC_Receive_FS+0x28>)
 8000d5e:	0011      	movs	r1, r2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f007 f91e 	bl	8007fa2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <CDC_Receive_FS+0x28>)
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f007 f933 	bl	8007fd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8000d6e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200002bc 	.word	0x200002bc

08000d7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8000d8a:	2117      	movs	r1, #23
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b25b      	sxtb	r3, r3
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b006      	add	sp, #24
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2212      	movs	r2, #18
 8000db2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000034 	.word	0x20000034

08000dc4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	0002      	movs	r2, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000dd8:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8000dda:	0018      	movs	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	20000048 	.word	0x20000048

08000de8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	0002      	movs	r2, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d106      	bne.n	8000e0c <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	4908      	ldr	r1, [pc, #32]	; (8000e24 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <USBD_CDC_ProductStrDescriptor+0x40>)
 8000e04:	0018      	movs	r0, r3
 8000e06:	f008 facd 	bl	80093a4 <USBD_GetString>
 8000e0a:	e005      	b.n	8000e18 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4905      	ldr	r1, [pc, #20]	; (8000e24 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <USBD_CDC_ProductStrDescriptor+0x40>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f008 fac6 	bl	80093a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	2000158c 	.word	0x2000158c
 8000e28:	0800a0c0 	.word	0x0800a0c0

08000e2c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	0002      	movs	r2, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	4904      	ldr	r1, [pc, #16]	; (8000e50 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 8000e40:	0018      	movs	r0, r3
 8000e42:	f008 faaf 	bl	80093a4 <USBD_GetString>
  return USBD_StrDesc;
 8000e46:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000158c 	.word	0x2000158c
 8000e54:	0800a0d8 	.word	0x0800a0d8

08000e58 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	221a      	movs	r2, #26
 8000e6a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000e6c:	f000 f84c 	bl	8000f08 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <USBD_CDC_SerialStrDescriptor+0x24>)
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	2000004c 	.word	0x2000004c

08000e80 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	0002      	movs	r2, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d106      	bne.n	8000ea4 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8000e96:	683a      	ldr	r2, [r7, #0]
 8000e98:	4908      	ldr	r1, [pc, #32]	; (8000ebc <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <USBD_CDC_ConfigStrDescriptor+0x40>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f008 fa81 	bl	80093a4 <USBD_GetString>
 8000ea2:	e005      	b.n	8000eb0 <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4905      	ldr	r1, [pc, #20]	; (8000ebc <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <USBD_CDC_ConfigStrDescriptor+0x40>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f008 fa7a 	bl	80093a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	2000158c 	.word	0x2000158c
 8000ec0:	0800a0e4 	.word	0x0800a0e4

08000ec4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	0002      	movs	r2, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d106      	bne.n	8000ee8 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8000eda:	683a      	ldr	r2, [r7, #0]
 8000edc:	4908      	ldr	r1, [pc, #32]	; (8000f00 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f008 fa5f 	bl	80093a4 <USBD_GetString>
 8000ee6:	e005      	b.n	8000ef4 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	4905      	ldr	r1, [pc, #20]	; (8000f00 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f008 fa58 	bl	80093a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	2000158c 	.word	0x2000158c
 8000f04:	0800a0f0 	.word	0x0800a0f0

08000f08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <Get_SerialNum+0x48>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <Get_SerialNum+0x4c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <Get_SerialNum+0x50>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	18d3      	adds	r3, r2, r3
 8000f26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000f2e:	490b      	ldr	r1, [pc, #44]	; (8000f5c <Get_SerialNum+0x54>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2208      	movs	r2, #8
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 f815 	bl	8000f64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000f3a:	4909      	ldr	r1, [pc, #36]	; (8000f60 <Get_SerialNum+0x58>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2204      	movs	r2, #4
 8000f40:	0018      	movs	r0, r3
 8000f42:	f000 f80f 	bl	8000f64 <IntToUnicode>
  }
}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	1fff7590 	.word	0x1fff7590
 8000f54:	1fff7594 	.word	0x1fff7594
 8000f58:	1fff7598 	.word	0x1fff7598
 8000f5c:	2000004e 	.word	0x2000004e
 8000f60:	2000005e 	.word	0x2000005e

08000f64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8000f72:	2117      	movs	r1, #23
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e02f      	b.n	8000fe2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	0f1b      	lsrs	r3, r3, #28
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	d80d      	bhi.n	8000fa6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	0f1b      	lsrs	r3, r3, #28
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	2317      	movs	r3, #23
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	0019      	movs	r1, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	185b      	adds	r3, r3, r1
 8000f9e:	3230      	adds	r2, #48	; 0x30
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e00c      	b.n	8000fc0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	0f1b      	lsrs	r3, r3, #28
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	2317      	movs	r3, #23
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	185b      	adds	r3, r3, r1
 8000fba:	3237      	adds	r2, #55	; 0x37
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000fc6:	2117      	movs	r1, #23
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	3301      	adds	r3, #1
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	18d3      	adds	r3, r2, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	3201      	adds	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	2317      	movs	r3, #23
 8000fe4:	18fa      	adds	r2, r7, r3
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	7812      	ldrb	r2, [r2, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3c8      	bcc.n	8000f82 <IntToUnicode+0x1e>
  }
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b006      	add	sp, #24
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b099      	sub	sp, #100	; 0x64
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	2414      	movs	r4, #20
 8001006:	193b      	adds	r3, r7, r4
 8001008:	0018      	movs	r0, r3
 800100a:	234c      	movs	r3, #76	; 0x4c
 800100c:	001a      	movs	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f008 faee 	bl	80095f0 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <HAL_PCD_MspInit+0xb4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d143      	bne.n	80010a6 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800101e:	193b      	adds	r3, r7, r4
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0452      	lsls	r2, r2, #17
 8001024:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001026:	193b      	adds	r3, r7, r4
 8001028:	2200      	movs	r2, #0
 800102a:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	193b      	adds	r3, r7, r4
 800102e:	0018      	movs	r0, r3
 8001030:	f003 fb66 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d001      	beq.n	800103c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8001038:	f7ff fc70 	bl	800091c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 800103e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	0189      	lsls	r1, r1, #6
 8001046:	430a      	orrs	r2, r1
 8001048:	63da      	str	r2, [r3, #60]	; 0x3c
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 800104c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	019b      	lsls	r3, r3, #6
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 800105a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	055b      	lsls	r3, r3, #21
 8001060:	4013      	ands	r3, r2
 8001062:	d116      	bne.n	8001092 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 8001066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	0549      	lsls	r1, r1, #21
 800106e:	430a      	orrs	r2, r1
 8001070:	63da      	str	r2, [r3, #60]	; 0x3c
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 8001074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	055b      	lsls	r3, r3, #21
 800107a:	4013      	ands	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001080:	f002 fdda 	bl	8003c38 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 8001086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_PCD_MspInit+0xb8>)
 800108a:	490b      	ldr	r1, [pc, #44]	; (80010b8 <HAL_PCD_MspInit+0xbc>)
 800108c:	400a      	ands	r2, r1
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001090:	e001      	b.n	8001096 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001092:	f002 fdd1 	bl	8003c38 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2008      	movs	r0, #8
 800109c:	f000 fcf0 	bl	8001a80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80010a0:	2008      	movs	r0, #8
 80010a2:	f000 fd02 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b019      	add	sp, #100	; 0x64
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40005c00 	.word	0x40005c00
 80010b4:	40021000 	.word	0x40021000
 80010b8:	efffffff 	.word	0xefffffff

080010bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	23c1      	movs	r3, #193	; 0xc1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	58d2      	ldr	r2, [r2, r3]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	21b1      	movs	r1, #177	; 0xb1
 80010d0:	0089      	lsls	r1, r1, #2
 80010d2:	468c      	mov	ip, r1
 80010d4:	4463      	add	r3, ip
 80010d6:	0019      	movs	r1, r3
 80010d8:	0010      	movs	r0, r2
 80010da:	f007 f867 	bl	80081ac <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b002      	add	sp, #8
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80010e6:	b590      	push	{r4, r7, lr}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	000a      	movs	r2, r1
 80010f0:	1cfb      	adds	r3, r7, #3
 80010f2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	23c1      	movs	r3, #193	; 0xc1
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	58d4      	ldr	r4, [r2, r3]
 80010fc:	1cfb      	adds	r3, r7, #3
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	23c8      	movs	r3, #200	; 0xc8
 8001104:	0059      	lsls	r1, r3, #1
 8001106:	0013      	movs	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	189b      	adds	r3, r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	18c3      	adds	r3, r0, r3
 8001110:	185b      	adds	r3, r3, r1
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	1cfb      	adds	r3, r7, #3
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	0019      	movs	r1, r3
 800111a:	0020      	movs	r0, r4
 800111c:	f007 f8b0 	bl	8008280 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b003      	add	sp, #12
 8001126:	bd90      	pop	{r4, r7, pc}

08001128 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	000a      	movs	r2, r1
 8001132:	1cfb      	adds	r3, r7, #3
 8001134:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	23c1      	movs	r3, #193	; 0xc1
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	58d0      	ldr	r0, [r2, r3]
 800113e:	1cfb      	adds	r3, r7, #3
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	0013      	movs	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	189b      	adds	r3, r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	18cb      	adds	r3, r1, r3
 800114e:	3350      	adds	r3, #80	; 0x50
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	1cfb      	adds	r3, r7, #3
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0019      	movs	r1, r3
 8001158:	f007 f908 	bl	800836c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	23c1      	movs	r3, #193	; 0xc1
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	58d3      	ldr	r3, [r2, r3]
 8001174:	0018      	movs	r0, r3
 8001176:	f007 fa43 	bl	8008600 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800118a:	230f      	movs	r3, #15
 800118c:	18fb      	adds	r3, r7, r3
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d001      	beq.n	800119e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800119a:	f7ff fbbf 	bl	800091c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	23c1      	movs	r3, #193	; 0xc1
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	58d2      	ldr	r2, [r2, r3]
 80011a6:	230f      	movs	r3, #15
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	0019      	movs	r1, r3
 80011ae:	0010      	movs	r0, r2
 80011b0:	f007 f9e3 	bl	800857a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	23c1      	movs	r3, #193	; 0xc1
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	58d3      	ldr	r3, [r2, r3]
 80011bc:	0018      	movs	r0, r3
 80011be:	f007 f985 	bl	80084cc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	23c1      	movs	r3, #193	; 0xc1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	58d3      	ldr	r3, [r2, r3]
 80011dc:	0018      	movs	r0, r3
 80011de:	f007 f9dd 	bl	800859c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <HAL_PCD_SuspendCallback+0x34>)
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <HAL_PCD_SuspendCallback+0x34>)
 80011f0:	2106      	movs	r1, #6
 80011f2:	430a      	orrs	r2, r1
 80011f4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_PCD_ResumeCallback+0x38>)
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_PCD_ResumeCallback+0x38>)
 800121a:	2106      	movs	r1, #6
 800121c:	438a      	bics	r2, r1
 800121e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8001220:	f000 fa7e 	bl	8001720 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	23c1      	movs	r3, #193	; 0xc1
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	58d3      	ldr	r3, [r2, r3]
 800122c:	0018      	movs	r0, r3
 800122e:	f007 f9cd 	bl	80085cc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 8001248:	4a34      	ldr	r2, [pc, #208]	; (800131c <USBD_LL_Init+0xdc>)
 800124a:	23c1      	movs	r3, #193	; 0xc1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	23b1      	movs	r3, #177	; 0xb1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4930      	ldr	r1, [pc, #192]	; (800131c <USBD_LL_Init+0xdc>)
 800125a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800125c:	4b2f      	ldr	r3, [pc, #188]	; (800131c <USBD_LL_Init+0xdc>)
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <USBD_LL_Init+0xe0>)
 8001260:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <USBD_LL_Init+0xdc>)
 8001264:	2208      	movs	r2, #8
 8001266:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <USBD_LL_Init+0xdc>)
 800126a:	2208      	movs	r2, #8
 800126c:	609a      	str	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <USBD_LL_Init+0xdc>)
 8001270:	2202      	movs	r2, #2
 8001272:	60da      	str	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <USBD_LL_Init+0xdc>)
 8001276:	2202      	movs	r2, #2
 8001278:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <USBD_LL_Init+0xdc>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001280:	4b26      	ldr	r3, [pc, #152]	; (800131c <USBD_LL_Init+0xdc>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <USBD_LL_Init+0xdc>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <USBD_LL_Init+0xdc>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <USBD_LL_Init+0xdc>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <USBD_LL_Init+0xdc>)
 800129a:	2200      	movs	r2, #0
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <USBD_LL_Init+0xdc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <USBD_LL_Init+0xdc>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 fee0 	bl	800206c <HAL_PCD_Init>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d001      	beq.n	80012b4 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 80012b0:	f7ff fb34 	bl	800091c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	23b1      	movs	r3, #177	; 0xb1
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	58d0      	ldr	r0, [r2, r3]
 80012bc:	2318      	movs	r3, #24
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	f002 fc47 	bl	8003b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	23b1      	movs	r3, #177	; 0xb1
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	58d0      	ldr	r0, [r2, r3]
 80012ce:	2358      	movs	r3, #88	; 0x58
 80012d0:	2200      	movs	r2, #0
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	f002 fc3e 	bl	8003b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	23b1      	movs	r3, #177	; 0xb1
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	58d0      	ldr	r0, [r2, r3]
 80012e0:	23c0      	movs	r3, #192	; 0xc0
 80012e2:	2200      	movs	r2, #0
 80012e4:	2181      	movs	r1, #129	; 0x81
 80012e6:	f002 fc35 	bl	8003b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	23b1      	movs	r3, #177	; 0xb1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	58d0      	ldr	r0, [r2, r3]
 80012f2:	2388      	movs	r3, #136	; 0x88
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	2101      	movs	r1, #1
 80012fa:	f002 fc2b 	bl	8003b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	23b1      	movs	r3, #177	; 0xb1
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	58d0      	ldr	r0, [r2, r3]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2200      	movs	r2, #0
 800130c:	2182      	movs	r1, #130	; 0x82
 800130e:	f002 fc21 	bl	8003b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	0018      	movs	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000178c 	.word	0x2000178c
 8001320:	40005c00 	.word	0x40005c00

08001324 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800132c:	210f      	movs	r1, #15
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001334:	260e      	movs	r6, #14
 8001336:	19bb      	adds	r3, r7, r6
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	23b1      	movs	r3, #177	; 0xb1
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	58d3      	ldr	r3, [r2, r3]
 8001344:	000d      	movs	r5, r1
 8001346:	187c      	adds	r4, r7, r1
 8001348:	0018      	movs	r0, r3
 800134a:	f000 ffa9 	bl	80022a0 <HAL_PCD_Start>
 800134e:	0003      	movs	r3, r0
 8001350:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001352:	19bc      	adds	r4, r7, r6
 8001354:	197b      	adds	r3, r7, r5
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	f000 f9e8 	bl	800172e <USBD_Get_USB_Status>
 800135e:	0003      	movs	r3, r0
 8001360:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8001362:	19bb      	adds	r3, r7, r6
 8001364:	781b      	ldrb	r3, [r3, #0]
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b005      	add	sp, #20
 800136c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800136e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800136e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	000c      	movs	r4, r1
 8001378:	0010      	movs	r0, r2
 800137a:	0019      	movs	r1, r3
 800137c:	1cfb      	adds	r3, r7, #3
 800137e:	1c22      	adds	r2, r4, #0
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	1cbb      	adds	r3, r7, #2
 8001384:	1c02      	adds	r2, r0, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	003b      	movs	r3, r7
 800138a:	1c0a      	adds	r2, r1, #0
 800138c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800138e:	260f      	movs	r6, #15
 8001390:	19bb      	adds	r3, r7, r6
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001396:	250e      	movs	r5, #14
 8001398:	197b      	adds	r3, r7, r5
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	23b1      	movs	r3, #177	; 0xb1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	58d0      	ldr	r0, [r2, r3]
 80013a6:	19bc      	adds	r4, r7, r6
 80013a8:	1cbb      	adds	r3, r7, #2
 80013aa:	781d      	ldrb	r5, [r3, #0]
 80013ac:	003b      	movs	r3, r7
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	1cfb      	adds	r3, r7, #3
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	002b      	movs	r3, r5
 80013b6:	f001 f8da 	bl	800256e <HAL_PCD_EP_Open>
 80013ba:	0003      	movs	r3, r0
 80013bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80013be:	250e      	movs	r5, #14
 80013c0:	197c      	adds	r4, r7, r5
 80013c2:	19bb      	adds	r3, r7, r6
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	0018      	movs	r0, r3
 80013c8:	f000 f9b1 	bl	800172e <USBD_Get_USB_Status>
 80013cc:	0003      	movs	r3, r0
 80013ce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80013d0:	197b      	adds	r3, r7, r5
 80013d2:	781b      	ldrb	r3, [r3, #0]
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b005      	add	sp, #20
 80013da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013dc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	000a      	movs	r2, r1
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80013ea:	210f      	movs	r1, #15
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80013f2:	260e      	movs	r6, #14
 80013f4:	19bb      	adds	r3, r7, r6
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	23b1      	movs	r3, #177	; 0xb1
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	58d2      	ldr	r2, [r2, r3]
 8001402:	000d      	movs	r5, r1
 8001404:	187c      	adds	r4, r7, r1
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	0019      	movs	r1, r3
 800140c:	0010      	movs	r0, r2
 800140e:	f001 f928 	bl	8002662 <HAL_PCD_EP_Close>
 8001412:	0003      	movs	r3, r0
 8001414:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001416:	19bc      	adds	r4, r7, r6
 8001418:	197b      	adds	r3, r7, r5
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	0018      	movs	r0, r3
 800141e:	f000 f986 	bl	800172e <USBD_Get_USB_Status>
 8001422:	0003      	movs	r3, r0
 8001424:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8001426:	19bb      	adds	r3, r7, r6
 8001428:	781b      	ldrb	r3, [r3, #0]
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b005      	add	sp, #20
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001432 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	000a      	movs	r2, r1
 800143c:	1cfb      	adds	r3, r7, #3
 800143e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001440:	210f      	movs	r1, #15
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001448:	260e      	movs	r6, #14
 800144a:	19bb      	adds	r3, r7, r6
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	23b1      	movs	r3, #177	; 0xb1
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	58d2      	ldr	r2, [r2, r3]
 8001458:	000d      	movs	r5, r1
 800145a:	187c      	adds	r4, r7, r1
 800145c:	1cfb      	adds	r3, r7, #3
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	0019      	movs	r1, r3
 8001462:	0010      	movs	r0, r2
 8001464:	f001 f9f8 	bl	8002858 <HAL_PCD_EP_SetStall>
 8001468:	0003      	movs	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800146c:	19bc      	adds	r4, r7, r6
 800146e:	197b      	adds	r3, r7, r5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0018      	movs	r0, r3
 8001474:	f000 f95b 	bl	800172e <USBD_Get_USB_Status>
 8001478:	0003      	movs	r3, r0
 800147a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800147c:	19bb      	adds	r3, r7, r6
 800147e:	781b      	ldrb	r3, [r3, #0]
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b005      	add	sp, #20
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001488 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	000a      	movs	r2, r1
 8001492:	1cfb      	adds	r3, r7, #3
 8001494:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001496:	210f      	movs	r1, #15
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800149e:	260e      	movs	r6, #14
 80014a0:	19bb      	adds	r3, r7, r6
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	23b1      	movs	r3, #177	; 0xb1
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	58d2      	ldr	r2, [r2, r3]
 80014ae:	000d      	movs	r5, r1
 80014b0:	187c      	adds	r4, r7, r1
 80014b2:	1cfb      	adds	r3, r7, #3
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	0019      	movs	r1, r3
 80014b8:	0010      	movs	r0, r2
 80014ba:	f001 fa2b 	bl	8002914 <HAL_PCD_EP_ClrStall>
 80014be:	0003      	movs	r3, r0
 80014c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80014c2:	19bc      	adds	r4, r7, r6
 80014c4:	197b      	adds	r3, r7, r5
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 f930 	bl	800172e <USBD_Get_USB_Status>
 80014ce:	0003      	movs	r3, r0
 80014d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80014d2:	19bb      	adds	r3, r7, r6
 80014d4:	781b      	ldrb	r3, [r3, #0]
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b005      	add	sp, #20
 80014dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014de <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	000a      	movs	r2, r1
 80014e8:	1cfb      	adds	r3, r7, #3
 80014ea:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	23b1      	movs	r3, #177	; 0xb1
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	58d3      	ldr	r3, [r2, r3]
 80014f4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80014f6:	1cfb      	adds	r3, r7, #3
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da0d      	bge.n	800151c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001500:	1cfb      	adds	r3, r7, #3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	227f      	movs	r2, #127	; 0x7f
 8001506:	401a      	ands	r2, r3
 8001508:	68f9      	ldr	r1, [r7, #12]
 800150a:	203e      	movs	r0, #62	; 0x3e
 800150c:	0013      	movs	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	189b      	adds	r3, r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	18cb      	adds	r3, r1, r3
 8001516:	181b      	adds	r3, r3, r0
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	e00d      	b.n	8001538 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800151c:	1cfb      	adds	r3, r7, #3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	227f      	movs	r2, #127	; 0x7f
 8001522:	401a      	ands	r2, r3
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	23bf      	movs	r3, #191	; 0xbf
 8001528:	0059      	lsls	r1, r3, #1
 800152a:	0013      	movs	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	189b      	adds	r3, r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	18c3      	adds	r3, r0, r3
 8001534:	185b      	adds	r3, r3, r1
 8001536:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b004      	add	sp, #16
 800153e:	bd80      	pop	{r7, pc}

08001540 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	000a      	movs	r2, r1
 800154a:	1cfb      	adds	r3, r7, #3
 800154c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800154e:	210f      	movs	r1, #15
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001556:	260e      	movs	r6, #14
 8001558:	19bb      	adds	r3, r7, r6
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	23b1      	movs	r3, #177	; 0xb1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	58d2      	ldr	r2, [r2, r3]
 8001566:	000d      	movs	r5, r1
 8001568:	187c      	adds	r4, r7, r1
 800156a:	1cfb      	adds	r3, r7, #3
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f000 ffd1 	bl	8002518 <HAL_PCD_SetAddress>
 8001576:	0003      	movs	r3, r0
 8001578:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800157a:	19bc      	adds	r4, r7, r6
 800157c:	197b      	adds	r3, r7, r5
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	0018      	movs	r0, r3
 8001582:	f000 f8d4 	bl	800172e <USBD_Get_USB_Status>
 8001586:	0003      	movs	r3, r0
 8001588:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800158a:	19bb      	adds	r3, r7, r6
 800158c:	781b      	ldrb	r3, [r3, #0]
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b005      	add	sp, #20
 8001594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001596 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001598:	b087      	sub	sp, #28
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	230b      	movs	r3, #11
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	1c0a      	adds	r2, r1, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015aa:	2617      	movs	r6, #23
 80015ac:	19bb      	adds	r3, r7, r6
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015b2:	2516      	movs	r5, #22
 80015b4:	197b      	adds	r3, r7, r5
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	23b1      	movs	r3, #177	; 0xb1
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	58d0      	ldr	r0, [r2, r3]
 80015c2:	19bc      	adds	r4, r7, r6
 80015c4:	683d      	ldr	r5, [r7, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	230b      	movs	r3, #11
 80015ca:	18fb      	adds	r3, r7, r3
 80015cc:	7819      	ldrb	r1, [r3, #0]
 80015ce:	002b      	movs	r3, r5
 80015d0:	f001 f8f8 	bl	80027c4 <HAL_PCD_EP_Transmit>
 80015d4:	0003      	movs	r3, r0
 80015d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015d8:	2516      	movs	r5, #22
 80015da:	197c      	adds	r4, r7, r5
 80015dc:	19bb      	adds	r3, r7, r6
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 f8a4 	bl	800172e <USBD_Get_USB_Status>
 80015e6:	0003      	movs	r3, r0
 80015e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	781b      	ldrb	r3, [r3, #0]
}
 80015ee:	0018      	movs	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b007      	add	sp, #28
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80015f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	230b      	movs	r3, #11
 8001604:	18fb      	adds	r3, r7, r3
 8001606:	1c0a      	adds	r2, r1, #0
 8001608:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800160a:	2617      	movs	r6, #23
 800160c:	19bb      	adds	r3, r7, r6
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001612:	2516      	movs	r5, #22
 8001614:	197b      	adds	r3, r7, r5
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	23b1      	movs	r3, #177	; 0xb1
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	58d0      	ldr	r0, [r2, r3]
 8001622:	19bc      	adds	r4, r7, r6
 8001624:	683d      	ldr	r5, [r7, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	230b      	movs	r3, #11
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	7819      	ldrb	r1, [r3, #0]
 800162e:	002b      	movs	r3, r5
 8001630:	f001 f86a 	bl	8002708 <HAL_PCD_EP_Receive>
 8001634:	0003      	movs	r3, r0
 8001636:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001638:	2516      	movs	r5, #22
 800163a:	197c      	adds	r4, r7, r5
 800163c:	19bb      	adds	r3, r7, r6
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	0018      	movs	r0, r3
 8001642:	f000 f874 	bl	800172e <USBD_Get_USB_Status>
 8001646:	0003      	movs	r3, r0
 8001648:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800164a:	197b      	adds	r3, r7, r5
 800164c:	781b      	ldrb	r3, [r3, #0]
}
 800164e:	0018      	movs	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	b007      	add	sp, #28
 8001654:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001656 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	000a      	movs	r2, r1
 8001660:	1cfb      	adds	r3, r7, #3
 8001662:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	23b1      	movs	r3, #177	; 0xb1
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	58d2      	ldr	r2, [r2, r3]
 800166c:	1cfb      	adds	r3, r7, #3
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	0019      	movs	r1, r3
 8001672:	0010      	movs	r0, r2
 8001674:	f001 f88d 	bl	8002792 <HAL_PCD_EP_GetRxCount>
 8001678:	0003      	movs	r3, r0
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	000a      	movs	r2, r1
 800168e:	1cfb      	adds	r3, r7, #3
 8001690:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8001692:	1cfb      	adds	r3, r7, #3
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <HAL_PCDEx_LPM_Callback+0x1c>
 800169a:	2b01      	cmp	r3, #1
 800169c:	d014      	beq.n	80016c8 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800169e:	e025      	b.n	80016ec <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 80016a8:	f000 f83a 	bl	8001720 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_PCDEx_LPM_Callback+0x70>)
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_PCDEx_LPM_Callback+0x70>)
 80016b2:	2106      	movs	r1, #6
 80016b4:	438a      	bics	r2, r1
 80016b6:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	23c1      	movs	r3, #193	; 0xc1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	58d3      	ldr	r3, [r2, r3]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f006 ff83 	bl	80085cc <USBD_LL_Resume>
    break;
 80016c6:	e011      	b.n	80016ec <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	23c1      	movs	r3, #193	; 0xc1
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	58d3      	ldr	r3, [r2, r3]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f006 ff63 	bl	800859c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_PCDEx_LPM_Callback+0x70>)
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_PCDEx_LPM_Callback+0x70>)
 80016e4:	2106      	movs	r1, #6
 80016e6:	430a      	orrs	r2, r1
 80016e8:	611a      	str	r2, [r3, #16]
    break;
 80016ea:	46c0      	nop			; (mov r8, r8)
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <USBD_static_malloc+0x14>)
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	20001a94 	.word	0x20001a94

08001710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8001724:	f7fe ffb4 	bl	8000690 <SystemClock_Config>
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	0002      	movs	r2, r0
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800173a:	230f      	movs	r3, #15
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d017      	beq.n	800177a <USBD_Get_USB_Status+0x4c>
 800174a:	dc1b      	bgt.n	8001784 <USBD_Get_USB_Status+0x56>
 800174c:	2b02      	cmp	r3, #2
 800174e:	d00f      	beq.n	8001770 <USBD_Get_USB_Status+0x42>
 8001750:	dc18      	bgt.n	8001784 <USBD_Get_USB_Status+0x56>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <USBD_Get_USB_Status+0x2e>
 8001756:	2b01      	cmp	r3, #1
 8001758:	d005      	beq.n	8001766 <USBD_Get_USB_Status+0x38>
 800175a:	e013      	b.n	8001784 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800175c:	230f      	movs	r3, #15
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
    break;
 8001764:	e013      	b.n	800178e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001766:	230f      	movs	r3, #15
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	2203      	movs	r2, #3
 800176c:	701a      	strb	r2, [r3, #0]
    break;
 800176e:	e00e      	b.n	800178e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001770:	230f      	movs	r3, #15
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
    break;
 8001778:	e009      	b.n	800178e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800177a:	230f      	movs	r3, #15
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	2203      	movs	r2, #3
 8001780:	701a      	strb	r2, [r3, #0]
    break;
 8001782:	e004      	b.n	800178e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	2203      	movs	r2, #3
 800178a:	701a      	strb	r2, [r3, #0]
    break;
 800178c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800178e:	230f      	movs	r3, #15
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	781b      	ldrb	r3, [r3, #0]
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b004      	add	sp, #16
 800179a:	bd80      	pop	{r7, pc}

0800179c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_Init+0x3c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_Init+0x3c>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0049      	lsls	r1, r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c2:	2003      	movs	r0, #3
 80017c4:	f000 f810 	bl	80017e8 <HAL_InitTick>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	e001      	b.n	80017d8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff f8a8 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d8:	1dfb      	adds	r3, r7, #7
 80017da:	781b      	ldrb	r3, [r3, #0]
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40022000 	.word	0x40022000

080017e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017f0:	230f      	movs	r3, #15
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_InitTick+0x88>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02b      	beq.n	8001858 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <HAL_InitTick+0x8c>)
 8001802:	681c      	ldr	r4, [r3, #0]
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_InitTick+0x88>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	0019      	movs	r1, r3
 800180a:	23fa      	movs	r3, #250	; 0xfa
 800180c:	0098      	lsls	r0, r3, #2
 800180e:	f7fe fc79 	bl	8000104 <__udivsi3>
 8001812:	0003      	movs	r3, r0
 8001814:	0019      	movs	r1, r3
 8001816:	0020      	movs	r0, r4
 8001818:	f7fe fc74 	bl	8000104 <__udivsi3>
 800181c:	0003      	movs	r3, r0
 800181e:	0018      	movs	r0, r3
 8001820:	f000 f953 	bl	8001aca <HAL_SYSTICK_Config>
 8001824:	1e03      	subs	r3, r0, #0
 8001826:	d112      	bne.n	800184e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d80a      	bhi.n	8001844 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	2301      	movs	r3, #1
 8001832:	425b      	negs	r3, r3
 8001834:	2200      	movs	r2, #0
 8001836:	0018      	movs	r0, r3
 8001838:	f000 f922 	bl	8001a80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_InitTick+0x90>)
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e00d      	b.n	8001860 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001844:	230f      	movs	r3, #15
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	e008      	b.n	8001860 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800184e:	230f      	movs	r3, #15
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e003      	b.n	8001860 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001858:	230f      	movs	r3, #15
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001860:	230f      	movs	r3, #15
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	781b      	ldrb	r3, [r3, #0]
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b005      	add	sp, #20
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	20000070 	.word	0x20000070
 8001874:	20000068 	.word	0x20000068
 8001878:	2000006c 	.word	0x2000006c

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x1c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	001a      	movs	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_IncTick+0x20>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	18d2      	adds	r2, r2, r3
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_IncTick+0x20>)
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	20000070 	.word	0x20000070
 800189c:	20001cb4 	.word	0x20001cb4

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <HAL_GetTick+0x10>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	20001cb4 	.word	0x20001cb4

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff fff0 	bl	80018a0 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3301      	adds	r3, #1
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	001a      	movs	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	189b      	adds	r3, r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	f7ff ffe0 	bl	80018a0 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b004      	add	sp, #16
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	20000070 	.word	0x20000070

080018fc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800190a:	4013      	ands	r3, r2
 800190c:	0019      	movs	r1, r3
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	40010000 	.word	0x40010000
 8001924:	fffff9ff 	.word	0xfffff9ff

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	0002      	movs	r2, r0
 8001930:	1dfb      	adds	r3, r7, #7
 8001932:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b7f      	cmp	r3, #127	; 0x7f
 800193a:	d809      	bhi.n	8001950 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	001a      	movs	r2, r3
 8001942:	231f      	movs	r3, #31
 8001944:	401a      	ands	r2, r3
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_EnableIRQ+0x30>)
 8001948:	2101      	movs	r1, #1
 800194a:	4091      	lsls	r1, r2
 800194c:	000a      	movs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	0002      	movs	r2, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b7f      	cmp	r3, #127	; 0x7f
 8001970:	d828      	bhi.n	80019c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001972:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <__NVIC_SetPriority+0xd4>)
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b25b      	sxtb	r3, r3
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	33c0      	adds	r3, #192	; 0xc0
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	589b      	ldr	r3, [r3, r2]
 8001982:	1dfa      	adds	r2, r7, #7
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	0011      	movs	r1, r2
 8001988:	2203      	movs	r2, #3
 800198a:	400a      	ands	r2, r1
 800198c:	00d2      	lsls	r2, r2, #3
 800198e:	21ff      	movs	r1, #255	; 0xff
 8001990:	4091      	lsls	r1, r2
 8001992:	000a      	movs	r2, r1
 8001994:	43d2      	mvns	r2, r2
 8001996:	401a      	ands	r2, r3
 8001998:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	22ff      	movs	r2, #255	; 0xff
 80019a0:	401a      	ands	r2, r3
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	0018      	movs	r0, r3
 80019a8:	2303      	movs	r3, #3
 80019aa:	4003      	ands	r3, r0
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b0:	481f      	ldr	r0, [pc, #124]	; (8001a30 <__NVIC_SetPriority+0xd4>)
 80019b2:	1dfb      	adds	r3, r7, #7
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	430a      	orrs	r2, r1
 80019bc:	33c0      	adds	r3, #192	; 0xc0
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019c2:	e031      	b.n	8001a28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c4:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <__NVIC_SetPriority+0xd8>)
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0019      	movs	r1, r3
 80019cc:	230f      	movs	r3, #15
 80019ce:	400b      	ands	r3, r1
 80019d0:	3b08      	subs	r3, #8
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3306      	adds	r3, #6
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	18d3      	adds	r3, r2, r3
 80019da:	3304      	adds	r3, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1dfa      	adds	r2, r7, #7
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	0011      	movs	r1, r2
 80019e4:	2203      	movs	r2, #3
 80019e6:	400a      	ands	r2, r1
 80019e8:	00d2      	lsls	r2, r2, #3
 80019ea:	21ff      	movs	r1, #255	; 0xff
 80019ec:	4091      	lsls	r1, r2
 80019ee:	000a      	movs	r2, r1
 80019f0:	43d2      	mvns	r2, r2
 80019f2:	401a      	ands	r2, r3
 80019f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	019b      	lsls	r3, r3, #6
 80019fa:	22ff      	movs	r2, #255	; 0xff
 80019fc:	401a      	ands	r2, r3
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	0018      	movs	r0, r3
 8001a04:	2303      	movs	r3, #3
 8001a06:	4003      	ands	r3, r0
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a0c:	4809      	ldr	r0, [pc, #36]	; (8001a34 <__NVIC_SetPriority+0xd8>)
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	001c      	movs	r4, r3
 8001a14:	230f      	movs	r3, #15
 8001a16:	4023      	ands	r3, r4
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	3306      	adds	r3, #6
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	18c3      	adds	r3, r0, r3
 8001a24:	3304      	adds	r3, #4
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b003      	add	sp, #12
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	045b      	lsls	r3, r3, #17
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d301      	bcc.n	8001a50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e010      	b.n	8001a72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <SysTick_Config+0x44>)
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	3a01      	subs	r2, #1
 8001a56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a58:	2301      	movs	r3, #1
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff ff7c 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x44>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x44>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	1c02      	adds	r2, r0, #0
 8001a90:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b004      	add	sp, #16
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab6:	1dfb      	adds	r3, r7, #7
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff ff33 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b002      	add	sp, #8
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff ffaf 	bl	8001a38 <SysTick_Config>
 8001ada:	0003      	movs	r3, r0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e056      	b.n	8001ba4 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7f5b      	ldrb	r3, [r3, #29]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7fe ff35 	bl	8000978 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	791b      	ldrb	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10c      	bne.n	8001b36 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a22      	ldr	r2, [pc, #136]	; (8001bac <HAL_CRC_Init+0xc8>)
 8001b22:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2118      	movs	r1, #24
 8001b30:	438a      	bics	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e00b      	b.n	8001b4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f000 f835 	bl	8001bb0 <HAL_CRCEx_Polynomial_Set>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02a      	b.n	8001ba4 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	795b      	ldrb	r3, [r3, #5]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4252      	negs	r2, r2
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	e004      	b.n	8001b6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6912      	ldr	r2, [r2, #16]
 8001b6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2260      	movs	r2, #96	; 0x60
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	04c11db7 	.word	0x04c11db7

08001bb0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbc:	2317      	movs	r3, #23
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001bc4:	231f      	movs	r3, #31
 8001bc6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	613a      	str	r2, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_CRCEx_Polynomial_Set+0x36>
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	221f      	movs	r2, #31
 8001bd8:	4013      	ands	r3, r2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	40da      	lsrs	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f1      	beq.n	8001bca <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b18      	cmp	r3, #24
 8001bea:	d00f      	beq.n	8001c0c <HAL_CRCEx_Polynomial_Set+0x5c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b18      	cmp	r3, #24
 8001bf0:	d824      	bhi.n	8001c3c <HAL_CRCEx_Polynomial_Set+0x8c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d011      	beq.n	8001c1c <HAL_CRCEx_Polynomial_Set+0x6c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d81e      	bhi.n	8001c3c <HAL_CRCEx_Polynomial_Set+0x8c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_CRCEx_Polynomial_Set+0x96>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d010      	beq.n	8001c2c <HAL_CRCEx_Polynomial_Set+0x7c>
 8001c0a:	e017      	b.n	8001c3c <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d91b      	bls.n	8001c4a <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 8001c12:	2317      	movs	r3, #23
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001c1a:	e016      	b.n	8001c4a <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b07      	cmp	r3, #7
 8001c20:	d915      	bls.n	8001c4e <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 8001c22:	2317      	movs	r3, #23
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001c2a:	e010      	b.n	8001c4e <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	d90f      	bls.n	8001c52 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 8001c32:	2317      	movs	r3, #23
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001c3a:	e00a      	b.n	8001c52 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001c3c:	2317      	movs	r3, #23
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
      break;
 8001c44:	e006      	b.n	8001c54 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	e004      	b.n	8001c54 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	e002      	b.n	8001c54 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	e000      	b.n	8001c54 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001c52:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8001c54:	2317      	movs	r3, #23
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2218      	movs	r2, #24
 8001c6e:	4393      	bics	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001c7c:	2317      	movs	r3, #23
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b006      	add	sp, #24
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e14d      	b.n	8001f38 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d100      	bne.n	8001cb4 <HAL_GPIO_Init+0x28>
 8001cb2:	e13e      	b.n	8001f32 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d005      	beq.n	8001ccc <HAL_GPIO_Init+0x40>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d130      	bne.n	8001d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	0013      	movs	r3, r2
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	409a      	lsls	r2, r3
 8001cee:	0013      	movs	r3, r2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d02:	2201      	movs	r2, #1
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
 8001d08:	0013      	movs	r3, r2
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	2201      	movs	r2, #1
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d017      	beq.n	8001d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	409a      	lsls	r2, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2203      	movs	r2, #3
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d123      	bne.n	8001dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	58d3      	ldr	r3, [r2, r3]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2207      	movs	r2, #7
 8001d88:	4013      	ands	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	43da      	mvns	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2107      	movs	r1, #7
 8001da2:	400b      	ands	r3, r1
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	6939      	ldr	r1, [r7, #16]
 8001dbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	23c0      	movs	r3, #192	; 0xc0
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d100      	bne.n	8001e00 <HAL_GPIO_Init+0x174>
 8001dfe:	e098      	b.n	8001f32 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e00:	4a53      	ldr	r2, [pc, #332]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3318      	adds	r3, #24
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	589b      	ldr	r3, [r3, r2]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2203      	movs	r2, #3
 8001e12:	4013      	ands	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	220f      	movs	r2, #15
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	23a0      	movs	r3, #160	; 0xa0
 8001e28:	05db      	lsls	r3, r3, #23
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0x1d6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a48      	ldr	r2, [pc, #288]	; (8001f54 <HAL_GPIO_Init+0x2c8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x1d2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_GPIO_Init+0x2cc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x1ce>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a46      	ldr	r2, [pc, #280]	; (8001f5c <HAL_GPIO_Init+0x2d0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x1ca>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a45      	ldr	r2, [pc, #276]	; (8001f60 <HAL_GPIO_Init+0x2d4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x1c6>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e008      	b.n	8001e64 <HAL_GPIO_Init+0x1d8>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x1d8>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x1d8>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x1d8>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x1d8>
 8001e62:	2300      	movs	r3, #0
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	2103      	movs	r1, #3
 8001e68:	400a      	ands	r2, r1
 8001e6a:	00d2      	lsls	r2, r2, #3
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e74:	4936      	ldr	r1, [pc, #216]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	035b      	lsls	r3, r3, #13
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	039b      	lsls	r3, r3, #14
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	2384      	movs	r3, #132	; 0x84
 8001eda:	58d3      	ldr	r3, [r2, r3]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001efc:	4914      	ldr	r1, [pc, #80]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001efe:	2284      	movs	r2, #132	; 0x84
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	58d3      	ldr	r3, [r2, r3]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	025b      	lsls	r3, r3, #9
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f2a:	4909      	ldr	r1, [pc, #36]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	40da      	lsrs	r2, r3
 8001f40:	1e13      	subs	r3, r2, #0
 8001f42:	d000      	beq.n	8001f46 <HAL_GPIO_Init+0x2ba>
 8001f44:	e6aa      	b.n	8001c9c <HAL_GPIO_Init+0x10>
  }
}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b006      	add	sp, #24
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021800 	.word	0x40021800
 8001f54:	50000400 	.word	0x50000400
 8001f58:	50000800 	.word	0x50000800
 8001f5c:	50000c00 	.word	0x50000c00
 8001f60:	50001000 	.word	0x50001000

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	0008      	movs	r0, r1
 8001f6e:	0011      	movs	r1, r2
 8001f70:	1cbb      	adds	r3, r7, #2
 8001f72:	1c02      	adds	r2, r0, #0
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	1c7b      	adds	r3, r7, #1
 8001f78:	1c0a      	adds	r2, r1, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f7c:	1c7b      	adds	r3, r7, #1
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f84:	1cbb      	adds	r3, r7, #2
 8001f86:	881a      	ldrh	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f8c:	e003      	b.n	8001f96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f8e:	1cbb      	adds	r3, r7, #2
 8001f90:	881a      	ldrh	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	000a      	movs	r2, r1
 8001faa:	1cbb      	adds	r3, r7, #2
 8001fac:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8001fae:	230a      	movs	r3, #10
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001fb2:	e002      	b.n	8001fba <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f9      	bne.n	8001fb4 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8001fc0:	1cbb      	adds	r3, r7, #2
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <PCD_GET_EP_RX_CNT+0x40>)
 8001fc8:	4694      	mov	ip, r2
 8001fca:	4463      	add	r3, ip
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0c1b      	lsrs	r3, r3, #16
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	059b      	lsls	r3, r3, #22
 8001fd4:	0d9b      	lsrs	r3, r3, #22
 8001fd6:	b29b      	uxth	r3, r3
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40009800 	.word	0x40009800

08001fe4 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	000a      	movs	r2, r1
 8001fee:	1cbb      	adds	r3, r7, #2
 8001ff0:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001ff6:	e002      	b.n	8001ffe <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002004:	1cbb      	adds	r3, r7, #2
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4a06      	ldr	r2, [pc, #24]	; (8002024 <PCD_GET_EP_DBUF0_CNT+0x40>)
 800200c:	4694      	mov	ip, r2
 800200e:	4463      	add	r3, ip
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0c1b      	lsrs	r3, r3, #16
 8002014:	b29b      	uxth	r3, r3
 8002016:	059b      	lsls	r3, r3, #22
 8002018:	0d9b      	lsrs	r3, r3, #22
 800201a:	b29b      	uxth	r3, r3
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	b004      	add	sp, #16
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40009800 	.word	0x40009800

08002028 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	000a      	movs	r2, r1
 8002032:	1cbb      	adds	r3, r7, #2
 8002034:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = 10U;
 8002036:	230a      	movs	r3, #10
 8002038:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800203a:	e002      	b.n	8002042 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3b01      	subs	r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002048:	1cbb      	adds	r3, r7, #2
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4a06      	ldr	r2, [pc, #24]	; (8002068 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8002050:	4694      	mov	ip, r2
 8002052:	4463      	add	r3, ip
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	b29b      	uxth	r3, r3
 800205a:	059b      	lsls	r3, r3, #22
 800205c:	0d9b      	lsrs	r3, r3, #22
 800205e:	b29b      	uxth	r3, r3
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40009800 	.word	0x40009800

0800206c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206e:	b08f      	sub	sp, #60	; 0x3c
 8002070:	af0a      	add	r7, sp, #40	; 0x28
 8002072:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e10a      	b.n	8002294 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a86      	ldr	r2, [pc, #536]	; (800229c <HAL_PCD_Init+0x230>)
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d108      	bne.n	800209c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	23af      	movs	r3, #175	; 0xaf
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	2100      	movs	r1, #0
 8002092:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0018      	movs	r0, r3
 8002098:	f7fe ffb0 	bl	8000ffc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a7f      	ldr	r2, [pc, #508]	; (800229c <HAL_PCD_Init+0x230>)
 80020a0:	2103      	movs	r1, #3
 80020a2:	5499      	strb	r1, [r3, r2]

  /* DMA Not supported for FS instance, Force to Zero */
  hpcd->Init.dma_enable = 0U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f003 fcae 	bl	8005a10 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b4:	230f      	movs	r3, #15
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
 80020bc:	e05b      	b.n	8002176 <HAL_PCD_Init+0x10a>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020be:	240f      	movs	r4, #15
 80020c0:	193b      	adds	r3, r7, r4
 80020c2:	781a      	ldrb	r2, [r3, #0]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	203d      	movs	r0, #61	; 0x3d
 80020c8:	0013      	movs	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	189b      	adds	r3, r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	18cb      	adds	r3, r1, r3
 80020d2:	181b      	adds	r3, r3, r0
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020d8:	193b      	adds	r3, r7, r4
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	203c      	movs	r0, #60	; 0x3c
 80020e0:	0013      	movs	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	189b      	adds	r3, r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	18cb      	adds	r3, r1, r3
 80020ea:	181b      	adds	r3, r3, r0
 80020ec:	193a      	adds	r2, r7, r4
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020f2:	0025      	movs	r5, r4
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	197b      	adds	r3, r7, r5
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b29c      	uxth	r4, r3
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	2048      	movs	r0, #72	; 0x48
 8002102:	0013      	movs	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	189b      	adds	r3, r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	18cb      	adds	r3, r1, r3
 800210c:	181b      	adds	r3, r3, r0
 800210e:	1c22      	adds	r2, r4, #0
 8002110:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002112:	197b      	adds	r3, r7, r5
 8002114:	781a      	ldrb	r2, [r3, #0]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	203f      	movs	r0, #63	; 0x3f
 800211a:	0013      	movs	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	189b      	adds	r3, r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	18cb      	adds	r3, r1, r3
 8002124:	181b      	adds	r3, r3, r0
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212a:	197b      	adds	r3, r7, r5
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	0013      	movs	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	189b      	adds	r3, r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	18cb      	adds	r3, r1, r3
 800213a:	334c      	adds	r3, #76	; 0x4c
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002140:	197b      	adds	r3, r7, r5
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	0013      	movs	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	189b      	adds	r3, r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	18cb      	adds	r3, r1, r3
 8002150:	3350      	adds	r3, #80	; 0x50
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002156:	197b      	adds	r3, r7, r5
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	0013      	movs	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	189b      	adds	r3, r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	18cb      	adds	r3, r1, r3
 8002166:	3354      	adds	r3, #84	; 0x54
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216c:	197b      	adds	r3, r7, r5
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	197b      	adds	r3, r7, r5
 8002172:	3201      	adds	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	210f      	movs	r1, #15
 8002178:	187b      	adds	r3, r7, r1
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d39c      	bcc.n	80020be <HAL_PCD_Init+0x52>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	187b      	adds	r3, r7, r1
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e056      	b.n	800223a <HAL_PCD_Init+0x1ce>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800218c:	240f      	movs	r4, #15
 800218e:	193b      	adds	r3, r7, r4
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	237e      	movs	r3, #126	; 0x7e
 8002196:	33ff      	adds	r3, #255	; 0xff
 8002198:	0019      	movs	r1, r3
 800219a:	0013      	movs	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	18c3      	adds	r3, r0, r3
 80021a4:	185b      	adds	r3, r3, r1
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021aa:	193b      	adds	r3, r7, r4
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	23be      	movs	r3, #190	; 0xbe
 80021b2:	0059      	lsls	r1, r3, #1
 80021b4:	0013      	movs	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	189b      	adds	r3, r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	18c3      	adds	r3, r0, r3
 80021be:	185b      	adds	r3, r3, r1
 80021c0:	193a      	adds	r2, r7, r4
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	33ff      	adds	r3, #255	; 0xff
 80021d0:	0019      	movs	r1, r3
 80021d2:	0013      	movs	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	18c3      	adds	r3, r0, r3
 80021dc:	185b      	adds	r3, r3, r1
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	23c6      	movs	r3, #198	; 0xc6
 80021ea:	0059      	lsls	r1, r3, #1
 80021ec:	0013      	movs	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	189b      	adds	r3, r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	18c3      	adds	r3, r0, r3
 80021f6:	185b      	adds	r3, r3, r1
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	23c8      	movs	r3, #200	; 0xc8
 8002204:	0059      	lsls	r1, r3, #1
 8002206:	0013      	movs	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	189b      	adds	r3, r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	18c3      	adds	r3, r0, r3
 8002210:	185b      	adds	r3, r3, r1
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	23ca      	movs	r3, #202	; 0xca
 800221e:	0059      	lsls	r1, r3, #1
 8002220:	0013      	movs	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	189b      	adds	r3, r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	18c3      	adds	r3, r0, r3
 800222a:	185b      	adds	r3, r3, r1
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002230:	193b      	adds	r3, r7, r4
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	193b      	adds	r3, r7, r4
 8002236:	3201      	adds	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	230f      	movs	r3, #15
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d3a1      	bcc.n	800218c <HAL_PCD_Init+0x120>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681c      	ldr	r4, [r3, #0]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	466b      	mov	r3, sp
 8002250:	001a      	movs	r2, r3
 8002252:	0003      	movs	r3, r0
 8002254:	3310      	adds	r3, #16
 8002256:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002258:	c262      	stmia	r2!, {r1, r5, r6}
 800225a:	cb62      	ldmia	r3!, {r1, r5, r6}
 800225c:	c262      	stmia	r2!, {r1, r5, r6}
 800225e:	cb62      	ldmia	r3!, {r1, r5, r6}
 8002260:	c262      	stmia	r2!, {r1, r5, r6}
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	6841      	ldr	r1, [r0, #4]
 8002268:	6882      	ldr	r2, [r0, #8]
 800226a:	68c3      	ldr	r3, [r0, #12]
 800226c:	0020      	movs	r0, r4
 800226e:	f003 fc01 	bl	8005a74 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2238      	movs	r2, #56	; 0x38
 8002276:	2100      	movs	r1, #0
 8002278:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_PCD_Init+0x230>)
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2b01      	cmp	r3, #1
 8002288:	d103      	bne.n	8002292 <HAL_PCD_Init+0x226>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f001 fcb1 	bl	8003bf4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b005      	add	sp, #20
 800229a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229c:	000002bd 	.word	0x000002bd

080022a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	23af      	movs	r3, #175	; 0xaf
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_PCD_Start+0x18>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e014      	b.n	80022e2 <HAL_PCD_Start+0x42>
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	23af      	movs	r3, #175	; 0xaf
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	2101      	movs	r1, #1
 80022c0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f003 fb8e 	bl	80059e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0018      	movs	r0, r3
 80022d2:	f005 fa44 	bl	800775e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	23af      	movs	r3, #175	; 0xaf
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	2100      	movs	r1, #0
 80022de:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b002      	add	sp, #8
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f005 fa40 	bl	800777e <USB_ReadInterrupts>
 80022fe:	0003      	movs	r3, r0
 8002300:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 8002302:	4a7c      	ldr	r2, [pc, #496]	; (80024f4 <HAL_PCD_IRQHandler+0x208>)
 8002304:	23a0      	movs	r3, #160	; 0xa0
 8002306:	58d3      	ldr	r3, [r2, r3]
 8002308:	2204      	movs	r2, #4
 800230a:	4013      	ands	r3, r2
 800230c:	d100      	bne.n	8002310 <HAL_PCD_IRQHandler+0x24>
 800230e:	e0ed      	b.n	80024ec <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	4013      	ands	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 fb59 	bl	80029d4 <PCD_EP_ISR_Handler>

    return;
 8002322:	e0e4      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	2380      	movs	r3, #128	; 0x80
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4013      	ands	r3, r2
 800232c:	d011      	beq.n	8002352 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	496f      	ldr	r1, [pc, #444]	; (80024f8 <HAL_PCD_IRQHandler+0x20c>)
 800233a:	400a      	ands	r2, r1
 800233c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	0018      	movs	r0, r3
 8002342:	f7fe ff1e 	bl	8001182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2100      	movs	r1, #0
 800234a:	0018      	movs	r0, r3
 800234c:	f000 f8e4 	bl	8002518 <HAL_PCD_SetAddress>

    return;
 8002350:	e0cd      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	01db      	lsls	r3, r3, #7
 8002358:	4013      	ands	r3, r2
 800235a:	d008      	beq.n	800236e <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4965      	ldr	r1, [pc, #404]	; (80024fc <HAL_PCD_IRQHandler+0x210>)
 8002368:	400a      	ands	r2, r1
 800236a:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800236c:	e0bf      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	019b      	lsls	r3, r3, #6
 8002374:	4013      	ands	r3, r2
 8002376:	d008      	beq.n	800238a <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	495f      	ldr	r1, [pc, #380]	; (8002500 <HAL_PCD_IRQHandler+0x214>)
 8002384:	400a      	ands	r2, r1
 8002386:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 8002388:	e0b1      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	015b      	lsls	r3, r3, #5
 8002390:	4013      	ands	r3, r2
 8002392:	d02c      	beq.n	80023ee <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2104      	movs	r1, #4
 80023a0:	438a      	bics	r2, r1
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2108      	movs	r1, #8
 80023b0:	438a      	bics	r2, r1
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	23bd      	movs	r3, #189	; 0xbd
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	5cd3      	ldrb	r3, [r2, r3]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d109      	bne.n	80023d4 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	23bd      	movs	r3, #189	; 0xbd
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	2100      	movs	r1, #0
 80023c8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2100      	movs	r1, #0
 80023ce:	0018      	movs	r0, r3
 80023d0:	f7ff f958 	bl	8001684 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7fe ff14 	bl	8001204 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4947      	ldr	r1, [pc, #284]	; (8002504 <HAL_PCD_IRQHandler+0x218>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80023ec:	e07f      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	4013      	ands	r3, r2
 80023f6:	d01c      	beq.n	8002432 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2108      	movs	r1, #8
 8002404:	430a      	orrs	r2, r1
 8002406:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	493d      	ldr	r1, [pc, #244]	; (8002508 <HAL_PCD_IRQHandler+0x21c>)
 8002414:	400a      	ands	r2, r1
 8002416:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2104      	movs	r1, #4
 8002424:	430a      	orrs	r2, r1
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	0018      	movs	r0, r3
 800242c:	f7fe fece 	bl	80011cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002430:	e05d      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	4013      	ands	r3, r2
 8002438:	d038      	beq.n	80024ac <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4931      	ldr	r1, [pc, #196]	; (800250c <HAL_PCD_IRQHandler+0x220>)
 8002446:	400a      	ands	r2, r1
 8002448:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	23bd      	movs	r3, #189	; 0xbd
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d125      	bne.n	80024a2 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2104      	movs	r1, #4
 8002462:	430a      	orrs	r2, r1
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2108      	movs	r1, #8
 8002472:	430a      	orrs	r2, r1
 8002474:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	23bd      	movs	r3, #189	; 0xbd
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	2101      	movs	r1, #1
 800247e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	223c      	movs	r2, #60	; 0x3c
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	23be      	movs	r3, #190	; 0xbe
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2101      	movs	r1, #1
 800249a:	0018      	movs	r0, r3
 800249c:	f7ff f8f2 	bl	8001684 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80024a0:	e025      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7fe fe91 	bl	80011cc <HAL_PCD_SuspendCallback>
    return;
 80024aa:	e020      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4013      	ands	r3, r2
 80024b4:	d00c      	beq.n	80024d0 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4913      	ldr	r1, [pc, #76]	; (8002510 <HAL_PCD_IRQHandler+0x224>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe fe4b 	bl	8001164 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024ce:	e00e      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	490b      	ldr	r1, [pc, #44]	; (8002514 <HAL_PCD_IRQHandler+0x228>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 80024ea:	e000      	b.n	80024ee <HAL_PCD_IRQHandler+0x202>
    return;
 80024ec:	46c0      	nop			; (mov r8, r8)
  }
}
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40010000 	.word	0x40010000
 80024f8:	0000fbff 	.word	0x0000fbff
 80024fc:	0000bfff 	.word	0x0000bfff
 8002500:	0000dfff 	.word	0x0000dfff
 8002504:	0000efff 	.word	0x0000efff
 8002508:	0000f7ff 	.word	0x0000f7ff
 800250c:	0000ff7f 	.word	0x0000ff7f
 8002510:	0000fdff 	.word	0x0000fdff
 8002514:	0000feff 	.word	0x0000feff

08002518 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	000a      	movs	r2, r1
 8002522:	1cfb      	adds	r3, r7, #3
 8002524:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	23af      	movs	r3, #175	; 0xaf
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_PCD_SetAddress+0x1e>
 8002532:	2302      	movs	r3, #2
 8002534:	e017      	b.n	8002566 <HAL_PCD_SetAddress+0x4e>
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	23af      	movs	r3, #175	; 0xaf
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	2101      	movs	r1, #1
 800253e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1cfa      	adds	r2, r7, #3
 8002544:	2138      	movs	r1, #56	; 0x38
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	1cfb      	adds	r3, r7, #3
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	0019      	movs	r1, r3
 8002554:	0010      	movs	r0, r2
 8002556:	f005 f8ef 	bl	8007738 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	23af      	movs	r3, #175	; 0xaf
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	2100      	movs	r1, #0
 8002562:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800256e:	b590      	push	{r4, r7, lr}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	000c      	movs	r4, r1
 8002578:	0010      	movs	r0, r2
 800257a:	0019      	movs	r1, r3
 800257c:	1cfb      	adds	r3, r7, #3
 800257e:	1c22      	adds	r2, r4, #0
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	003b      	movs	r3, r7
 8002584:	1c02      	adds	r2, r0, #0
 8002586:	801a      	strh	r2, [r3, #0]
 8002588:	1cbb      	adds	r3, r7, #2
 800258a:	1c0a      	adds	r2, r1, #0
 800258c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800258e:	230b      	movs	r3, #11
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002596:	1cfb      	adds	r3, r7, #3
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b25b      	sxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	da10      	bge.n	80025c2 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a0:	1cfb      	adds	r3, r7, #3
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2207      	movs	r2, #7
 80025a6:	401a      	ands	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	3338      	adds	r3, #56	; 0x38
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	18d3      	adds	r3, r2, r3
 80025b6:	3304      	adds	r3, #4
 80025b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	705a      	strb	r2, [r3, #1]
 80025c0:	e010      	b.n	80025e4 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c2:	1cfb      	adds	r3, r7, #3
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2207      	movs	r2, #7
 80025c8:	401a      	ands	r2, r3
 80025ca:	0013      	movs	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	189b      	adds	r3, r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	3379      	adds	r3, #121	; 0x79
 80025d4:	33ff      	adds	r3, #255	; 0xff
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	18d3      	adds	r3, r2, r3
 80025da:	3304      	adds	r3, #4
 80025dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025e4:	1cfb      	adds	r3, r7, #3
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2207      	movs	r2, #7
 80025ea:	4013      	ands	r3, r2
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025f2:	003b      	movs	r3, r7
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1cba      	adds	r2, r7, #2
 80025fe:	7812      	ldrb	r2, [r2, #0]
 8002600:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_PCD_EP_Open+0xa6>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	819a      	strh	r2, [r3, #12]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002614:	1cbb      	adds	r3, r7, #2
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d102      	bne.n	8002622 <HAL_PCD_EP_Open+0xb4>
  {
    ep->data_pid_start = 0U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	72da      	strb	r2, [r3, #11]
  }

  __HAL_LOCK(hpcd);
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	23af      	movs	r3, #175	; 0xaf
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	5cd3      	ldrb	r3, [r2, r3]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_PCD_EP_Open+0xc4>
 800262e:	2302      	movs	r3, #2
 8002630:	e013      	b.n	800265a <HAL_PCD_EP_Open+0xec>
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	23af      	movs	r3, #175	; 0xaf
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	2101      	movs	r1, #1
 800263a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	0011      	movs	r1, r2
 8002644:	0018      	movs	r0, r3
 8002646:	f003 fa3f 	bl	8005ac8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	23af      	movs	r3, #175	; 0xaf
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	2100      	movs	r1, #0
 8002652:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002654:	230b      	movs	r3, #11
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b005      	add	sp, #20
 8002660:	bd90      	pop	{r4, r7, pc}

08002662 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	000a      	movs	r2, r1
 800266c:	1cfb      	adds	r3, r7, #3
 800266e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002670:	1cfb      	adds	r3, r7, #3
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	b25b      	sxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	da10      	bge.n	800269c <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267a:	1cfb      	adds	r3, r7, #3
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2207      	movs	r2, #7
 8002680:	401a      	ands	r2, r3
 8002682:	0013      	movs	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	189b      	adds	r3, r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	3338      	adds	r3, #56	; 0x38
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	18d3      	adds	r3, r2, r3
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	705a      	strb	r2, [r3, #1]
 800269a:	e010      	b.n	80026be <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269c:	1cfb      	adds	r3, r7, #3
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2207      	movs	r2, #7
 80026a2:	401a      	ands	r2, r3
 80026a4:	0013      	movs	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	189b      	adds	r3, r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3379      	adds	r3, #121	; 0x79
 80026ae:	33ff      	adds	r3, #255	; 0xff
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	18d3      	adds	r3, r2, r3
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80026be:	1cfb      	adds	r3, r7, #3
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2207      	movs	r2, #7
 80026c4:	4013      	ands	r3, r2
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	23af      	movs	r3, #175	; 0xaf
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_PCD_EP_Close+0x7a>
 80026d8:	2302      	movs	r3, #2
 80026da:	e011      	b.n	8002700 <HAL_PCD_EP_Close+0x9e>
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	23af      	movs	r3, #175	; 0xaf
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	2101      	movs	r1, #1
 80026e4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	0011      	movs	r1, r2
 80026ee:	0018      	movs	r0, r3
 80026f0:	f003 fd14 	bl	800611c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	23af      	movs	r3, #175	; 0xaf
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	2100      	movs	r1, #0
 80026fc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	200b      	movs	r0, #11
 8002716:	183b      	adds	r3, r7, r0
 8002718:	1c0a      	adds	r2, r1, #0
 800271a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800271c:	0001      	movs	r1, r0
 800271e:	187b      	adds	r3, r7, r1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2207      	movs	r2, #7
 8002724:	401a      	ands	r2, r3
 8002726:	0013      	movs	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	189b      	adds	r3, r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	3379      	adds	r3, #121	; 0x79
 8002730:	33ff      	adds	r3, #255	; 0xff
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	18d3      	adds	r3, r2, r3
 8002736:	3304      	adds	r3, #4
 8002738:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2200      	movs	r2, #0
 8002750:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002752:	187b      	adds	r3, r7, r1
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2207      	movs	r2, #7
 8002758:	4013      	ands	r3, r2
 800275a:	b2da      	uxtb	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002760:	187b      	adds	r3, r7, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2207      	movs	r2, #7
 8002766:	4013      	ands	r3, r2
 8002768:	d107      	bne.n	800277a <HAL_PCD_EP_Receive+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	0011      	movs	r1, r2
 8002772:	0018      	movs	r0, r3
 8002774:	f003 fe38 	bl	80063e8 <USB_EPStartXfer>
 8002778:	e006      	b.n	8002788 <HAL_PCD_EP_Receive+0x80>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	0011      	movs	r1, r2
 8002782:	0018      	movs	r0, r3
 8002784:	f003 fe30 	bl	80063e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b006      	add	sp, #24
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	000a      	movs	r2, r1
 800279c:	1cfb      	adds	r3, r7, #3
 800279e:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027a0:	1cfb      	adds	r3, r7, #3
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2207      	movs	r2, #7
 80027a6:	401a      	ands	r2, r3
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	23cc      	movs	r3, #204	; 0xcc
 80027ac:	0059      	lsls	r1, r3, #1
 80027ae:	0013      	movs	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	18c3      	adds	r3, r0, r3
 80027b8:	185b      	adds	r3, r3, r1
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	607a      	str	r2, [r7, #4]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	200b      	movs	r0, #11
 80027d2:	183b      	adds	r3, r7, r0
 80027d4:	1c0a      	adds	r2, r1, #0
 80027d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027d8:	183b      	adds	r3, r7, r0
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2207      	movs	r2, #7
 80027de:	401a      	ands	r2, r3
 80027e0:	0013      	movs	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	189b      	adds	r3, r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	3338      	adds	r3, #56	; 0x38
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	18d3      	adds	r3, r2, r3
 80027ee:	3304      	adds	r3, #4
 80027f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2224      	movs	r2, #36	; 0x24
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2201      	movs	r2, #1
 8002816:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002818:	183b      	adds	r3, r7, r0
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2207      	movs	r2, #7
 800281e:	4013      	ands	r3, r2
 8002820:	b2da      	uxtb	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002826:	183b      	adds	r3, r7, r0
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2207      	movs	r2, #7
 800282c:	4013      	ands	r3, r2
 800282e:	d107      	bne.n	8002840 <HAL_PCD_EP_Transmit+0x7c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f003 fdd5 	bl	80063e8 <USB_EPStartXfer>
 800283e:	e006      	b.n	800284e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	0011      	movs	r1, r2
 8002848:	0018      	movs	r0, r3
 800284a:	f003 fdcd 	bl	80063e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b006      	add	sp, #24
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	000a      	movs	r2, r1
 8002862:	1cfb      	adds	r3, r7, #3
 8002864:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002866:	1cfb      	adds	r3, r7, #3
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2207      	movs	r2, #7
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	429a      	cmp	r2, r3
 8002874:	d901      	bls.n	800287a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e048      	b.n	800290c <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800287a:	1cfb      	adds	r3, r7, #3
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b25b      	sxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	da10      	bge.n	80028a6 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002884:	1cfb      	adds	r3, r7, #3
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2207      	movs	r2, #7
 800288a:	401a      	ands	r2, r3
 800288c:	0013      	movs	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	189b      	adds	r3, r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	3338      	adds	r3, #56	; 0x38
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	18d3      	adds	r3, r2, r3
 800289a:	3304      	adds	r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	705a      	strb	r2, [r3, #1]
 80028a4:	e00e      	b.n	80028c4 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028a6:	1cfb      	adds	r3, r7, #3
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	0013      	movs	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	189b      	adds	r3, r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	3379      	adds	r3, #121	; 0x79
 80028b4:	33ff      	adds	r3, #255	; 0xff
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	3304      	adds	r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ca:	1cfb      	adds	r3, r7, #3
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2207      	movs	r2, #7
 80028d0:	4013      	ands	r3, r2
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	23af      	movs	r3, #175	; 0xaf
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	5cd3      	ldrb	r3, [r2, r3]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_PCD_EP_SetStall+0x90>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e011      	b.n	800290c <HAL_PCD_EP_SetStall+0xb4>
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	23af      	movs	r3, #175	; 0xaf
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	2101      	movs	r1, #1
 80028f0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	0011      	movs	r1, r2
 80028fa:	0018      	movs	r0, r3
 80028fc:	f004 fe48 	bl	8007590 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	23af      	movs	r3, #175	; 0xaf
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	2100      	movs	r1, #0
 8002908:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b004      	add	sp, #16
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	000a      	movs	r2, r1
 800291e:	1cfb      	adds	r3, r7, #3
 8002920:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002922:	1cfb      	adds	r3, r7, #3
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	220f      	movs	r2, #15
 8002928:	401a      	ands	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	d901      	bls.n	8002936 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e04a      	b.n	80029cc <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002936:	1cfb      	adds	r3, r7, #3
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b25b      	sxtb	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	da10      	bge.n	8002962 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002940:	1cfb      	adds	r3, r7, #3
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2207      	movs	r2, #7
 8002946:	401a      	ands	r2, r3
 8002948:	0013      	movs	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	189b      	adds	r3, r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	3338      	adds	r3, #56	; 0x38
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	3304      	adds	r3, #4
 8002958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	705a      	strb	r2, [r3, #1]
 8002960:	e010      	b.n	8002984 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002962:	1cfb      	adds	r3, r7, #3
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2207      	movs	r2, #7
 8002968:	401a      	ands	r2, r3
 800296a:	0013      	movs	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	189b      	adds	r3, r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	3379      	adds	r3, #121	; 0x79
 8002974:	33ff      	adds	r3, #255	; 0xff
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	18d3      	adds	r3, r2, r3
 800297a:	3304      	adds	r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800298a:	1cfb      	adds	r3, r7, #3
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2207      	movs	r2, #7
 8002990:	4013      	ands	r3, r2
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	23af      	movs	r3, #175	; 0xaf
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_PCD_EP_ClrStall+0x94>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e011      	b.n	80029cc <HAL_PCD_EP_ClrStall+0xb8>
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	23af      	movs	r3, #175	; 0xaf
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	2101      	movs	r1, #1
 80029b0:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	0011      	movs	r1, r2
 80029ba:	0018      	movs	r0, r3
 80029bc:	f004 fe2a 	bl	8007614 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	23af      	movs	r3, #175	; 0xaf
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	2100      	movs	r1, #0
 80029c8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b004      	add	sp, #16
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b08e      	sub	sp, #56	; 0x38
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029dc:	f000 fb90 	bl	8003100 <PCD_EP_ISR_Handler+0x72c>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029e6:	202a      	movs	r0, #42	; 0x2a
 80029e8:	183b      	adds	r3, r7, r0
 80029ea:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80029ec:	183b      	adds	r3, r7, r0
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	2429      	movs	r4, #41	; 0x29
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	210f      	movs	r1, #15
 80029f8:	400a      	ands	r2, r1
 80029fa:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d000      	beq.n	8002a06 <PCD_EP_ISR_Handler+0x32>
 8002a04:	e136      	b.n	8002c74 <PCD_EP_ISR_Handler+0x2a0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a06:	183b      	adds	r3, r7, r0
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d143      	bne.n	8002a98 <PCD_EP_ISR_Handler+0xc4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4acb      	ldr	r2, [pc, #812]	; (8002d44 <PCD_EP_ISR_Handler+0x370>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	0209      	lsls	r1, r1, #8
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	333c      	adds	r3, #60	; 0x3c
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4ac4      	ldr	r2, [pc, #784]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002a38:	4694      	mov	ip, r2
 8002a3a:	4463      	add	r3, ip
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0c1b      	lsrs	r3, r3, #16
 8002a40:	059b      	lsls	r3, r3, #22
 8002a42:	0d9a      	lsrs	r2, r3, #22
 8002a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	18d2      	adds	r2, r2, r3
 8002a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2100      	movs	r1, #0
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7fe fb64 	bl	8001128 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2238      	movs	r2, #56	; 0x38
 8002a64:	5c9b      	ldrb	r3, [r3, r2]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d100      	bne.n	8002a6e <PCD_EP_ISR_Handler+0x9a>
 8002a6c:	e348      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d000      	beq.n	8002a78 <PCD_EP_ISR_Handler+0xa4>
 8002a76:	e343      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2238      	movs	r2, #56	; 0x38
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	4252      	negs	r2, r2
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2238      	movs	r2, #56	; 0x38
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]
 8002a96:	e333      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	337d      	adds	r3, #125	; 0x7d
 8002a9c:	33ff      	adds	r3, #255	; 0xff
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2126      	movs	r1, #38	; 0x26
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	881a      	ldrh	r2, [r3, #0]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d02a      	beq.n	8002b0e <PCD_EP_ISR_Handler+0x13a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	f7ff fa6b 	bl	8001fa0 <PCD_GET_EP_RX_CNT>
 8002aca:	0003      	movs	r3, r0
 8002acc:	001a      	movs	r2, r3
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	22b1      	movs	r2, #177	; 0xb1
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	1899      	adds	r1, r3, r2
 8002ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae0:	889a      	ldrh	r2, [r3, #4]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f004 fecc 	bl	8007884 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a96      	ldr	r2, [pc, #600]	; (8002d4c <PCD_EP_ISR_Handler+0x378>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7fe fad8 	bl	80010bc <HAL_PCD_SetupStageCallback>
 8002b0c:	e2f8      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002b0e:	2326      	movs	r3, #38	; 0x26
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2200      	movs	r2, #0
 8002b14:	5e9b      	ldrsh	r3, [r3, r2]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db00      	blt.n	8002b1c <PCD_EP_ISR_Handler+0x148>
 8002b1a:	e2f1      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a8a      	ldr	r2, [pc, #552]	; (8002d4c <PCD_EP_ISR_Handler+0x378>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	0019      	movs	r1, r3
 8002b40:	0010      	movs	r0, r2
 8002b42:	f7ff fa2d 	bl	8001fa0 <PCD_GET_EP_RX_CNT>
 8002b46:	0003      	movs	r3, r0
 8002b48:	001a      	movs	r2, r3
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d01a      	beq.n	8002b8c <PCD_EP_ISR_Handler+0x1b8>
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <PCD_EP_ISR_Handler+0x1b8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	6959      	ldr	r1, [r3, #20]
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	889a      	ldrh	r2, [r3, #4]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f004 fe88 	bl	8007884 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	18d2      	adds	r2, r2, r3
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2100      	movs	r1, #0
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7fe faad 	bl	80010e6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2126      	movs	r1, #38	; 0x26
 8002b94:	187b      	adds	r3, r7, r1
 8002b96:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d000      	beq.n	8002ba6 <PCD_EP_ISR_Handler+0x1d2>
 8002ba4:	e2ac      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	881a      	ldrh	r2, [r3, #0]
 8002baa:	23c0      	movs	r3, #192	; 0xc0
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	401a      	ands	r2, r3
 8002bb0:	23c0      	movs	r3, #192	; 0xc0
 8002bb2:	019b      	lsls	r3, r3, #6
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d100      	bne.n	8002bba <PCD_EP_ISR_Handler+0x1e6>
 8002bb8:	e2a2      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4b62      	ldr	r3, [pc, #392]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002bc0:	0412      	lsls	r2, r2, #16
 8002bc2:	0c12      	lsrs	r2, r2, #16
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b3e      	cmp	r3, #62	; 0x3e
 8002bcc:	d916      	bls.n	8002bfc <PCD_EP_ISR_Handler+0x228>
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	221f      	movs	r2, #31
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d102      	bne.n	8002be6 <PCD_EP_ISR_Handler+0x212>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	069b      	lsls	r3, r3, #26
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	0609      	lsls	r1, r1, #24
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e024      	b.n	8002c46 <PCD_EP_ISR_Handler+0x272>
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10d      	bne.n	8002c20 <PCD_EP_ISR_Handler+0x24c>
 8002c04:	4b50      	ldr	r3, [pc, #320]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002c0a:	4951      	ldr	r1, [pc, #324]	; (8002d50 <PCD_EP_ISR_Handler+0x37c>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	0609      	lsls	r1, r1, #24
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	e012      	b.n	8002c46 <PCD_EP_ISR_Handler+0x272>
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d002      	beq.n	8002c38 <PCD_EP_ISR_Handler+0x264>
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	3301      	adds	r3, #1
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	069a      	lsls	r2, r3, #26
 8002c40:	4b41      	ldr	r3, [pc, #260]	; (8002d48 <PCD_EP_ISR_Handler+0x374>)
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a41      	ldr	r2, [pc, #260]	; (8002d54 <PCD_EP_ISR_Handler+0x380>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	0152      	lsls	r2, r2, #5
 8002c58:	4053      	eors	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	0192      	lsls	r2, r2, #6
 8002c62:	4053      	eors	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	493a      	ldr	r1, [pc, #232]	; (8002d58 <PCD_EP_ISR_Handler+0x384>)
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e245      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2129      	movs	r1, #41	; 0x29
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	18d3      	adds	r3, r2, r3
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2026      	movs	r0, #38	; 0x26
 8002c88:	183b      	adds	r3, r7, r0
 8002c8a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002c8c:	183b      	adds	r3, r7, r0
 8002c8e:	2200      	movs	r2, #0
 8002c90:	5e9b      	ldrsh	r3, [r3, r2]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db00      	blt.n	8002c98 <PCD_EP_ISR_Handler+0x2c4>
 8002c96:	e0e4      	b.n	8002e62 <PCD_EP_ISR_Handler+0x48e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	18d3      	adds	r3, r2, r3
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <PCD_EP_ISR_Handler+0x378>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	001a      	movs	r2, r3
 8002cb4:	0008      	movs	r0, r1
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	18d3      	adds	r3, r2, r3
 8002cbe:	6a3a      	ldr	r2, [r7, #32]
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	0013      	movs	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	3379      	adds	r3, #121	; 0x79
 8002cd4:	33ff      	adds	r3, #255	; 0xff
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	3304      	adds	r3, #4
 8002cdc:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	7a9b      	ldrb	r3, [r3, #10]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d11d      	bne.n	8002d22 <PCD_EP_ISR_Handler+0x34e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	252c      	movs	r5, #44	; 0x2c
 8002cf2:	197c      	adds	r4, r7, r5
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	0010      	movs	r0, r2
 8002cf8:	f7ff f952 	bl	8001fa0 <PCD_GET_EP_RX_CNT>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8002d00:	002c      	movs	r4, r5
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d100      	bne.n	8002d0c <PCD_EP_ISR_Handler+0x338>
 8002d0a:	e082      	b.n	8002e12 <PCD_EP_ISR_Handler+0x43e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d12:	6959      	ldr	r1, [r3, #20]
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d16:	889a      	ldrh	r2, [r3, #4]
 8002d18:	193b      	adds	r3, r7, r4
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	f004 fdb2 	bl	8007884 <USB_ReadPMA>
 8002d20:	e077      	b.n	8002e12 <PCD_EP_ISR_Handler+0x43e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d24:	78db      	ldrb	r3, [r3, #3]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d118      	bne.n	8002d5c <PCD_EP_ISR_Handler+0x388>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d2a:	232c      	movs	r3, #44	; 0x2c
 8002d2c:	18fc      	adds	r4, r7, r3
 8002d2e:	2326      	movs	r3, #38	; 0x26
 8002d30:	18fb      	adds	r3, r7, r3
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f9ef 	bl	800311c <HAL_PCD_EP_DB_Receive>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	8023      	strh	r3, [r4, #0]
 8002d42:	e066      	b.n	8002e12 <PCD_EP_ISR_Handler+0x43e>
 8002d44:	07ff8f0f 	.word	0x07ff8f0f
 8002d48:	40009800 	.word	0x40009800
 8002d4c:	07ff0f8f 	.word	0x07ff0f8f
 8002d50:	83ffffff 	.word	0x83ffffff
 8002d54:	07ffbf8f 	.word	0x07ffbf8f
 8002d58:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	001a      	movs	r2, r3
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	18d3      	adds	r3, r2, r3
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4adb      	ldr	r2, [pc, #876]	; (80030dc <PCD_EP_ISR_Handler+0x708>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	001a      	movs	r2, r3
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	18d3      	adds	r3, r2, r3
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	49d7      	ldr	r1, [pc, #860]	; (80030e0 <PCD_EP_ISR_Handler+0x70c>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	18d3      	adds	r3, r2, r3
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	01db      	lsls	r3, r3, #7
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d01c      	beq.n	8002dda <PCD_EP_ISR_Handler+0x406>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	252c      	movs	r5, #44	; 0x2c
 8002dac:	197c      	adds	r4, r7, r5
 8002dae:	0019      	movs	r1, r3
 8002db0:	0010      	movs	r0, r2
 8002db2:	f7ff f917 	bl	8001fe4 <PCD_GET_EP_DBUF0_CNT>
 8002db6:	0003      	movs	r3, r0
 8002db8:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8002dba:	002c      	movs	r4, r5
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d026      	beq.n	8002e12 <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dca:	6959      	ldr	r1, [r3, #20]
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dce:	88da      	ldrh	r2, [r3, #6]
 8002dd0:	193b      	adds	r3, r7, r4
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	f004 fd56 	bl	8007884 <USB_ReadPMA>
 8002dd8:	e01b      	b.n	8002e12 <PCD_EP_ISR_Handler+0x43e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	252c      	movs	r5, #44	; 0x2c
 8002de6:	197c      	adds	r4, r7, r5
 8002de8:	0019      	movs	r1, r3
 8002dea:	0010      	movs	r0, r2
 8002dec:	f7ff f91c 	bl	8002028 <PCD_GET_EP_DBUF1_CNT>
 8002df0:	0003      	movs	r3, r0
 8002df2:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8002df4:	002c      	movs	r4, r5
 8002df6:	193b      	adds	r3, r7, r4
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <PCD_EP_ISR_Handler+0x43e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	6959      	ldr	r1, [r3, #20]
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	891a      	ldrh	r2, [r3, #8]
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	f004 fd39 	bl	8007884 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	18d2      	adds	r2, r2, r3
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	187b      	adds	r3, r7, r1
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	18d2      	adds	r2, r2, r3
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <PCD_EP_ISR_Handler+0x470>
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	881a      	ldrh	r2, [r3, #0]
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d207      	bcs.n	8002e54 <PCD_EP_ISR_Handler+0x480>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7fe f94a 	bl	80010e6 <HAL_PCD_DataOutStageCallback>
 8002e52:	e006      	b.n	8002e62 <PCD_EP_ISR_Handler+0x48e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f003 fac3 	bl	80063e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8002e62:	2026      	movs	r0, #38	; 0x26
 8002e64:	183b      	adds	r3, r7, r0
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d100      	bne.n	8002e70 <PCD_EP_ISR_Handler+0x49c>
 8002e6e:	e147      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e70:	2129      	movs	r1, #41	; 0x29
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	0013      	movs	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	3338      	adds	r3, #56	; 0x38
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	18d3      	adds	r3, r2, r3
 8002e84:	3304      	adds	r3, #4
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	18d3      	adds	r3, r2, r3
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a92      	ldr	r2, [pc, #584]	; (80030e4 <PCD_EP_ISR_Handler+0x710>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	18d3      	adds	r3, r2, r3
 8002eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	0209      	lsls	r1, r1, #8
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	78db      	ldrb	r3, [r3, #3]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d000      	beq.n	8002ec0 <PCD_EP_ISR_Handler+0x4ec>
 8002ebe:	e0c3      	b.n	8003048 <PCD_EP_ISR_Handler+0x674>
        {
          ep->xfer_len = 0U;
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	7a9b      	ldrb	r3, [r3, #10]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d100      	bne.n	8002ed0 <PCD_EP_ISR_Handler+0x4fc>
 8002ece:	e0b3      	b.n	8003038 <PCD_EP_ISR_Handler+0x664>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ed0:	183b      	adds	r3, r7, r0
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	2240      	movs	r2, #64	; 0x40
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d057      	beq.n	8002f8a <PCD_EP_ISR_Handler+0x5b6>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d131      	bne.n	8002f46 <PCD_EP_ISR_Handler+0x572>
 8002ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4a7f      	ldr	r2, [pc, #508]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002eea:	4694      	mov	ip, r2
 8002eec:	4463      	add	r3, ip
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	497c      	ldr	r1, [pc, #496]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002ef8:	468c      	mov	ip, r1
 8002efa:	4463      	add	r3, ip
 8002efc:	0412      	lsls	r2, r2, #16
 8002efe:	0c12      	lsrs	r2, r2, #16
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4a77      	ldr	r2, [pc, #476]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f0a:	4694      	mov	ip, r2
 8002f0c:	4463      	add	r3, ip
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4974      	ldr	r1, [pc, #464]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f18:	468c      	mov	ip, r1
 8002f1a:	4463      	add	r3, ip
 8002f1c:	4973      	ldr	r1, [pc, #460]	; (80030ec <PCD_EP_ISR_Handler+0x718>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4a6f      	ldr	r2, [pc, #444]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f2a:	4694      	mov	ip, r2
 8002f2c:	4463      	add	r3, ip
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	496c      	ldr	r1, [pc, #432]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f38:	468c      	mov	ip, r1
 8002f3a:	4463      	add	r3, ip
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	0609      	lsls	r1, r1, #24
 8002f40:	430a      	orrs	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e078      	b.n	8003038 <PCD_EP_ISR_Handler+0x664>
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d174      	bne.n	8003038 <PCD_EP_ISR_Handler+0x664>
 8002f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4a64      	ldr	r2, [pc, #400]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f56:	4694      	mov	ip, r2
 8002f58:	4463      	add	r3, ip
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4961      	ldr	r1, [pc, #388]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f64:	468c      	mov	ip, r1
 8002f66:	4463      	add	r3, ip
 8002f68:	0412      	lsls	r2, r2, #16
 8002f6a:	0c12      	lsrs	r2, r2, #16
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f76:	189a      	adds	r2, r3, r2
 8002f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	495a      	ldr	r1, [pc, #360]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f80:	468c      	mov	ip, r1
 8002f82:	4463      	add	r3, ip
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e056      	b.n	8003038 <PCD_EP_ISR_Handler+0x664>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d131      	bne.n	8002ff6 <PCD_EP_ISR_Handler+0x622>
 8002f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4a53      	ldr	r2, [pc, #332]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002f9a:	4694      	mov	ip, r2
 8002f9c:	4463      	add	r3, ip
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4950      	ldr	r1, [pc, #320]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002fa8:	468c      	mov	ip, r1
 8002faa:	4463      	add	r3, ip
 8002fac:	0412      	lsls	r2, r2, #16
 8002fae:	0c12      	lsrs	r2, r2, #16
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4a4b      	ldr	r2, [pc, #300]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002fba:	4694      	mov	ip, r2
 8002fbc:	4463      	add	r3, ip
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4948      	ldr	r1, [pc, #288]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002fc8:	468c      	mov	ip, r1
 8002fca:	4463      	add	r3, ip
 8002fcc:	4947      	ldr	r1, [pc, #284]	; (80030ec <PCD_EP_ISR_Handler+0x718>)
 8002fce:	400a      	ands	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4a43      	ldr	r2, [pc, #268]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002fda:	4694      	mov	ip, r2
 8002fdc:	4463      	add	r3, ip
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4940      	ldr	r1, [pc, #256]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8002fe8:	468c      	mov	ip, r1
 8002fea:	4463      	add	r3, ip
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	0609      	lsls	r1, r1, #24
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	e020      	b.n	8003038 <PCD_EP_ISR_Handler+0x664>
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d11c      	bne.n	8003038 <PCD_EP_ISR_Handler+0x664>
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4a38      	ldr	r2, [pc, #224]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8003006:	4694      	mov	ip, r2
 8003008:	4463      	add	r3, ip
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4935      	ldr	r1, [pc, #212]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8003014:	468c      	mov	ip, r1
 8003016:	4463      	add	r3, ip
 8003018:	0412      	lsls	r2, r2, #16
 800301a:	0c12      	lsrs	r2, r2, #16
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4a30      	ldr	r2, [pc, #192]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8003026:	189a      	adds	r2, r3, r2
 8003028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	492e      	ldr	r1, [pc, #184]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 8003030:	468c      	mov	ip, r1
 8003032:	4463      	add	r3, ip
 8003034:	6852      	ldr	r2, [r2, #4]
 8003036:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0011      	movs	r1, r2
 8003040:	0018      	movs	r0, r3
 8003042:	f7fe f871 	bl	8001128 <HAL_PCD_DataInStageCallback>
 8003046:	e05b      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003048:	2326      	movs	r3, #38	; 0x26
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	881a      	ldrh	r2, [r3, #0]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4013      	ands	r3, r2
 8003054:	d14c      	bne.n	80030f0 <PCD_EP_ISR_Handler+0x71c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <PCD_EP_ISR_Handler+0x714>)
 800305e:	4694      	mov	ip, r2
 8003060:	4463      	add	r3, ip
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	b29a      	uxth	r2, r3
 8003068:	212e      	movs	r1, #46	; 0x2e
 800306a:	187b      	adds	r3, r7, r1
 800306c:	0592      	lsls	r2, r2, #22
 800306e:	0d92      	lsrs	r2, r2, #22
 8003070:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	187b      	adds	r3, r7, r1
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d907      	bls.n	800308e <PCD_EP_ISR_Handler+0x6ba>
            {
              ep->xfer_len -= TxPctSize;
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	187b      	adds	r3, r7, r1
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	1ad2      	subs	r2, r2, r3
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	619a      	str	r2, [r3, #24]
 800308c:	e002      	b.n	8003094 <PCD_EP_ISR_Handler+0x6c0>
            }
            else
            {
              ep->xfer_len = 0U;
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d107      	bne.n	80030ac <PCD_EP_ISR_Handler+0x6d8>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	0011      	movs	r1, r2
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fe f83f 	bl	8001128 <HAL_PCD_DataInStageCallback>
 80030aa:	e029      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	212e      	movs	r1, #46	; 0x2e
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	18d2      	adds	r2, r2, r3
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	18d2      	adds	r2, r2, r3
 80030c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d0:	0011      	movs	r1, r2
 80030d2:	0018      	movs	r0, r3
 80030d4:	f003 f988 	bl	80063e8 <USB_EPStartXfer>
 80030d8:	e012      	b.n	8003100 <PCD_EP_ISR_Handler+0x72c>
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	07ff8f8f 	.word	0x07ff8f8f
 80030e0:	000080c0 	.word	0x000080c0
 80030e4:	07ff8f0f 	.word	0x07ff8f0f
 80030e8:	40009800 	.word	0x40009800
 80030ec:	83ffffff 	.word	0x83ffffff
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030f0:	2326      	movs	r3, #38	; 0x26
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	881a      	ldrh	r2, [r3, #0]
 80030f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 f8fa 	bl	80032f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	4013      	ands	r3, r2
 800310c:	d000      	beq.n	8003110 <PCD_EP_ISR_Handler+0x73c>
 800310e:	e467      	b.n	80029e0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b00e      	add	sp, #56	; 0x38
 8003118:	bdb0      	pop	{r4, r5, r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)

0800311c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800311c:	b5b0      	push	{r4, r5, r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	1dbb      	adds	r3, r7, #6
 8003128:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800312a:	1dbb      	adds	r3, r7, #6
 800312c:	881a      	ldrh	r2, [r3, #0]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	01db      	lsls	r3, r3, #7
 8003132:	4013      	ands	r3, r2
 8003134:	d068      	beq.n	8003208 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	251e      	movs	r5, #30
 8003142:	197c      	adds	r4, r7, r5
 8003144:	0019      	movs	r1, r3
 8003146:	0010      	movs	r0, r2
 8003148:	f7fe ff4c 	bl	8001fe4 <PCD_GET_EP_DBUF0_CNT>
 800314c:	0003      	movs	r3, r0
 800314e:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	699a      	ldr	r2, [r3, #24]
 8003154:	197b      	adds	r3, r7, r5
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d307      	bcc.n	800316c <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	699a      	ldr	r2, [r3, #24]
 8003160:	197b      	adds	r3, r7, r5
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	1ad2      	subs	r2, r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	619a      	str	r2, [r3, #24]
 800316a:	e002      	b.n	8003172 <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d11a      	bne.n	80031b0 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	001a      	movs	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	18d3      	adds	r3, r2, r3
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	0192      	lsls	r2, r2, #6
 8003196:	4053      	eors	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	001a      	movs	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	18d3      	adds	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	494f      	ldr	r1, [pc, #316]	; (80032e8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031b0:	1dbb      	adds	r3, r7, #6
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	2240      	movs	r2, #64	; 0x40
 80031b6:	4013      	ands	r3, r2
 80031b8:	d015      	beq.n	80031e6 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	001a      	movs	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	18d3      	adds	r3, r2, r3
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a48      	ldr	r2, [pc, #288]	; (80032ec <HAL_PCD_EP_DB_Receive+0x1d0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	001a      	movs	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4943      	ldr	r1, [pc, #268]	; (80032f0 <HAL_PCD_EP_DB_Receive+0x1d4>)
 80031e2:	430a      	orrs	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80031e6:	241e      	movs	r4, #30
 80031e8:	193b      	adds	r3, r7, r4
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d100      	bne.n	80031f2 <HAL_PCD_EP_DB_Receive+0xd6>
 80031f0:	e071      	b.n	80032d6 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6959      	ldr	r1, [r3, #20]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	88da      	ldrh	r2, [r3, #6]
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	f004 fb3f 	bl	8007884 <USB_ReadPMA>
 8003206:	e066      	b.n	80032d6 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	251e      	movs	r5, #30
 8003214:	197c      	adds	r4, r7, r5
 8003216:	0019      	movs	r1, r3
 8003218:	0010      	movs	r0, r2
 800321a:	f7fe ff05 	bl	8002028 <PCD_GET_EP_DBUF1_CNT>
 800321e:	0003      	movs	r3, r0
 8003220:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	197b      	adds	r3, r7, r5
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d307      	bcc.n	800323e <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	197b      	adds	r3, r7, r5
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	1ad2      	subs	r2, r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	619a      	str	r2, [r3, #24]
 800323c:	e002      	b.n	8003244 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11a      	bne.n	8003282 <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	001a      	movs	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	18d3      	adds	r3, r2, r3
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800325e:	4013      	ands	r3, r2
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	0192      	lsls	r2, r2, #6
 8003268:	4053      	eors	r3, r2
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	001a      	movs	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	18d3      	adds	r3, r2, r3
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	491a      	ldr	r1, [pc, #104]	; (80032e8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800327e:	430a      	orrs	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003282:	1dbb      	adds	r3, r7, #6
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	4013      	ands	r3, r2
 800328a:	d115      	bne.n	80032b8 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	001a      	movs	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	18d3      	adds	r3, r2, r3
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a13      	ldr	r2, [pc, #76]	; (80032ec <HAL_PCD_EP_DB_Receive+0x1d0>)
 800329e:	4013      	ands	r3, r2
 80032a0:	623b      	str	r3, [r7, #32]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	001a      	movs	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	18d3      	adds	r3, r2, r3
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	490f      	ldr	r1, [pc, #60]	; (80032f0 <HAL_PCD_EP_DB_Receive+0x1d4>)
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 80032b8:	241e      	movs	r4, #30
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6959      	ldr	r1, [r3, #20]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	891a      	ldrh	r2, [r3, #8]
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	f004 fad7 	bl	8007884 <USB_ReadPMA>
    }
  }

  return count;
 80032d6:	231e      	movs	r3, #30
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	881b      	ldrh	r3, [r3, #0]
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b00a      	add	sp, #40	; 0x28
 80032e2:	bdb0      	pop	{r4, r5, r7, pc}
 80032e4:	07ffbf8f 	.word	0x07ffbf8f
 80032e8:	00008080 	.word	0x00008080
 80032ec:	07ff8f8f 	.word	0x07ff8f8f
 80032f0:	000080c0 	.word	0x000080c0

080032f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032f4:	b5b0      	push	{r4, r5, r7, lr}
 80032f6:	b08e      	sub	sp, #56	; 0x38
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	1dbb      	adds	r3, r7, #6
 8003300:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003302:	1dbb      	adds	r3, r7, #6
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	4013      	ands	r3, r2
 800330a:	d100      	bne.n	800330e <HAL_PCD_EP_DB_Transmit+0x1a>
 800330c:	e1fc      	b.n	8003708 <HAL_PCD_EP_DB_Transmit+0x414>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	2526      	movs	r5, #38	; 0x26
 800331a:	197c      	adds	r4, r7, r5
 800331c:	0019      	movs	r1, r3
 800331e:	0010      	movs	r0, r2
 8003320:	f7fe fe60 	bl	8001fe4 <PCD_GET_EP_DBUF0_CNT>
 8003324:	0003      	movs	r3, r0
 8003326:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	197b      	adds	r3, r7, r5
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d907      	bls.n	8003344 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	197b      	adds	r3, r7, r5
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	1ad2      	subs	r2, r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	619a      	str	r2, [r3, #24]
 8003342:	e002      	b.n	800334a <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2200      	movs	r2, #0
 8003348:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d000      	beq.n	8003354 <HAL_PCD_EP_DB_Transmit+0x60>
 8003352:	e0d2      	b.n	80034fa <HAL_PCD_EP_DB_Transmit+0x206>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d131      	bne.n	80033c0 <HAL_PCD_EP_DB_Transmit+0xcc>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4ae5      	ldr	r2, [pc, #916]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003364:	4694      	mov	ip, r2
 8003366:	4463      	add	r3, ip
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	49e1      	ldr	r1, [pc, #900]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003372:	468c      	mov	ip, r1
 8003374:	4463      	add	r3, ip
 8003376:	0412      	lsls	r2, r2, #16
 8003378:	0c12      	lsrs	r2, r2, #16
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4add      	ldr	r2, [pc, #884]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003384:	4694      	mov	ip, r2
 8003386:	4463      	add	r3, ip
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	49d9      	ldr	r1, [pc, #868]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003392:	468c      	mov	ip, r1
 8003394:	4463      	add	r3, ip
 8003396:	49d9      	ldr	r1, [pc, #868]	; (80036fc <HAL_PCD_EP_DB_Transmit+0x408>)
 8003398:	400a      	ands	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4ad5      	ldr	r2, [pc, #852]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80033a4:	4694      	mov	ip, r2
 80033a6:	4463      	add	r3, ip
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	49d1      	ldr	r1, [pc, #836]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80033b2:	468c      	mov	ip, r1
 80033b4:	4463      	add	r3, ip
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0609      	lsls	r1, r1, #24
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e020      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x10e>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d11c      	bne.n	8003402 <HAL_PCD_EP_DB_Transmit+0x10e>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4aca      	ldr	r2, [pc, #808]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80033d0:	4694      	mov	ip, r2
 80033d2:	4463      	add	r3, ip
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	49c6      	ldr	r1, [pc, #792]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80033de:	468c      	mov	ip, r1
 80033e0:	4463      	add	r3, ip
 80033e2:	0412      	lsls	r2, r2, #16
 80033e4:	0c12      	lsrs	r2, r2, #16
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4ac2      	ldr	r2, [pc, #776]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80033f0:	189a      	adds	r2, r3, r2
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	49bf      	ldr	r1, [pc, #764]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80033fa:	468c      	mov	ip, r1
 80033fc:	4463      	add	r3, ip
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	785b      	ldrb	r3, [r3, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d131      	bne.n	800346e <HAL_PCD_EP_DB_Transmit+0x17a>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4ab9      	ldr	r2, [pc, #740]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003412:	4694      	mov	ip, r2
 8003414:	4463      	add	r3, ip
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	49b6      	ldr	r1, [pc, #728]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003420:	468c      	mov	ip, r1
 8003422:	4463      	add	r3, ip
 8003424:	0412      	lsls	r2, r2, #16
 8003426:	0c12      	lsrs	r2, r2, #16
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4ab1      	ldr	r2, [pc, #708]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003432:	4694      	mov	ip, r2
 8003434:	4463      	add	r3, ip
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	49ae      	ldr	r1, [pc, #696]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003440:	468c      	mov	ip, r1
 8003442:	4463      	add	r3, ip
 8003444:	49ad      	ldr	r1, [pc, #692]	; (80036fc <HAL_PCD_EP_DB_Transmit+0x408>)
 8003446:	400a      	ands	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4aa9      	ldr	r2, [pc, #676]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003452:	4694      	mov	ip, r2
 8003454:	4463      	add	r3, ip
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	49a6      	ldr	r1, [pc, #664]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003460:	468c      	mov	ip, r1
 8003462:	4463      	add	r3, ip
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	0609      	lsls	r1, r1, #24
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	e020      	b.n	80034b0 <HAL_PCD_EP_DB_Transmit+0x1bc>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	785b      	ldrb	r3, [r3, #1]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d11c      	bne.n	80034b0 <HAL_PCD_EP_DB_Transmit+0x1bc>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4a9e      	ldr	r2, [pc, #632]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 800347e:	4694      	mov	ip, r2
 8003480:	4463      	add	r3, ip
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	499b      	ldr	r1, [pc, #620]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 800348c:	468c      	mov	ip, r1
 800348e:	4463      	add	r3, ip
 8003490:	0412      	lsls	r2, r2, #16
 8003492:	0c12      	lsrs	r2, r2, #16
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4a96      	ldr	r2, [pc, #600]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 800349e:	189a      	adds	r2, r3, r2
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4994      	ldr	r1, [pc, #592]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80034a8:	468c      	mov	ip, r1
 80034aa:	4463      	add	r3, ip
 80034ac:	6852      	ldr	r2, [r2, #4]
 80034ae:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781a      	ldrb	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	0011      	movs	r1, r2
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7fd fe35 	bl	8001128 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034be:	1dbb      	adds	r3, r7, #6
 80034c0:	881a      	ldrh	r2, [r3, #0]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	01db      	lsls	r3, r3, #7
 80034c6:	4013      	ands	r3, r2
 80034c8:	d100      	bne.n	80034cc <HAL_PCD_EP_DB_Transmit+0x1d8>
 80034ca:	e31a      	b.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	001a      	movs	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	18d3      	adds	r3, r2, r3
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a88      	ldr	r2, [pc, #544]	; (8003700 <HAL_PCD_EP_DB_Transmit+0x40c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	001a      	movs	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	18d3      	adds	r3, r2, r3
 80034f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f2:	4984      	ldr	r1, [pc, #528]	; (8003704 <HAL_PCD_EP_DB_Transmit+0x410>)
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e303      	b.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034fa:	1dbb      	adds	r3, r7, #6
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	01db      	lsls	r3, r3, #7
 8003502:	4013      	ands	r3, r2
 8003504:	d015      	beq.n	8003532 <HAL_PCD_EP_DB_Transmit+0x23e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	001a      	movs	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	18d3      	adds	r3, r2, r3
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7a      	ldr	r2, [pc, #488]	; (8003700 <HAL_PCD_EP_DB_Transmit+0x40c>)
 8003518:	4013      	ands	r3, r2
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	001a      	movs	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	18d3      	adds	r3, r2, r3
 800352a:	6a3a      	ldr	r2, [r7, #32]
 800352c:	4975      	ldr	r1, [pc, #468]	; (8003704 <HAL_PCD_EP_DB_Transmit+0x410>)
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2224      	movs	r2, #36	; 0x24
 8003536:	5c9b      	ldrb	r3, [r3, r2]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d000      	beq.n	800353e <HAL_PCD_EP_DB_Transmit+0x24a>
 800353c:	e2e1      	b.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	2126      	movs	r1, #38	; 0x26
 8003544:	187b      	adds	r3, r7, r1
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	18d2      	adds	r2, r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	187b      	adds	r3, r7, r1
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	18d2      	adds	r2, r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	429a      	cmp	r2, r3
 8003566:	d309      	bcc.n	800357c <HAL_PCD_EP_DB_Transmit+0x288>
        {
          len = ep->maxpacket;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6a1a      	ldr	r2, [r3, #32]
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	621a      	str	r2, [r3, #32]
 800357a:	e016      	b.n	80035aa <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else if (ep->xfer_len_db == 0U)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d108      	bne.n	8003596 <HAL_PCD_EP_DB_Transmit+0x2a2>
        {
          len = TxPctSize;
 8003584:	2326      	movs	r3, #38	; 0x26
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2224      	movs	r2, #36	; 0x24
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]
 8003594:	e009      	b.n	80035aa <HAL_PCD_EP_DB_Transmit+0x2b6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2224      	movs	r2, #36	; 0x24
 800359a:	2100      	movs	r1, #0
 800359c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d172      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0x3a4>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4a4f      	ldr	r2, [pc, #316]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80035ba:	4694      	mov	ip, r2
 80035bc:	4463      	add	r3, ip
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	494c      	ldr	r1, [pc, #304]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80035c8:	468c      	mov	ip, r1
 80035ca:	4463      	add	r3, ip
 80035cc:	0412      	lsls	r2, r2, #16
 80035ce:	0c12      	lsrs	r2, r2, #16
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	2b3e      	cmp	r3, #62	; 0x3e
 80035d6:	d91e      	bls.n	8003616 <HAL_PCD_EP_DB_Transmit+0x322>
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	221f      	movs	r2, #31
 80035e2:	4013      	ands	r3, r2
 80035e4:	d102      	bne.n	80035ec <HAL_PCD_EP_DB_Transmit+0x2f8>
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	3b01      	subs	r3, #1
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4a41      	ldr	r2, [pc, #260]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80035f4:	4694      	mov	ip, r2
 80035f6:	4463      	add	r3, ip
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	069b      	lsls	r3, r3, #26
 80035fe:	431a      	orrs	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	493c      	ldr	r1, [pc, #240]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003608:	468c      	mov	ip, r1
 800360a:	4463      	add	r3, ip
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	0609      	lsls	r1, r1, #24
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e065      	b.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	2b00      	cmp	r3, #0
 800361a:	d121      	bne.n	8003660 <HAL_PCD_EP_DB_Transmit+0x36c>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003624:	4694      	mov	ip, r2
 8003626:	4463      	add	r3, ip
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4931      	ldr	r1, [pc, #196]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003632:	468c      	mov	ip, r1
 8003634:	4463      	add	r3, ip
 8003636:	4931      	ldr	r1, [pc, #196]	; (80036fc <HAL_PCD_EP_DB_Transmit+0x408>)
 8003638:	400a      	ands	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003644:	4694      	mov	ip, r2
 8003646:	4463      	add	r3, ip
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4929      	ldr	r1, [pc, #164]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 8003652:	468c      	mov	ip, r1
 8003654:	4463      	add	r3, ip
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	0609      	lsls	r1, r1, #24
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e040      	b.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2201      	movs	r2, #1
 800366a:	4013      	ands	r3, r2
 800366c:	d002      	beq.n	8003674 <HAL_PCD_EP_DB_Transmit+0x380>
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	3301      	adds	r3, #1
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 800367c:	4694      	mov	ip, r2
 800367e:	4463      	add	r3, ip
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	069a      	lsls	r2, r3, #26
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	481a      	ldr	r0, [pc, #104]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 800368e:	4684      	mov	ip, r0
 8003690:	4463      	add	r3, ip
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e024      	b.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	785b      	ldrb	r3, [r3, #1]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d120      	bne.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x3ee>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80036a8:	4694      	mov	ip, r2
 80036aa:	4463      	add	r3, ip
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4910      	ldr	r1, [pc, #64]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80036b6:	468c      	mov	ip, r1
 80036b8:	4463      	add	r3, ip
 80036ba:	0412      	lsls	r2, r2, #16
 80036bc:	0c12      	lsrs	r2, r2, #16
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80036c8:	4694      	mov	ip, r2
 80036ca:	4463      	add	r3, ip
 80036cc:	6819      	ldr	r1, [r3, #0]
 80036ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d0:	041a      	lsls	r2, r3, #16
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4807      	ldr	r0, [pc, #28]	; (80036f8 <HAL_PCD_EP_DB_Transmit+0x404>)
 80036da:	4684      	mov	ip, r0
 80036dc:	4463      	add	r3, ip
 80036de:	430a      	orrs	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6959      	ldr	r1, [r3, #20]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	88da      	ldrh	r2, [r3, #6]
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f004 f851 	bl	8007798 <USB_WritePMA>
 80036f6:	e204      	b.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x80e>
 80036f8:	40009800 	.word	0x40009800
 80036fc:	83ffffff 	.word	0x83ffffff
 8003700:	07ff8f8f 	.word	0x07ff8f8f
 8003704:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	2526      	movs	r5, #38	; 0x26
 8003714:	197c      	adds	r4, r7, r5
 8003716:	0019      	movs	r1, r3
 8003718:	0010      	movs	r0, r2
 800371a:	f7fe fc85 	bl	8002028 <PCD_GET_EP_DBUF1_CNT>
 800371e:	0003      	movs	r3, r0
 8003720:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	197b      	adds	r3, r7, r5
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d307      	bcc.n	800373e <HAL_PCD_EP_DB_Transmit+0x44a>
    {
      ep->xfer_len -= TxPctSize;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	197b      	adds	r3, r7, r5
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	1ad2      	subs	r2, r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	619a      	str	r2, [r3, #24]
 800373c:	e002      	b.n	8003744 <HAL_PCD_EP_DB_Transmit+0x450>
    }
    else
    {
      ep->xfer_len = 0U;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d000      	beq.n	800374e <HAL_PCD_EP_DB_Transmit+0x45a>
 800374c:	e0d2      	b.n	80038f4 <HAL_PCD_EP_DB_Transmit+0x600>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	785b      	ldrb	r3, [r3, #1]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d131      	bne.n	80037ba <HAL_PCD_EP_DB_Transmit+0x4c6>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4acd      	ldr	r2, [pc, #820]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800375e:	4694      	mov	ip, r2
 8003760:	4463      	add	r3, ip
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	49ca      	ldr	r1, [pc, #808]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800376c:	468c      	mov	ip, r1
 800376e:	4463      	add	r3, ip
 8003770:	0412      	lsls	r2, r2, #16
 8003772:	0c12      	lsrs	r2, r2, #16
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4ac5      	ldr	r2, [pc, #788]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800377e:	4694      	mov	ip, r2
 8003780:	4463      	add	r3, ip
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	49c2      	ldr	r1, [pc, #776]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800378c:	468c      	mov	ip, r1
 800378e:	4463      	add	r3, ip
 8003790:	49c1      	ldr	r1, [pc, #772]	; (8003a98 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003792:	400a      	ands	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4abd      	ldr	r2, [pc, #756]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800379e:	4694      	mov	ip, r2
 80037a0:	4463      	add	r3, ip
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	49ba      	ldr	r1, [pc, #744]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80037ac:	468c      	mov	ip, r1
 80037ae:	4463      	add	r3, ip
 80037b0:	2180      	movs	r1, #128	; 0x80
 80037b2:	0609      	lsls	r1, r1, #24
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e020      	b.n	80037fc <HAL_PCD_EP_DB_Transmit+0x508>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	785b      	ldrb	r3, [r3, #1]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d11c      	bne.n	80037fc <HAL_PCD_EP_DB_Transmit+0x508>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4ab2      	ldr	r2, [pc, #712]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80037ca:	4694      	mov	ip, r2
 80037cc:	4463      	add	r3, ip
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	49af      	ldr	r1, [pc, #700]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80037d8:	468c      	mov	ip, r1
 80037da:	4463      	add	r3, ip
 80037dc:	0412      	lsls	r2, r2, #16
 80037de:	0c12      	lsrs	r2, r2, #16
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4aaa      	ldr	r2, [pc, #680]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80037ea:	189a      	adds	r2, r3, r2
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	49a8      	ldr	r1, [pc, #672]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80037f4:	468c      	mov	ip, r1
 80037f6:	4463      	add	r3, ip
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d131      	bne.n	8003868 <HAL_PCD_EP_DB_Transmit+0x574>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4aa2      	ldr	r2, [pc, #648]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800380c:	4694      	mov	ip, r2
 800380e:	4463      	add	r3, ip
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	499e      	ldr	r1, [pc, #632]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800381a:	468c      	mov	ip, r1
 800381c:	4463      	add	r3, ip
 800381e:	0412      	lsls	r2, r2, #16
 8003820:	0c12      	lsrs	r2, r2, #16
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4a9a      	ldr	r2, [pc, #616]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800382c:	4694      	mov	ip, r2
 800382e:	4463      	add	r3, ip
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4996      	ldr	r1, [pc, #600]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800383a:	468c      	mov	ip, r1
 800383c:	4463      	add	r3, ip
 800383e:	4996      	ldr	r1, [pc, #600]	; (8003a98 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003840:	400a      	ands	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4a92      	ldr	r2, [pc, #584]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800384c:	4694      	mov	ip, r2
 800384e:	4463      	add	r3, ip
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	498e      	ldr	r1, [pc, #568]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 800385a:	468c      	mov	ip, r1
 800385c:	4463      	add	r3, ip
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	0609      	lsls	r1, r1, #24
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	e020      	b.n	80038aa <HAL_PCD_EP_DB_Transmit+0x5b6>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	785b      	ldrb	r3, [r3, #1]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d11c      	bne.n	80038aa <HAL_PCD_EP_DB_Transmit+0x5b6>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4a87      	ldr	r2, [pc, #540]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003878:	4694      	mov	ip, r2
 800387a:	4463      	add	r3, ip
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4983      	ldr	r1, [pc, #524]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003886:	468c      	mov	ip, r1
 8003888:	4463      	add	r3, ip
 800388a:	0412      	lsls	r2, r2, #16
 800388c:	0c12      	lsrs	r2, r2, #16
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4a7f      	ldr	r2, [pc, #508]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003898:	189a      	adds	r2, r3, r2
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	497c      	ldr	r1, [pc, #496]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80038a2:	468c      	mov	ip, r1
 80038a4:	4463      	add	r3, ip
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7fd fc38 	bl	8001128 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038b8:	1dbb      	adds	r3, r7, #6
 80038ba:	881a      	ldrh	r2, [r3, #0]
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	01db      	lsls	r3, r3, #7
 80038c0:	4013      	ands	r3, r2
 80038c2:	d000      	beq.n	80038c6 <HAL_PCD_EP_DB_Transmit+0x5d2>
 80038c4:	e11d      	b.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	001a      	movs	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	18d3      	adds	r3, r2, r3
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a71      	ldr	r2, [pc, #452]	; (8003a9c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80038d8:	4013      	ands	r3, r2
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	001a      	movs	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	18d3      	adds	r3, r2, r3
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	496c      	ldr	r1, [pc, #432]	; (8003aa0 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	e106      	b.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x80e>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038f4:	1dbb      	adds	r3, r7, #6
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	01db      	lsls	r3, r3, #7
 80038fc:	4013      	ands	r3, r2
 80038fe:	d115      	bne.n	800392c <HAL_PCD_EP_DB_Transmit+0x638>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	001a      	movs	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	18d3      	adds	r3, r2, r3
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a62      	ldr	r2, [pc, #392]	; (8003a9c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003912:	4013      	ands	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	001a      	movs	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	18d3      	adds	r3, r2, r3
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	495e      	ldr	r1, [pc, #376]	; (8003aa0 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	5c9b      	ldrb	r3, [r3, r2]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d000      	beq.n	8003938 <HAL_PCD_EP_DB_Transmit+0x644>
 8003936:	e0e4      	b.n	8003b02 <HAL_PCD_EP_DB_Transmit+0x80e>
      {
        ep->xfer_buff += TxPctSize;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	2126      	movs	r1, #38	; 0x26
 800393e:	187b      	adds	r3, r7, r1
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	18d2      	adds	r2, r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	187b      	adds	r3, r7, r1
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	18d2      	adds	r2, r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	d309      	bcc.n	8003976 <HAL_PCD_EP_DB_Transmit+0x682>
        {
          len = ep->maxpacket;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db -= len;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	6a1a      	ldr	r2, [r3, #32]
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	621a      	str	r2, [r3, #32]
 8003974:	e016      	b.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else if (ep->xfer_len_db == 0U)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d108      	bne.n	8003990 <HAL_PCD_EP_DB_Transmit+0x69c>
        {
          len = TxPctSize;
 800397e:	2326      	movs	r3, #38	; 0x26
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_fill_db = 0U;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2224      	movs	r2, #36	; 0x24
 800398a:	2100      	movs	r1, #0
 800398c:	5499      	strb	r1, [r3, r2]
 800398e:	e009      	b.n	80039a4 <HAL_PCD_EP_DB_Transmit+0x6b0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
          ep->xfer_len_db = 0U;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2224      	movs	r2, #36	; 0x24
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d000      	beq.n	80039ae <HAL_PCD_EP_DB_Transmit+0x6ba>
 80039ac:	e07a      	b.n	8003aa4 <HAL_PCD_EP_DB_Transmit+0x7b0>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4a37      	ldr	r2, [pc, #220]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80039b6:	4694      	mov	ip, r2
 80039b8:	4463      	add	r3, ip
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4934      	ldr	r1, [pc, #208]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80039c4:	468c      	mov	ip, r1
 80039c6:	4463      	add	r3, ip
 80039c8:	0412      	lsls	r2, r2, #16
 80039ca:	0c12      	lsrs	r2, r2, #16
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	2b3e      	cmp	r3, #62	; 0x3e
 80039d2:	d91e      	bls.n	8003a12 <HAL_PCD_EP_DB_Transmit+0x71e>
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	221f      	movs	r2, #31
 80039de:	4013      	ands	r3, r2
 80039e0:	d102      	bne.n	80039e8 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 80039f0:	4694      	mov	ip, r2
 80039f2:	4463      	add	r3, ip
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	069b      	lsls	r3, r3, #26
 80039fa:	431a      	orrs	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4924      	ldr	r1, [pc, #144]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003a04:	468c      	mov	ip, r1
 8003a06:	4463      	add	r3, ip
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	0609      	lsls	r1, r1, #24
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	e06d      	b.n	8003aee <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d121      	bne.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x768>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003a20:	4694      	mov	ip, r2
 8003a22:	4463      	add	r3, ip
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4919      	ldr	r1, [pc, #100]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003a2e:	468c      	mov	ip, r1
 8003a30:	4463      	add	r3, ip
 8003a32:	4919      	ldr	r1, [pc, #100]	; (8003a98 <HAL_PCD_EP_DB_Transmit+0x7a4>)
 8003a34:	400a      	ands	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003a40:	4694      	mov	ip, r2
 8003a42:	4463      	add	r3, ip
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4911      	ldr	r1, [pc, #68]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003a4e:	468c      	mov	ip, r1
 8003a50:	4463      	add	r3, ip
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	0609      	lsls	r1, r1, #24
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	e048      	b.n	8003aee <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2201      	movs	r2, #1
 8003a66:	4013      	ands	r3, r2
 8003a68:	d002      	beq.n	8003a70 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4a07      	ldr	r2, [pc, #28]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003a78:	4694      	mov	ip, r2
 8003a7a:	4463      	add	r3, ip
 8003a7c:	6859      	ldr	r1, [r3, #4]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	069a      	lsls	r2, r3, #26
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4802      	ldr	r0, [pc, #8]	; (8003a94 <HAL_PCD_EP_DB_Transmit+0x7a0>)
 8003a8a:	4684      	mov	ip, r0
 8003a8c:	4463      	add	r3, ip
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	e02c      	b.n	8003aee <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003a94:	40009800 	.word	0x40009800
 8003a98:	83ffffff 	.word	0x83ffffff
 8003a9c:	07ff8f8f 	.word	0x07ff8f8f
 8003aa0:	0000c080 	.word	0x0000c080
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	785b      	ldrb	r3, [r3, #1]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d120      	bne.n	8003aee <HAL_PCD_EP_DB_Transmit+0x7fa>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4a25      	ldr	r2, [pc, #148]	; (8003b48 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003ab4:	4694      	mov	ip, r2
 8003ab6:	4463      	add	r3, ip
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4921      	ldr	r1, [pc, #132]	; (8003b48 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003ac2:	468c      	mov	ip, r1
 8003ac4:	4463      	add	r3, ip
 8003ac6:	0412      	lsls	r2, r2, #16
 8003ac8:	0c12      	lsrs	r2, r2, #16
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003ad4:	4694      	mov	ip, r2
 8003ad6:	4463      	add	r3, ip
 8003ad8:	6859      	ldr	r1, [r3, #4]
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	041a      	lsls	r2, r3, #16
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4818      	ldr	r0, [pc, #96]	; (8003b48 <HAL_PCD_EP_DB_Transmit+0x854>)
 8003ae6:	4684      	mov	ip, r0
 8003ae8:	4463      	add	r3, ip
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6959      	ldr	r1, [r3, #20]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	891a      	ldrh	r2, [r3, #8]
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f003 fe4b 	bl	8007798 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	001a      	movs	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	18d3      	adds	r3, r2, r3
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_PCD_EP_DB_Transmit+0x858>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	4053      	eors	r3, r2
 8003b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	2220      	movs	r2, #32
 8003b24:	4053      	eors	r3, r2
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	18d3      	adds	r3, r2, r3
 8003b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b38:	4905      	ldr	r1, [pc, #20]	; (8003b50 <HAL_PCD_EP_DB_Transmit+0x85c>)
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b00e      	add	sp, #56	; 0x38
 8003b46:	bdb0      	pop	{r4, r5, r7, pc}
 8003b48:	40009800 	.word	0x40009800
 8003b4c:	07ff8fbf 	.word	0x07ff8fbf
 8003b50:	00008080 	.word	0x00008080

08003b54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	0008      	movs	r0, r1
 8003b5e:	0011      	movs	r1, r2
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	240a      	movs	r4, #10
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	1c02      	adds	r2, r0, #0
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	1c0a      	adds	r2, r1, #0
 8003b70:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003b72:	0021      	movs	r1, r4
 8003b74:	187b      	adds	r3, r7, r1
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	2207      	movs	r2, #7
 8003b88:	401a      	ands	r2, r3
 8003b8a:	0013      	movs	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	3338      	adds	r3, #56	; 0x38
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	18d3      	adds	r3, r2, r3
 8003b98:	3304      	adds	r3, #4
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e00c      	b.n	8003bb8 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b9e:	230a      	movs	r3, #10
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	3379      	adds	r3, #121	; 0x79
 8003bae:	33ff      	adds	r3, #255	; 0xff
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	18d3      	adds	r3, r2, r3
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003bb8:	2308      	movs	r3, #8
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d107      	bne.n	8003bd2 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	809a      	strh	r2, [r3, #4]
 8003bd0:	e00b      	b.n	8003bea <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	729a      	strb	r2, [r3, #10]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	811a      	strh	r2, [r3, #8]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b007      	add	sp, #28
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	23bf      	movs	r3, #191	; 0xbf
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	2101      	movs	r1, #1
 8003c0a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	23bd      	movs	r3, #189	; 0xbd
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	2100      	movs	r1, #0
 8003c14:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	2202      	movs	r2, #2
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	0018      	movs	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b004      	add	sp, #16
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <HAL_PWREx_EnableVddUSB+0x18>)
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <HAL_PWREx_EnableVddUSB+0x18>)
 8003c42:	2180      	movs	r1, #128	; 0x80
 8003c44:	00c9      	lsls	r1, r1, #3
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40007000 	.word	0x40007000

08003c54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c5c:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	0019      	movs	r1, r3
 8003c66:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d11f      	bne.n	8003cb8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	189b      	adds	r3, r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4912      	ldr	r1, [pc, #72]	; (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7fc fa3c 	bl	8000104 <__udivsi3>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	3301      	adds	r3, #1
 8003c90:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c92:	e008      	b.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e001      	b.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e009      	b.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	401a      	ands	r2, r3
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d0ed      	beq.n	8003c94 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	0018      	movs	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b004      	add	sp, #16
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	fffff9ff 	.word	0xfffff9ff
 8003ccc:	20000068 	.word	0x20000068
 8003cd0:	000f4240 	.word	0x000f4240

08003cd4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	23e0      	movs	r3, #224	; 0xe0
 8003cde:	01db      	lsls	r3, r3, #7
 8003ce0:	4013      	ands	r3, r2
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000

08003cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f000 fb50 	bl	80043a0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2201      	movs	r2, #1
 8003d06:	4013      	ands	r3, r2
 8003d08:	d100      	bne.n	8003d0c <HAL_RCC_OscConfig+0x20>
 8003d0a:	e07c      	b.n	8003e06 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0c:	4bc3      	ldr	r3, [pc, #780]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2238      	movs	r2, #56	; 0x38
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d16:	4bc1      	ldr	r3, [pc, #772]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d102      	bne.n	8003d2c <HAL_RCC_OscConfig+0x40>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d002      	beq.n	8003d32 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d10b      	bne.n	8003d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d32:	4bba      	ldr	r3, [pc, #744]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d062      	beq.n	8003e04 <HAL_RCC_OscConfig+0x118>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d15e      	bne.n	8003e04 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e32a      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	025b      	lsls	r3, r3, #9
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_OscConfig+0x7a>
 8003d56:	4bb1      	ldr	r3, [pc, #708]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4bb0      	ldr	r3, [pc, #704]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	0249      	lsls	r1, r1, #9
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e020      	b.n	8003da8 <HAL_RCC_OscConfig+0xbc>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	23a0      	movs	r3, #160	; 0xa0
 8003d6c:	02db      	lsls	r3, r3, #11
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d10e      	bne.n	8003d90 <HAL_RCC_OscConfig+0xa4>
 8003d72:	4baa      	ldr	r3, [pc, #680]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4ba9      	ldr	r3, [pc, #676]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	02c9      	lsls	r1, r1, #11
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	4ba6      	ldr	r3, [pc, #664]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4ba5      	ldr	r3, [pc, #660]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	0249      	lsls	r1, r1, #9
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCC_OscConfig+0xbc>
 8003d90:	4ba2      	ldr	r3, [pc, #648]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4ba1      	ldr	r3, [pc, #644]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d96:	49a2      	ldr	r1, [pc, #648]	; (8004020 <HAL_RCC_OscConfig+0x334>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	4b9f      	ldr	r3, [pc, #636]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b9e      	ldr	r3, [pc, #632]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003da2:	49a0      	ldr	r1, [pc, #640]	; (8004024 <HAL_RCC_OscConfig+0x338>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d014      	beq.n	8003dda <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fd fd76 	bl	80018a0 <HAL_GetTick>
 8003db4:	0003      	movs	r3, r0
 8003db6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dba:	f7fd fd71 	bl	80018a0 <HAL_GetTick>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e2e9      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dcc:	4b93      	ldr	r3, [pc, #588]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	029b      	lsls	r3, r3, #10
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCC_OscConfig+0xce>
 8003dd8:	e015      	b.n	8003e06 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dda:	f7fd fd61 	bl	80018a0 <HAL_GetTick>
 8003dde:	0003      	movs	r3, r0
 8003de0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fd5c 	bl	80018a0 <HAL_GetTick>
 8003de8:	0002      	movs	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e2d4      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df6:	4b89      	ldr	r3, [pc, #548]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	029b      	lsls	r3, r3, #10
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0xf8>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d100      	bne.n	8003e12 <HAL_RCC_OscConfig+0x126>
 8003e10:	e099      	b.n	8003f46 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e12:	4b82      	ldr	r3, [pc, #520]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2238      	movs	r2, #56	; 0x38
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	4b7f      	ldr	r3, [pc, #508]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2203      	movs	r2, #3
 8003e22:	4013      	ands	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d102      	bne.n	8003e32 <HAL_RCC_OscConfig+0x146>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d002      	beq.n	8003e38 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d135      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e38:	4b78      	ldr	r3, [pc, #480]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4013      	ands	r3, r2
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_OscConfig+0x164>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e2a7      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b72      	ldr	r3, [pc, #456]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a74      	ldr	r2, [pc, #464]	; (8004028 <HAL_RCC_OscConfig+0x33c>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	021a      	lsls	r2, r3, #8
 8003e60:	4b6e      	ldr	r3, [pc, #440]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d112      	bne.n	8003e92 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e6c:	4b6b      	ldr	r3, [pc, #428]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6e      	ldr	r2, [pc, #440]	; (800402c <HAL_RCC_OscConfig+0x340>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	0019      	movs	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	4b68      	ldr	r3, [pc, #416]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e80:	4b66      	ldr	r3, [pc, #408]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	0adb      	lsrs	r3, r3, #11
 8003e86:	2207      	movs	r2, #7
 8003e88:	4013      	ands	r3, r2
 8003e8a:	4a69      	ldr	r2, [pc, #420]	; (8004030 <HAL_RCC_OscConfig+0x344>)
 8003e8c:	40da      	lsrs	r2, r3
 8003e8e:	4b69      	ldr	r3, [pc, #420]	; (8004034 <HAL_RCC_OscConfig+0x348>)
 8003e90:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e92:	4b69      	ldr	r3, [pc, #420]	; (8004038 <HAL_RCC_OscConfig+0x34c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	0018      	movs	r0, r3
 8003e98:	f7fd fca6 	bl	80017e8 <HAL_InitTick>
 8003e9c:	1e03      	subs	r3, r0, #0
 8003e9e:	d051      	beq.n	8003f44 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e27d      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d030      	beq.n	8003f0e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003eac:	4b5b      	ldr	r3, [pc, #364]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5e      	ldr	r2, [pc, #376]	; (800402c <HAL_RCC_OscConfig+0x340>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	4b58      	ldr	r3, [pc, #352]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	4b56      	ldr	r3, [pc, #344]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b55      	ldr	r3, [pc, #340]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	0049      	lsls	r1, r1, #1
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fd fce7 	bl	80018a0 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd fce2 	bl	80018a0 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e25a      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eea:	4b4c      	ldr	r3, [pc, #304]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef6:	4b49      	ldr	r3, [pc, #292]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4a4b      	ldr	r2, [pc, #300]	; (8004028 <HAL_RCC_OscConfig+0x33c>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	0019      	movs	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	021a      	lsls	r2, r3, #8
 8003f06:	4b45      	ldr	r3, [pc, #276]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	e01b      	b.n	8003f46 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b42      	ldr	r3, [pc, #264]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003f14:	4949      	ldr	r1, [pc, #292]	; (800403c <HAL_RCC_OscConfig+0x350>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fcc1 	bl	80018a0 <HAL_GetTick>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f24:	f7fd fcbc 	bl	80018a0 <HAL_GetTick>
 8003f28:	0002      	movs	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e234      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	2380      	movs	r3, #128	; 0x80
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x238>
 8003f42:	e000      	b.n	8003f46 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d047      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2238      	movs	r2, #56	; 0x38
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b18      	cmp	r3, #24
 8003f5a:	d10a      	bne.n	8003f72 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f5c:	4b2f      	ldr	r3, [pc, #188]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	2202      	movs	r2, #2
 8003f62:	4013      	ands	r3, r2
 8003f64:	d03c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2f4>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d138      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e216      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d019      	beq.n	8003fae <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b28      	ldr	r3, [pc, #160]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003f7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003f80:	2101      	movs	r1, #1
 8003f82:	430a      	orrs	r2, r1
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fd fc8b 	bl	80018a0 <HAL_GetTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f90:	f7fd fc86 	bl	80018a0 <HAL_GetTick>
 8003f94:	0002      	movs	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e1fe      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d0f1      	beq.n	8003f90 <HAL_RCC_OscConfig+0x2a4>
 8003fac:	e018      	b.n	8003fe0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003fb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	438a      	bics	r2, r1
 8003fb8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fd fc71 	bl	80018a0 <HAL_GetTick>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc4:	f7fd fc6c 	bl	80018a0 <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1e4      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fda:	2202      	movs	r2, #2
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d1f1      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d100      	bne.n	8003fec <HAL_RCC_OscConfig+0x300>
 8003fea:	e0c7      	b.n	800417c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fec:	231f      	movs	r3, #31
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2238      	movs	r2, #56	; 0x38
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d11f      	bne.n	8004040 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_OscConfig+0x330>)
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	2202      	movs	r2, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d100      	bne.n	800400c <HAL_RCC_OscConfig+0x320>
 800400a:	e0b7      	b.n	800417c <HAL_RCC_OscConfig+0x490>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d000      	beq.n	8004016 <HAL_RCC_OscConfig+0x32a>
 8004014:	e0b2      	b.n	800417c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1c2      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	40021000 	.word	0x40021000
 8004020:	fffeffff 	.word	0xfffeffff
 8004024:	fffbffff 	.word	0xfffbffff
 8004028:	ffff80ff 	.word	0xffff80ff
 800402c:	ffffc7ff 	.word	0xffffc7ff
 8004030:	00f42400 	.word	0x00f42400
 8004034:	20000068 	.word	0x20000068
 8004038:	2000006c 	.word	0x2000006c
 800403c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004040:	4bb5      	ldr	r3, [pc, #724]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	055b      	lsls	r3, r3, #21
 8004048:	4013      	ands	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_RCC_OscConfig+0x364>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x366>
 8004050:	2300      	movs	r3, #0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d011      	beq.n	800407a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	4bb0      	ldr	r3, [pc, #704]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800405a:	4baf      	ldr	r3, [pc, #700]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	0549      	lsls	r1, r1, #21
 8004060:	430a      	orrs	r2, r1
 8004062:	63da      	str	r2, [r3, #60]	; 0x3c
 8004064:	4bac      	ldr	r3, [pc, #688]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	055b      	lsls	r3, r3, #21
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004072:	231f      	movs	r3, #31
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800407a:	4ba8      	ldr	r3, [pc, #672]	; (800431c <HAL_RCC_OscConfig+0x630>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4013      	ands	r3, r2
 8004084:	d11a      	bne.n	80040bc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004086:	4ba5      	ldr	r3, [pc, #660]	; (800431c <HAL_RCC_OscConfig+0x630>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4ba4      	ldr	r3, [pc, #656]	; (800431c <HAL_RCC_OscConfig+0x630>)
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	0049      	lsls	r1, r1, #1
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004094:	f7fd fc04 	bl	80018a0 <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fd fbff 	bl	80018a0 <HAL_GetTick>
 80040a2:	0002      	movs	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e177      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b0:	4b9a      	ldr	r3, [pc, #616]	; (800431c <HAL_RCC_OscConfig+0x630>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4013      	ands	r3, r2
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3e6>
 80040c4:	4b94      	ldr	r3, [pc, #592]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80040c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040c8:	4b93      	ldr	r3, [pc, #588]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80040ca:	2101      	movs	r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80040d0:	e01c      	b.n	800410c <HAL_RCC_OscConfig+0x420>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x408>
 80040da:	4b8f      	ldr	r3, [pc, #572]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80040dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040de:	4b8e      	ldr	r3, [pc, #568]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80040e0:	2104      	movs	r1, #4
 80040e2:	430a      	orrs	r2, r1
 80040e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80040e6:	4b8c      	ldr	r3, [pc, #560]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80040e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040ea:	4b8b      	ldr	r3, [pc, #556]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80040ec:	2101      	movs	r1, #1
 80040ee:	430a      	orrs	r2, r1
 80040f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0x420>
 80040f4:	4b88      	ldr	r3, [pc, #544]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80040f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040f8:	4b87      	ldr	r3, [pc, #540]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80040fa:	2101      	movs	r1, #1
 80040fc:	438a      	bics	r2, r1
 80040fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004100:	4b85      	ldr	r3, [pc, #532]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004102:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004104:	4b84      	ldr	r3, [pc, #528]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004106:	2104      	movs	r1, #4
 8004108:	438a      	bics	r2, r1
 800410a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d014      	beq.n	800413e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fd fbc4 	bl	80018a0 <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411c:	e009      	b.n	8004132 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fd fbbf 	bl	80018a0 <HAL_GetTick>
 8004122:	0002      	movs	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	4a7d      	ldr	r2, [pc, #500]	; (8004320 <HAL_RCC_OscConfig+0x634>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e136      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	4b79      	ldr	r3, [pc, #484]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004136:	2202      	movs	r2, #2
 8004138:	4013      	ands	r3, r2
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x432>
 800413c:	e013      	b.n	8004166 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fd fbaf 	bl	80018a0 <HAL_GetTick>
 8004142:	0003      	movs	r3, r0
 8004144:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004146:	e009      	b.n	800415c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fd fbaa 	bl	80018a0 <HAL_GetTick>
 800414c:	0002      	movs	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	4a73      	ldr	r2, [pc, #460]	; (8004320 <HAL_RCC_OscConfig+0x634>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e121      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800415c:	4b6e      	ldr	r3, [pc, #440]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	2202      	movs	r2, #2
 8004162:	4013      	ands	r3, r2
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004166:	231f      	movs	r3, #31
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d105      	bne.n	800417c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004170:	4b69      	ldr	r3, [pc, #420]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004174:	4b68      	ldr	r3, [pc, #416]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004176:	496b      	ldr	r1, [pc, #428]	; (8004324 <HAL_RCC_OscConfig+0x638>)
 8004178:	400a      	ands	r2, r1
 800417a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2220      	movs	r2, #32
 8004182:	4013      	ands	r3, r2
 8004184:	d039      	beq.n	80041fa <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01b      	beq.n	80041c6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800418e:	4b62      	ldr	r3, [pc, #392]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b61      	ldr	r3, [pc, #388]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	03c9      	lsls	r1, r1, #15
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fd fb80 	bl	80018a0 <HAL_GetTick>
 80041a0:	0003      	movs	r3, r0
 80041a2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041a6:	f7fd fb7b 	bl	80018a0 <HAL_GetTick>
 80041aa:	0002      	movs	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0f3      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041b8:	4b57      	ldr	r3, [pc, #348]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	4013      	ands	r3, r2
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x4ba>
 80041c4:	e019      	b.n	80041fa <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041c6:	4b54      	ldr	r3, [pc, #336]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4b53      	ldr	r3, [pc, #332]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80041cc:	4956      	ldr	r1, [pc, #344]	; (8004328 <HAL_RCC_OscConfig+0x63c>)
 80041ce:	400a      	ands	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d2:	f7fd fb65 	bl	80018a0 <HAL_GetTick>
 80041d6:	0003      	movs	r3, r0
 80041d8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041dc:	f7fd fb60 	bl	80018a0 <HAL_GetTick>
 80041e0:	0002      	movs	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0d8      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041ee:	4b4a      	ldr	r3, [pc, #296]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	2380      	movs	r3, #128	; 0x80
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	4013      	ands	r3, r2
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d100      	bne.n	8004204 <HAL_RCC_OscConfig+0x518>
 8004202:	e0cc      	b.n	800439e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004204:	4b44      	ldr	r3, [pc, #272]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2238      	movs	r2, #56	; 0x38
 800420a:	4013      	ands	r3, r2
 800420c:	2b10      	cmp	r3, #16
 800420e:	d100      	bne.n	8004212 <HAL_RCC_OscConfig+0x526>
 8004210:	e07b      	b.n	800430a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d156      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421a:	4b3f      	ldr	r3, [pc, #252]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b3e      	ldr	r3, [pc, #248]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004220:	4942      	ldr	r1, [pc, #264]	; (800432c <HAL_RCC_OscConfig+0x640>)
 8004222:	400a      	ands	r2, r1
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fd fb3b 	bl	80018a0 <HAL_GetTick>
 800422a:	0003      	movs	r3, r0
 800422c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd fb36 	bl	80018a0 <HAL_GetTick>
 8004234:	0002      	movs	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e0ae      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004242:	4b35      	ldr	r3, [pc, #212]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	049b      	lsls	r3, r3, #18
 800424a:	4013      	ands	r3, r2
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800424e:	4b32      	ldr	r3, [pc, #200]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a37      	ldr	r2, [pc, #220]	; (8004330 <HAL_RCC_OscConfig+0x644>)
 8004254:	4013      	ands	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427a:	431a      	orrs	r2, r3
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 800427e:	430a      	orrs	r2, r1
 8004280:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004288:	2180      	movs	r1, #128	; 0x80
 800428a:	0449      	lsls	r1, r1, #17
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004290:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	4b20      	ldr	r3, [pc, #128]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	0549      	lsls	r1, r1, #21
 800429a:	430a      	orrs	r2, r1
 800429c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd faff 	bl	80018a0 <HAL_GetTick>
 80042a2:	0003      	movs	r3, r0
 80042a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd fafa 	bl	80018a0 <HAL_GetTick>
 80042ac:	0002      	movs	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e072      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	049b      	lsls	r3, r3, #18
 80042c2:	4013      	ands	r3, r2
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x5bc>
 80042c6:	e06a      	b.n	800439e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c8:	4b13      	ldr	r3, [pc, #76]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80042ce:	4917      	ldr	r1, [pc, #92]	; (800432c <HAL_RCC_OscConfig+0x640>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fae4 	bl	80018a0 <HAL_GetTick>
 80042d8:	0003      	movs	r3, r0
 80042da:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042de:	f7fd fadf 	bl	80018a0 <HAL_GetTick>
 80042e2:	0002      	movs	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e057      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f0:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	049b      	lsls	r3, r3, #18
 80042f8:	4013      	ands	r3, r2
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCC_OscConfig+0x62c>)
 8004302:	490c      	ldr	r1, [pc, #48]	; (8004334 <HAL_RCC_OscConfig+0x648>)
 8004304:	400a      	ands	r2, r1
 8004306:	60da      	str	r2, [r3, #12]
 8004308:	e049      	b.n	800439e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d112      	bne.n	8004338 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e044      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	40021000 	.word	0x40021000
 800431c:	40007000 	.word	0x40007000
 8004320:	00001388 	.word	0x00001388
 8004324:	efffffff 	.word	0xefffffff
 8004328:	ffbfffff 	.word	0xffbfffff
 800432c:	feffffff 	.word	0xfeffffff
 8004330:	11c1808c 	.word	0x11c1808c
 8004334:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x6bc>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2203      	movs	r2, #3
 8004342:	401a      	ands	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	429a      	cmp	r2, r3
 800434a:	d126      	bne.n	800439a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2270      	movs	r2, #112	; 0x70
 8004350:	401a      	ands	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004356:	429a      	cmp	r2, r3
 8004358:	d11f      	bne.n	800439a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	23fe      	movs	r3, #254	; 0xfe
 800435e:	01db      	lsls	r3, r3, #7
 8004360:	401a      	ands	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d116      	bne.n	800439a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	23f8      	movs	r3, #248	; 0xf8
 8004370:	039b      	lsls	r3, r3, #14
 8004372:	401a      	ands	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d10e      	bne.n	800439a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	23e0      	movs	r3, #224	; 0xe0
 8004380:	051b      	lsls	r3, r3, #20
 8004382:	401a      	ands	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d106      	bne.n	800439a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	0f5b      	lsrs	r3, r3, #29
 8004390:	075a      	lsls	r2, r3, #29
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	0018      	movs	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b008      	add	sp, #32
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000

080043ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0e9      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043c0:	4b76      	ldr	r3, [pc, #472]	; (800459c <HAL_RCC_ClockConfig+0x1f0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2207      	movs	r2, #7
 80043c6:	4013      	ands	r3, r2
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d91e      	bls.n	800440c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b73      	ldr	r3, [pc, #460]	; (800459c <HAL_RCC_ClockConfig+0x1f0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2207      	movs	r2, #7
 80043d4:	4393      	bics	r3, r2
 80043d6:	0019      	movs	r1, r3
 80043d8:	4b70      	ldr	r3, [pc, #448]	; (800459c <HAL_RCC_ClockConfig+0x1f0>)
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043e0:	f7fd fa5e 	bl	80018a0 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043e8:	e009      	b.n	80043fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ea:	f7fd fa59 	bl	80018a0 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	4a6a      	ldr	r2, [pc, #424]	; (80045a0 <HAL_RCC_ClockConfig+0x1f4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e0ca      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043fe:	4b67      	ldr	r3, [pc, #412]	; (800459c <HAL_RCC_ClockConfig+0x1f0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2207      	movs	r2, #7
 8004404:	4013      	ands	r3, r2
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d1ee      	bne.n	80043ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2202      	movs	r2, #2
 8004412:	4013      	ands	r3, r2
 8004414:	d015      	beq.n	8004442 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2204      	movs	r2, #4
 800441c:	4013      	ands	r3, r2
 800441e:	d006      	beq.n	800442e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004420:	4b60      	ldr	r3, [pc, #384]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	4b5f      	ldr	r3, [pc, #380]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004426:	21e0      	movs	r1, #224	; 0xe0
 8004428:	01c9      	lsls	r1, r1, #7
 800442a:	430a      	orrs	r2, r1
 800442c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442e:	4b5d      	ldr	r3, [pc, #372]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4a5d      	ldr	r2, [pc, #372]	; (80045a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004434:	4013      	ands	r3, r2
 8004436:	0019      	movs	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	4b59      	ldr	r3, [pc, #356]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 800443e:	430a      	orrs	r2, r1
 8004440:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2201      	movs	r2, #1
 8004448:	4013      	ands	r3, r2
 800444a:	d057      	beq.n	80044fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d107      	bne.n	8004464 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004454:	4b53      	ldr	r3, [pc, #332]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	029b      	lsls	r3, r3, #10
 800445c:	4013      	ands	r3, r2
 800445e:	d12b      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e097      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d107      	bne.n	800447c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446c:	4b4d      	ldr	r3, [pc, #308]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	049b      	lsls	r3, r3, #18
 8004474:	4013      	ands	r3, r2
 8004476:	d11f      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e08b      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004484:	4b47      	ldr	r3, [pc, #284]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4013      	ands	r3, r2
 800448e:	d113      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e07f      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b03      	cmp	r3, #3
 800449a:	d106      	bne.n	80044aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800449c:	4b41      	ldr	r3, [pc, #260]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 800449e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a0:	2202      	movs	r2, #2
 80044a2:	4013      	ands	r3, r2
 80044a4:	d108      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e074      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044aa:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ae:	2202      	movs	r2, #2
 80044b0:	4013      	ands	r3, r2
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e06d      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044b8:	4b3a      	ldr	r3, [pc, #232]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2207      	movs	r2, #7
 80044be:	4393      	bics	r3, r2
 80044c0:	0019      	movs	r1, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fd f9e8 	bl	80018a0 <HAL_GetTick>
 80044d0:	0003      	movs	r3, r0
 80044d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d4:	e009      	b.n	80044ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d6:	f7fd f9e3 	bl	80018a0 <HAL_GetTick>
 80044da:	0002      	movs	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	4a2f      	ldr	r2, [pc, #188]	; (80045a0 <HAL_RCC_ClockConfig+0x1f4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e054      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	4b2e      	ldr	r3, [pc, #184]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2238      	movs	r2, #56	; 0x38
 80044f0:	401a      	ands	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1ec      	bne.n	80044d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <HAL_RCC_ClockConfig+0x1f0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2207      	movs	r2, #7
 8004502:	4013      	ands	r3, r2
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d21e      	bcs.n	8004548 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCC_ClockConfig+0x1f0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2207      	movs	r2, #7
 8004510:	4393      	bics	r3, r2
 8004512:	0019      	movs	r1, r3
 8004514:	4b21      	ldr	r3, [pc, #132]	; (800459c <HAL_RCC_ClockConfig+0x1f0>)
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800451c:	f7fd f9c0 	bl	80018a0 <HAL_GetTick>
 8004520:	0003      	movs	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004524:	e009      	b.n	800453a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004526:	f7fd f9bb 	bl	80018a0 <HAL_GetTick>
 800452a:	0002      	movs	r2, r0
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	4a1b      	ldr	r2, [pc, #108]	; (80045a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e02c      	b.n	8004594 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800453a:	4b18      	ldr	r3, [pc, #96]	; (800459c <HAL_RCC_ClockConfig+0x1f0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2207      	movs	r2, #7
 8004540:	4013      	ands	r3, r2
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d1ee      	bne.n	8004526 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2204      	movs	r2, #4
 800454e:	4013      	ands	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4a15      	ldr	r2, [pc, #84]	; (80045ac <HAL_RCC_ClockConfig+0x200>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004566:	f000 f829 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800456a:	0001      	movs	r1, r0
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <HAL_RCC_ClockConfig+0x1f8>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	220f      	movs	r2, #15
 8004574:	401a      	ands	r2, r3
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <HAL_RCC_ClockConfig+0x204>)
 8004578:	0092      	lsls	r2, r2, #2
 800457a:	58d3      	ldr	r3, [r2, r3]
 800457c:	221f      	movs	r2, #31
 800457e:	4013      	ands	r3, r2
 8004580:	000a      	movs	r2, r1
 8004582:	40da      	lsrs	r2, r3
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x208>)
 8004586:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_ClockConfig+0x20c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	0018      	movs	r0, r3
 800458e:	f7fd f92b 	bl	80017e8 <HAL_InitTick>
 8004592:	0003      	movs	r3, r0
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b004      	add	sp, #16
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40022000 	.word	0x40022000
 80045a0:	00001388 	.word	0x00001388
 80045a4:	40021000 	.word	0x40021000
 80045a8:	fffff0ff 	.word	0xfffff0ff
 80045ac:	ffff8fff 	.word	0xffff8fff
 80045b0:	0800a190 	.word	0x0800a190
 80045b4:	20000068 	.word	0x20000068
 80045b8:	2000006c 	.word	0x2000006c

080045bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c2:	4b3c      	ldr	r3, [pc, #240]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2238      	movs	r2, #56	; 0x38
 80045c8:	4013      	ands	r3, r2
 80045ca:	d10f      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80045cc:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	0adb      	lsrs	r3, r3, #11
 80045d2:	2207      	movs	r2, #7
 80045d4:	4013      	ands	r3, r2
 80045d6:	2201      	movs	r2, #1
 80045d8:	409a      	lsls	r2, r3
 80045da:	0013      	movs	r3, r2
 80045dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80045de:	6839      	ldr	r1, [r7, #0]
 80045e0:	4835      	ldr	r0, [pc, #212]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045e2:	f7fb fd8f 	bl	8000104 <__udivsi3>
 80045e6:	0003      	movs	r3, r0
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	e05d      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ec:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	2238      	movs	r2, #56	; 0x38
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d102      	bne.n	80045fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045f8:	4b30      	ldr	r3, [pc, #192]	; (80046bc <HAL_RCC_GetSysClockFreq+0x100>)
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	e054      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fe:	4b2d      	ldr	r3, [pc, #180]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2238      	movs	r2, #56	; 0x38
 8004604:	4013      	ands	r3, r2
 8004606:	2b10      	cmp	r3, #16
 8004608:	d138      	bne.n	800467c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800460a:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2203      	movs	r2, #3
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004614:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	2207      	movs	r2, #7
 800461c:	4013      	ands	r3, r2
 800461e:	3301      	adds	r3, #1
 8004620:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d10d      	bne.n	8004644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4824      	ldr	r0, [pc, #144]	; (80046bc <HAL_RCC_GetSysClockFreq+0x100>)
 800462c:	f7fb fd6a 	bl	8000104 <__udivsi3>
 8004630:	0003      	movs	r3, r0
 8004632:	0019      	movs	r1, r3
 8004634:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	0a1b      	lsrs	r3, r3, #8
 800463a:	227f      	movs	r2, #127	; 0x7f
 800463c:	4013      	ands	r3, r2
 800463e:	434b      	muls	r3, r1
 8004640:	617b      	str	r3, [r7, #20]
        break;
 8004642:	e00d      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	481c      	ldr	r0, [pc, #112]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004648:	f7fb fd5c 	bl	8000104 <__udivsi3>
 800464c:	0003      	movs	r3, r0
 800464e:	0019      	movs	r1, r3
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	0a1b      	lsrs	r3, r3, #8
 8004656:	227f      	movs	r2, #127	; 0x7f
 8004658:	4013      	ands	r3, r2
 800465a:	434b      	muls	r3, r1
 800465c:	617b      	str	r3, [r7, #20]
        break;
 800465e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0f5b      	lsrs	r3, r3, #29
 8004666:	2207      	movs	r2, #7
 8004668:	4013      	ands	r3, r2
 800466a:	3301      	adds	r3, #1
 800466c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	6978      	ldr	r0, [r7, #20]
 8004672:	f7fb fd47 	bl	8000104 <__udivsi3>
 8004676:	0003      	movs	r3, r0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	e015      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2238      	movs	r2, #56	; 0x38
 8004682:	4013      	ands	r3, r2
 8004684:	2b20      	cmp	r3, #32
 8004686:	d103      	bne.n	8004690 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2238      	movs	r2, #56	; 0x38
 8004696:	4013      	ands	r3, r2
 8004698:	2b18      	cmp	r3, #24
 800469a:	d103      	bne.n	80046a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800469c:	23fa      	movs	r3, #250	; 0xfa
 800469e:	01db      	lsls	r3, r3, #7
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	e001      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046a8:	693b      	ldr	r3, [r7, #16]
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b006      	add	sp, #24
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	40021000 	.word	0x40021000
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	007a1200 	.word	0x007a1200

080046c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c4:	4b02      	ldr	r3, [pc, #8]	; (80046d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80046c6:	681b      	ldr	r3, [r3, #0]
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	20000068 	.word	0x20000068

080046d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d4:	b5b0      	push	{r4, r5, r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80046d8:	f7ff fff2 	bl	80046c0 <HAL_RCC_GetHCLKFreq>
 80046dc:	0004      	movs	r4, r0
 80046de:	f7ff faf9 	bl	8003cd4 <LL_RCC_GetAPB1Prescaler>
 80046e2:	0003      	movs	r3, r0
 80046e4:	0b1a      	lsrs	r2, r3, #12
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	58d3      	ldr	r3, [r2, r3]
 80046ec:	221f      	movs	r2, #31
 80046ee:	4013      	ands	r3, r2
 80046f0:	40dc      	lsrs	r4, r3
 80046f2:	0023      	movs	r3, r4
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bdb0      	pop	{r4, r5, r7, pc}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	0800a1d0 	.word	0x0800a1d0

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004708:	2313      	movs	r3, #19
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004710:	2312      	movs	r3, #18
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	029b      	lsls	r3, r3, #10
 8004720:	4013      	ands	r3, r2
 8004722:	d100      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004724:	e0ad      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2011      	movs	r0, #17
 8004728:	183b      	adds	r3, r7, r0
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	055b      	lsls	r3, r3, #21
 8004736:	4013      	ands	r3, r2
 8004738:	d110      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	4b44      	ldr	r3, [pc, #272]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800473c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473e:	4b43      	ldr	r3, [pc, #268]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004740:	2180      	movs	r1, #128	; 0x80
 8004742:	0549      	lsls	r1, r1, #21
 8004744:	430a      	orrs	r2, r1
 8004746:	63da      	str	r2, [r3, #60]	; 0x3c
 8004748:	4b40      	ldr	r3, [pc, #256]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800474a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	055b      	lsls	r3, r3, #21
 8004750:	4013      	ands	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004756:	183b      	adds	r3, r7, r0
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800475c:	4b3c      	ldr	r3, [pc, #240]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b3b      	ldr	r3, [pc, #236]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	0049      	lsls	r1, r1, #1
 8004766:	430a      	orrs	r2, r1
 8004768:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800476a:	f7fd f899 	bl	80018a0 <HAL_GetTick>
 800476e:	0003      	movs	r3, r0
 8004770:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004772:	e00b      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004774:	f7fd f894 	bl	80018a0 <HAL_GetTick>
 8004778:	0002      	movs	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d904      	bls.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004782:	2313      	movs	r3, #19
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	2203      	movs	r2, #3
 8004788:	701a      	strb	r2, [r3, #0]
        break;
 800478a:	e005      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800478c:	4b30      	ldr	r3, [pc, #192]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4013      	ands	r3, r2
 8004796:	d0ed      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004798:	2313      	movs	r3, #19
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d15e      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047a6:	23c0      	movs	r3, #192	; 0xc0
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4013      	ands	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d019      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d014      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	4a24      	ldr	r2, [pc, #144]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047cc:	4b1f      	ldr	r3, [pc, #124]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047ce:	2180      	movs	r1, #128	; 0x80
 80047d0:	0249      	lsls	r1, r1, #9
 80047d2:	430a      	orrs	r2, r1
 80047d4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047d6:	4b1d      	ldr	r3, [pc, #116]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047da:	4b1c      	ldr	r3, [pc, #112]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047dc:	491e      	ldr	r1, [pc, #120]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80047de:	400a      	ands	r2, r1
 80047e0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047e2:	4b1a      	ldr	r3, [pc, #104]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2201      	movs	r2, #1
 80047ec:	4013      	ands	r3, r2
 80047ee:	d016      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fd f856 	bl	80018a0 <HAL_GetTick>
 80047f4:	0003      	movs	r3, r0
 80047f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f8:	e00c      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7fd f851 	bl	80018a0 <HAL_GetTick>
 80047fe:	0002      	movs	r2, r0
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	4a15      	ldr	r2, [pc, #84]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d904      	bls.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800480a:	2313      	movs	r3, #19
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	2203      	movs	r2, #3
 8004810:	701a      	strb	r2, [r3, #0]
            break;
 8004812:	e004      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004814:	4b0d      	ldr	r3, [pc, #52]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004818:	2202      	movs	r2, #2
 800481a:	4013      	ands	r3, r2
 800481c:	d0ed      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800481e:	2313      	movs	r3, #19
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004828:	4b08      	ldr	r3, [pc, #32]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800482a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004838:	430a      	orrs	r2, r1
 800483a:	65da      	str	r2, [r3, #92]	; 0x5c
 800483c:	e016      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800483e:	2312      	movs	r3, #18
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	2213      	movs	r2, #19
 8004844:	18ba      	adds	r2, r7, r2
 8004846:	7812      	ldrb	r2, [r2, #0]
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	e00f      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800484c:	40021000 	.word	0x40021000
 8004850:	40007000 	.word	0x40007000
 8004854:	fffffcff 	.word	0xfffffcff
 8004858:	fffeffff 	.word	0xfffeffff
 800485c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004860:	2312      	movs	r3, #18
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	2213      	movs	r2, #19
 8004866:	18ba      	adds	r2, r7, r2
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800486c:	2311      	movs	r3, #17
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d105      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4bb6      	ldr	r3, [pc, #728]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800487a:	4bb5      	ldr	r3, [pc, #724]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800487c:	49b5      	ldr	r1, [pc, #724]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800487e:	400a      	ands	r2, r1
 8004880:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2201      	movs	r2, #1
 8004888:	4013      	ands	r3, r2
 800488a:	d009      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800488c:	4bb0      	ldr	r3, [pc, #704]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	2203      	movs	r2, #3
 8004892:	4393      	bics	r3, r2
 8004894:	0019      	movs	r1, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	4bad      	ldr	r3, [pc, #692]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800489c:	430a      	orrs	r2, r1
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048aa:	4ba9      	ldr	r3, [pc, #676]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ae:	220c      	movs	r2, #12
 80048b0:	4393      	bics	r3, r2
 80048b2:	0019      	movs	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	4ba5      	ldr	r3, [pc, #660]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048ba:	430a      	orrs	r2, r1
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2204      	movs	r2, #4
 80048c4:	4013      	ands	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048c8:	4ba1      	ldr	r3, [pc, #644]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	2230      	movs	r2, #48	; 0x30
 80048ce:	4393      	bics	r3, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	4b9e      	ldr	r3, [pc, #632]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048d8:	430a      	orrs	r2, r1
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2210      	movs	r2, #16
 80048e2:	4013      	ands	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e6:	4b9a      	ldr	r3, [pc, #616]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	4a9b      	ldr	r2, [pc, #620]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	4b96      	ldr	r3, [pc, #600]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048f6:	430a      	orrs	r2, r1
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	015b      	lsls	r3, r3, #5
 8004902:	4013      	ands	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004906:	4b92      	ldr	r3, [pc, #584]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490a:	4a94      	ldr	r2, [pc, #592]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800490c:	4013      	ands	r3, r2
 800490e:	0019      	movs	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	4b8e      	ldr	r3, [pc, #568]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004916:	430a      	orrs	r2, r1
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4013      	ands	r3, r2
 8004924:	d009      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004926:	4b8a      	ldr	r3, [pc, #552]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	4a8d      	ldr	r2, [pc, #564]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800492c:	4013      	ands	r3, r2
 800492e:	0019      	movs	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004934:	4b86      	ldr	r3, [pc, #536]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004936:	430a      	orrs	r2, r1
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4013      	ands	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004946:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	4a86      	ldr	r2, [pc, #536]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800494c:	4013      	ands	r3, r2
 800494e:	0019      	movs	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	4b7e      	ldr	r3, [pc, #504]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004956:	430a      	orrs	r2, r1
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2220      	movs	r2, #32
 8004960:	4013      	ands	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004964:	4b7a      	ldr	r3, [pc, #488]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	4a7f      	ldr	r2, [pc, #508]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800496a:	4013      	ands	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	4b77      	ldr	r3, [pc, #476]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004974:	430a      	orrs	r2, r1
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2240      	movs	r2, #64	; 0x40
 800497e:	4013      	ands	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004982:	4b73      	ldr	r3, [pc, #460]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	4a79      	ldr	r2, [pc, #484]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004988:	4013      	ands	r3, r2
 800498a:	0019      	movs	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	4b6f      	ldr	r3, [pc, #444]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004992:	430a      	orrs	r2, r1
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	01db      	lsls	r3, r3, #7
 800499e:	4013      	ands	r3, r2
 80049a0:	d015      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a2:	4b6b      	ldr	r3, [pc, #428]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	0899      	lsrs	r1, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ae:	4b68      	ldr	r3, [pc, #416]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049b0:	430a      	orrs	r2, r1
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	05db      	lsls	r3, r3, #23
 80049bc:	429a      	cmp	r2, r3
 80049be:	d106      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049c0:	4b63      	ldr	r3, [pc, #396]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	4b62      	ldr	r3, [pc, #392]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049c6:	2180      	movs	r1, #128	; 0x80
 80049c8:	0249      	lsls	r1, r1, #9
 80049ca:	430a      	orrs	r2, r1
 80049cc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	2380      	movs	r3, #128	; 0x80
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	4013      	ands	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049da:	4b5d      	ldr	r3, [pc, #372]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	4393      	bics	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e8:	4b59      	ldr	r3, [pc, #356]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ea:	430a      	orrs	r2, r1
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	039b      	lsls	r3, r3, #14
 80049f6:	4013      	ands	r3, r2
 80049f8:	d016      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049fa:	4b55      	ldr	r3, [pc, #340]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	4a5c      	ldr	r2, [pc, #368]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	0019      	movs	r1, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a08:	4b51      	ldr	r3, [pc, #324]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	03db      	lsls	r3, r3, #15
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d106      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a1a:	4b4d      	ldr	r3, [pc, #308]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	4b4c      	ldr	r3, [pc, #304]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a20:	2180      	movs	r1, #128	; 0x80
 8004a22:	0449      	lsls	r1, r1, #17
 8004a24:	430a      	orrs	r2, r1
 8004a26:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	03db      	lsls	r3, r3, #15
 8004a30:	4013      	ands	r3, r2
 8004a32:	d016      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a34:	4b46      	ldr	r3, [pc, #280]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	4a4e      	ldr	r2, [pc, #312]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a42:	4b43      	ldr	r3, [pc, #268]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a44:	430a      	orrs	r2, r1
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	045b      	lsls	r3, r3, #17
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d106      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a54:	4b3e      	ldr	r3, [pc, #248]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a5a:	2180      	movs	r1, #128	; 0x80
 8004a5c:	0449      	lsls	r1, r1, #17
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d014      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a6e:	4b38      	ldr	r3, [pc, #224]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	2203      	movs	r2, #3
 8004a74:	4393      	bics	r3, r2
 8004a76:	0019      	movs	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d106      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	0249      	lsls	r1, r1, #9
 8004a94:	430a      	orrs	r2, r1
 8004a96:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	2380      	movs	r3, #128	; 0x80
 8004a9e:	019b      	lsls	r3, r3, #6
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d014      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004aa4:	4b2a      	ldr	r3, [pc, #168]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	220c      	movs	r2, #12
 8004aaa:	4393      	bics	r3, r2
 8004aac:	0019      	movs	r1, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab2:	4b27      	ldr	r3, [pc, #156]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d106      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ac0:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ac6:	2180      	movs	r1, #128	; 0x80
 8004ac8:	0249      	lsls	r1, r1, #9
 8004aca:	430a      	orrs	r2, r1
 8004acc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	045b      	lsls	r3, r3, #17
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d016      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ada:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	0019      	movs	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae8:	4b19      	ldr	r3, [pc, #100]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aea:	430a      	orrs	r2, r1
 8004aec:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	019b      	lsls	r3, r3, #6
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d106      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004afa:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b00:	2180      	movs	r1, #128	; 0x80
 8004b02:	0449      	lsls	r1, r1, #17
 8004b04:	430a      	orrs	r2, r1
 8004b06:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	049b      	lsls	r3, r3, #18
 8004b10:	4013      	ands	r3, r2
 8004b12:	d016      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b18:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	0019      	movs	r1, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b24:	430a      	orrs	r2, r1
 8004b26:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d106      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	0449      	lsls	r1, r1, #17
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b42:	2312      	movs	r3, #18
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	781b      	ldrb	r3, [r3, #0]
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b006      	add	sp, #24
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40021000 	.word	0x40021000
 8004b54:	efffffff 	.word	0xefffffff
 8004b58:	fffff3ff 	.word	0xfffff3ff
 8004b5c:	fffffcff 	.word	0xfffffcff
 8004b60:	fff3ffff 	.word	0xfff3ffff
 8004b64:	ffcfffff 	.word	0xffcfffff
 8004b68:	ffffcfff 	.word	0xffffcfff
 8004b6c:	ffff3fff 	.word	0xffff3fff
 8004b70:	ffbfffff 	.word	0xffbfffff
 8004b74:	feffffff 	.word	0xfeffffff

08004b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e046      	b.n	8004c18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2284      	movs	r2, #132	; 0x84
 8004b8e:	589b      	ldr	r3, [r3, r2]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d107      	bne.n	8004ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2280      	movs	r2, #128	; 0x80
 8004b98:	2100      	movs	r1, #0
 8004b9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fb ff0a 	bl	80009b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2284      	movs	r2, #132	; 0x84
 8004ba8:	2124      	movs	r1, #36	; 0x24
 8004baa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	438a      	bics	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f000 f8dc 	bl	8004d7c <UART_SetConfig>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e024      	b.n	8004c18 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f000 fc25 	bl	8005428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	490d      	ldr	r1, [pc, #52]	; (8004c20 <HAL_UART_Init+0xa8>)
 8004bea:	400a      	ands	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	212a      	movs	r1, #42	; 0x2a
 8004bfa:	438a      	bics	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2101      	movs	r1, #1
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 fcbd 	bl	8005590 <UART_CheckIdleState>
 8004c16:	0003      	movs	r3, r0
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	ffffb7ff 	.word	0xffffb7ff

08004c24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	; 0x28
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	1dbb      	adds	r3, r7, #6
 8004c32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2284      	movs	r2, #132	; 0x84
 8004c38:	589b      	ldr	r3, [r3, r2]
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d000      	beq.n	8004c40 <HAL_UART_Transmit+0x1c>
 8004c3e:	e097      	b.n	8004d70 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_UART_Transmit+0x2a>
 8004c46:	1dbb      	adds	r3, r7, #6
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e08f      	b.n	8004d72 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	015b      	lsls	r3, r3, #5
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d109      	bne.n	8004c72 <HAL_UART_Transmit+0x4e>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d105      	bne.n	8004c72 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d001      	beq.n	8004c72 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e07f      	b.n	8004d72 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2280      	movs	r2, #128	; 0x80
 8004c76:	5c9b      	ldrb	r3, [r3, r2]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_UART_Transmit+0x5c>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e078      	b.n	8004d72 <HAL_UART_Transmit+0x14e>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2280      	movs	r2, #128	; 0x80
 8004c84:	2101      	movs	r1, #1
 8004c86:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	228c      	movs	r2, #140	; 0x8c
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2284      	movs	r2, #132	; 0x84
 8004c94:	2121      	movs	r1, #33	; 0x21
 8004c96:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c98:	f7fc fe02 	bl	80018a0 <HAL_GetTick>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1dba      	adds	r2, r7, #6
 8004ca4:	2154      	movs	r1, #84	; 0x54
 8004ca6:	8812      	ldrh	r2, [r2, #0]
 8004ca8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	1dba      	adds	r2, r7, #6
 8004cae:	2156      	movs	r1, #86	; 0x56
 8004cb0:	8812      	ldrh	r2, [r2, #0]
 8004cb2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	2380      	movs	r3, #128	; 0x80
 8004cba:	015b      	lsls	r3, r3, #5
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d108      	bne.n	8004cd2 <HAL_UART_Transmit+0xae>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e003      	b.n	8004cda <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	2100      	movs	r1, #0
 8004ce0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004ce2:	e02c      	b.n	8004d3e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	0013      	movs	r3, r2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	f000 fc97 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 8004cf6:	1e03      	subs	r3, r0, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e039      	b.n	8004d72 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	001a      	movs	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	05d2      	lsls	r2, r2, #23
 8004d10:	0dd2      	lsrs	r2, r2, #23
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	3302      	adds	r3, #2
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e007      	b.n	8004d2c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2256      	movs	r2, #86	; 0x56
 8004d30:	5a9b      	ldrh	r3, [r3, r2]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b299      	uxth	r1, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2256      	movs	r2, #86	; 0x56
 8004d3c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2256      	movs	r2, #86	; 0x56
 8004d42:	5a9b      	ldrh	r3, [r3, r2]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1cc      	bne.n	8004ce4 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	0013      	movs	r3, r2
 8004d54:	2200      	movs	r2, #0
 8004d56:	2140      	movs	r1, #64	; 0x40
 8004d58:	f000 fc64 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 8004d5c:	1e03      	subs	r3, r0, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e006      	b.n	8004d72 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2284      	movs	r2, #132	; 0x84
 8004d68:	2120      	movs	r1, #32
 8004d6a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
  }
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b008      	add	sp, #32
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b5b0      	push	{r4, r5, r7, lr}
 8004d7e:	b090      	sub	sp, #64	; 0x40
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d84:	231a      	movs	r3, #26
 8004d86:	2220      	movs	r2, #32
 8004d88:	189b      	adds	r3, r3, r2
 8004d8a:	19db      	adds	r3, r3, r7
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4ac1      	ldr	r2, [pc, #772]	; (80050b4 <UART_SetConfig+0x338>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	0019      	movs	r1, r3
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4abc      	ldr	r2, [pc, #752]	; (80050b8 <UART_SetConfig+0x33c>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	0018      	movs	r0, r3
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	68d9      	ldr	r1, [r3, #12]
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4ab6      	ldr	r2, [pc, #728]	; (80050bc <UART_SetConfig+0x340>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d009      	beq.n	8004dfc <UART_SetConfig+0x80>
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4ab4      	ldr	r2, [pc, #720]	; (80050c0 <UART_SetConfig+0x344>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	4ab0      	ldr	r2, [pc, #704]	; (80050c4 <UART_SetConfig+0x348>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	220f      	movs	r2, #15
 8004e1a:	4393      	bics	r3, r2
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	0003      	movs	r3, r0
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4aa5      	ldr	r2, [pc, #660]	; (80050c8 <UART_SetConfig+0x34c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d131      	bne.n	8004e9a <UART_SetConfig+0x11e>
 8004e36:	4ba5      	ldr	r3, [pc, #660]	; (80050cc <UART_SetConfig+0x350>)
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d01d      	beq.n	8004e7e <UART_SetConfig+0x102>
 8004e42:	d823      	bhi.n	8004e8c <UART_SetConfig+0x110>
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d00c      	beq.n	8004e62 <UART_SetConfig+0xe6>
 8004e48:	d820      	bhi.n	8004e8c <UART_SetConfig+0x110>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <UART_SetConfig+0xd8>
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d00e      	beq.n	8004e70 <UART_SetConfig+0xf4>
 8004e52:	e01b      	b.n	8004e8c <UART_SetConfig+0x110>
 8004e54:	231b      	movs	r3, #27
 8004e56:	2220      	movs	r2, #32
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	19db      	adds	r3, r3, r7
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	e154      	b.n	800510c <UART_SetConfig+0x390>
 8004e62:	231b      	movs	r3, #27
 8004e64:	2220      	movs	r2, #32
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	19db      	adds	r3, r3, r7
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e14d      	b.n	800510c <UART_SetConfig+0x390>
 8004e70:	231b      	movs	r3, #27
 8004e72:	2220      	movs	r2, #32
 8004e74:	189b      	adds	r3, r3, r2
 8004e76:	19db      	adds	r3, r3, r7
 8004e78:	2204      	movs	r2, #4
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e146      	b.n	800510c <UART_SetConfig+0x390>
 8004e7e:	231b      	movs	r3, #27
 8004e80:	2220      	movs	r2, #32
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	19db      	adds	r3, r3, r7
 8004e86:	2208      	movs	r2, #8
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	e13f      	b.n	800510c <UART_SetConfig+0x390>
 8004e8c:	231b      	movs	r3, #27
 8004e8e:	2220      	movs	r2, #32
 8004e90:	189b      	adds	r3, r3, r2
 8004e92:	19db      	adds	r3, r3, r7
 8004e94:	2210      	movs	r2, #16
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e138      	b.n	800510c <UART_SetConfig+0x390>
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a8c      	ldr	r2, [pc, #560]	; (80050d0 <UART_SetConfig+0x354>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d131      	bne.n	8004f08 <UART_SetConfig+0x18c>
 8004ea4:	4b89      	ldr	r3, [pc, #548]	; (80050cc <UART_SetConfig+0x350>)
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	220c      	movs	r2, #12
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b0c      	cmp	r3, #12
 8004eae:	d01d      	beq.n	8004eec <UART_SetConfig+0x170>
 8004eb0:	d823      	bhi.n	8004efa <UART_SetConfig+0x17e>
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d00c      	beq.n	8004ed0 <UART_SetConfig+0x154>
 8004eb6:	d820      	bhi.n	8004efa <UART_SetConfig+0x17e>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <UART_SetConfig+0x146>
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d00e      	beq.n	8004ede <UART_SetConfig+0x162>
 8004ec0:	e01b      	b.n	8004efa <UART_SetConfig+0x17e>
 8004ec2:	231b      	movs	r3, #27
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	19db      	adds	r3, r3, r7
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e11d      	b.n	800510c <UART_SetConfig+0x390>
 8004ed0:	231b      	movs	r3, #27
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	189b      	adds	r3, r3, r2
 8004ed6:	19db      	adds	r3, r3, r7
 8004ed8:	2202      	movs	r2, #2
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e116      	b.n	800510c <UART_SetConfig+0x390>
 8004ede:	231b      	movs	r3, #27
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	19db      	adds	r3, r3, r7
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e10f      	b.n	800510c <UART_SetConfig+0x390>
 8004eec:	231b      	movs	r3, #27
 8004eee:	2220      	movs	r2, #32
 8004ef0:	189b      	adds	r3, r3, r2
 8004ef2:	19db      	adds	r3, r3, r7
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	e108      	b.n	800510c <UART_SetConfig+0x390>
 8004efa:	231b      	movs	r3, #27
 8004efc:	2220      	movs	r2, #32
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	19db      	adds	r3, r3, r7
 8004f02:	2210      	movs	r2, #16
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e101      	b.n	800510c <UART_SetConfig+0x390>
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a71      	ldr	r2, [pc, #452]	; (80050d4 <UART_SetConfig+0x358>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d131      	bne.n	8004f76 <UART_SetConfig+0x1fa>
 8004f12:	4b6e      	ldr	r3, [pc, #440]	; (80050cc <UART_SetConfig+0x350>)
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	2230      	movs	r2, #48	; 0x30
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b30      	cmp	r3, #48	; 0x30
 8004f1c:	d01d      	beq.n	8004f5a <UART_SetConfig+0x1de>
 8004f1e:	d823      	bhi.n	8004f68 <UART_SetConfig+0x1ec>
 8004f20:	2b20      	cmp	r3, #32
 8004f22:	d00c      	beq.n	8004f3e <UART_SetConfig+0x1c2>
 8004f24:	d820      	bhi.n	8004f68 <UART_SetConfig+0x1ec>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <UART_SetConfig+0x1b4>
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d00e      	beq.n	8004f4c <UART_SetConfig+0x1d0>
 8004f2e:	e01b      	b.n	8004f68 <UART_SetConfig+0x1ec>
 8004f30:	231b      	movs	r3, #27
 8004f32:	2220      	movs	r2, #32
 8004f34:	189b      	adds	r3, r3, r2
 8004f36:	19db      	adds	r3, r3, r7
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
 8004f3c:	e0e6      	b.n	800510c <UART_SetConfig+0x390>
 8004f3e:	231b      	movs	r3, #27
 8004f40:	2220      	movs	r2, #32
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	19db      	adds	r3, r3, r7
 8004f46:	2202      	movs	r2, #2
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e0df      	b.n	800510c <UART_SetConfig+0x390>
 8004f4c:	231b      	movs	r3, #27
 8004f4e:	2220      	movs	r2, #32
 8004f50:	189b      	adds	r3, r3, r2
 8004f52:	19db      	adds	r3, r3, r7
 8004f54:	2204      	movs	r2, #4
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e0d8      	b.n	800510c <UART_SetConfig+0x390>
 8004f5a:	231b      	movs	r3, #27
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	19db      	adds	r3, r3, r7
 8004f62:	2208      	movs	r2, #8
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e0d1      	b.n	800510c <UART_SetConfig+0x390>
 8004f68:	231b      	movs	r3, #27
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	189b      	adds	r3, r3, r2
 8004f6e:	19db      	adds	r3, r3, r7
 8004f70:	2210      	movs	r2, #16
 8004f72:	701a      	strb	r2, [r3, #0]
 8004f74:	e0ca      	b.n	800510c <UART_SetConfig+0x390>
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a57      	ldr	r2, [pc, #348]	; (80050d8 <UART_SetConfig+0x35c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d106      	bne.n	8004f8e <UART_SetConfig+0x212>
 8004f80:	231b      	movs	r3, #27
 8004f82:	2220      	movs	r2, #32
 8004f84:	189b      	adds	r3, r3, r2
 8004f86:	19db      	adds	r3, r3, r7
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	e0be      	b.n	800510c <UART_SetConfig+0x390>
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a52      	ldr	r2, [pc, #328]	; (80050dc <UART_SetConfig+0x360>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d106      	bne.n	8004fa6 <UART_SetConfig+0x22a>
 8004f98:	231b      	movs	r3, #27
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	19db      	adds	r3, r3, r7
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e0b2      	b.n	800510c <UART_SetConfig+0x390>
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a4d      	ldr	r2, [pc, #308]	; (80050e0 <UART_SetConfig+0x364>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d106      	bne.n	8004fbe <UART_SetConfig+0x242>
 8004fb0:	231b      	movs	r3, #27
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	19db      	adds	r3, r3, r7
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e0a6      	b.n	800510c <UART_SetConfig+0x390>
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a3e      	ldr	r2, [pc, #248]	; (80050bc <UART_SetConfig+0x340>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d13e      	bne.n	8005046 <UART_SetConfig+0x2ca>
 8004fc8:	4b40      	ldr	r3, [pc, #256]	; (80050cc <UART_SetConfig+0x350>)
 8004fca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fcc:	23c0      	movs	r3, #192	; 0xc0
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	22c0      	movs	r2, #192	; 0xc0
 8004fd4:	0112      	lsls	r2, r2, #4
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d027      	beq.n	800502a <UART_SetConfig+0x2ae>
 8004fda:	22c0      	movs	r2, #192	; 0xc0
 8004fdc:	0112      	lsls	r2, r2, #4
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d82a      	bhi.n	8005038 <UART_SetConfig+0x2bc>
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	0112      	lsls	r2, r2, #4
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d011      	beq.n	800500e <UART_SetConfig+0x292>
 8004fea:	2280      	movs	r2, #128	; 0x80
 8004fec:	0112      	lsls	r2, r2, #4
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d822      	bhi.n	8005038 <UART_SetConfig+0x2bc>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d004      	beq.n	8005000 <UART_SetConfig+0x284>
 8004ff6:	2280      	movs	r2, #128	; 0x80
 8004ff8:	00d2      	lsls	r2, r2, #3
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <UART_SetConfig+0x2a0>
 8004ffe:	e01b      	b.n	8005038 <UART_SetConfig+0x2bc>
 8005000:	231b      	movs	r3, #27
 8005002:	2220      	movs	r2, #32
 8005004:	189b      	adds	r3, r3, r2
 8005006:	19db      	adds	r3, r3, r7
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e07e      	b.n	800510c <UART_SetConfig+0x390>
 800500e:	231b      	movs	r3, #27
 8005010:	2220      	movs	r2, #32
 8005012:	189b      	adds	r3, r3, r2
 8005014:	19db      	adds	r3, r3, r7
 8005016:	2202      	movs	r2, #2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	e077      	b.n	800510c <UART_SetConfig+0x390>
 800501c:	231b      	movs	r3, #27
 800501e:	2220      	movs	r2, #32
 8005020:	189b      	adds	r3, r3, r2
 8005022:	19db      	adds	r3, r3, r7
 8005024:	2204      	movs	r2, #4
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	e070      	b.n	800510c <UART_SetConfig+0x390>
 800502a:	231b      	movs	r3, #27
 800502c:	2220      	movs	r2, #32
 800502e:	189b      	adds	r3, r3, r2
 8005030:	19db      	adds	r3, r3, r7
 8005032:	2208      	movs	r2, #8
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e069      	b.n	800510c <UART_SetConfig+0x390>
 8005038:	231b      	movs	r3, #27
 800503a:	2220      	movs	r2, #32
 800503c:	189b      	adds	r3, r3, r2
 800503e:	19db      	adds	r3, r3, r7
 8005040:	2210      	movs	r2, #16
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e062      	b.n	800510c <UART_SetConfig+0x390>
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <UART_SetConfig+0x344>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d157      	bne.n	8005100 <UART_SetConfig+0x384>
 8005050:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <UART_SetConfig+0x350>)
 8005052:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005054:	23c0      	movs	r3, #192	; 0xc0
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4013      	ands	r3, r2
 800505a:	22c0      	movs	r2, #192	; 0xc0
 800505c:	0092      	lsls	r2, r2, #2
 800505e:	4293      	cmp	r3, r2
 8005060:	d040      	beq.n	80050e4 <UART_SetConfig+0x368>
 8005062:	22c0      	movs	r2, #192	; 0xc0
 8005064:	0092      	lsls	r2, r2, #2
 8005066:	4293      	cmp	r3, r2
 8005068:	d843      	bhi.n	80050f2 <UART_SetConfig+0x376>
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	0092      	lsls	r2, r2, #2
 800506e:	4293      	cmp	r3, r2
 8005070:	d011      	beq.n	8005096 <UART_SetConfig+0x31a>
 8005072:	2280      	movs	r2, #128	; 0x80
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	4293      	cmp	r3, r2
 8005078:	d83b      	bhi.n	80050f2 <UART_SetConfig+0x376>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <UART_SetConfig+0x30c>
 800507e:	2280      	movs	r2, #128	; 0x80
 8005080:	0052      	lsls	r2, r2, #1
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <UART_SetConfig+0x328>
 8005086:	e034      	b.n	80050f2 <UART_SetConfig+0x376>
 8005088:	231b      	movs	r3, #27
 800508a:	2220      	movs	r2, #32
 800508c:	189b      	adds	r3, r3, r2
 800508e:	19db      	adds	r3, r3, r7
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	e03a      	b.n	800510c <UART_SetConfig+0x390>
 8005096:	231b      	movs	r3, #27
 8005098:	2220      	movs	r2, #32
 800509a:	189b      	adds	r3, r3, r2
 800509c:	19db      	adds	r3, r3, r7
 800509e:	2202      	movs	r2, #2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e033      	b.n	800510c <UART_SetConfig+0x390>
 80050a4:	231b      	movs	r3, #27
 80050a6:	2220      	movs	r2, #32
 80050a8:	189b      	adds	r3, r3, r2
 80050aa:	19db      	adds	r3, r3, r7
 80050ac:	2204      	movs	r2, #4
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e02c      	b.n	800510c <UART_SetConfig+0x390>
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	cfff69f3 	.word	0xcfff69f3
 80050b8:	ffffcfff 	.word	0xffffcfff
 80050bc:	40008000 	.word	0x40008000
 80050c0:	40008400 	.word	0x40008400
 80050c4:	11fff4ff 	.word	0x11fff4ff
 80050c8:	40013800 	.word	0x40013800
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40004400 	.word	0x40004400
 80050d4:	40004800 	.word	0x40004800
 80050d8:	40004c00 	.word	0x40004c00
 80050dc:	40005000 	.word	0x40005000
 80050e0:	40013c00 	.word	0x40013c00
 80050e4:	231b      	movs	r3, #27
 80050e6:	2220      	movs	r2, #32
 80050e8:	189b      	adds	r3, r3, r2
 80050ea:	19db      	adds	r3, r3, r7
 80050ec:	2208      	movs	r2, #8
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e00c      	b.n	800510c <UART_SetConfig+0x390>
 80050f2:	231b      	movs	r3, #27
 80050f4:	2220      	movs	r2, #32
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	19db      	adds	r3, r3, r7
 80050fa:	2210      	movs	r2, #16
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e005      	b.n	800510c <UART_SetConfig+0x390>
 8005100:	231b      	movs	r3, #27
 8005102:	2220      	movs	r2, #32
 8005104:	189b      	adds	r3, r3, r2
 8005106:	19db      	adds	r3, r3, r7
 8005108:	2210      	movs	r2, #16
 800510a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4ac1      	ldr	r2, [pc, #772]	; (8005418 <UART_SetConfig+0x69c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d005      	beq.n	8005122 <UART_SetConfig+0x3a6>
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4ac0      	ldr	r2, [pc, #768]	; (800541c <UART_SetConfig+0x6a0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d000      	beq.n	8005122 <UART_SetConfig+0x3a6>
 8005120:	e093      	b.n	800524a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005122:	231b      	movs	r3, #27
 8005124:	2220      	movs	r2, #32
 8005126:	189b      	adds	r3, r3, r2
 8005128:	19db      	adds	r3, r3, r7
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d015      	beq.n	800515c <UART_SetConfig+0x3e0>
 8005130:	dc18      	bgt.n	8005164 <UART_SetConfig+0x3e8>
 8005132:	2b04      	cmp	r3, #4
 8005134:	d00d      	beq.n	8005152 <UART_SetConfig+0x3d6>
 8005136:	dc15      	bgt.n	8005164 <UART_SetConfig+0x3e8>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <UART_SetConfig+0x3c6>
 800513c:	2b02      	cmp	r3, #2
 800513e:	d005      	beq.n	800514c <UART_SetConfig+0x3d0>
 8005140:	e010      	b.n	8005164 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005142:	f7ff fac7 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8005146:	0003      	movs	r3, r0
 8005148:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800514a:	e014      	b.n	8005176 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800514c:	4bb4      	ldr	r3, [pc, #720]	; (8005420 <UART_SetConfig+0x6a4>)
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005150:	e011      	b.n	8005176 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005152:	f7ff fa33 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 8005156:	0003      	movs	r3, r0
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800515a:	e00c      	b.n	8005176 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005162:	e008      	b.n	8005176 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005168:	231a      	movs	r3, #26
 800516a:	2220      	movs	r2, #32
 800516c:	189b      	adds	r3, r3, r2
 800516e:	19db      	adds	r3, r3, r7
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
        break;
 8005174:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	2b00      	cmp	r3, #0
 800517a:	d100      	bne.n	800517e <UART_SetConfig+0x402>
 800517c:	e135      	b.n	80053ea <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005182:	4ba8      	ldr	r3, [pc, #672]	; (8005424 <UART_SetConfig+0x6a8>)
 8005184:	0052      	lsls	r2, r2, #1
 8005186:	5ad3      	ldrh	r3, [r2, r3]
 8005188:	0019      	movs	r1, r3
 800518a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800518c:	f7fa ffba 	bl	8000104 <__udivsi3>
 8005190:	0003      	movs	r3, r0
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	0013      	movs	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	189b      	adds	r3, r3, r2
 800519e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d305      	bcc.n	80051b0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d906      	bls.n	80051be <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80051b0:	231a      	movs	r3, #26
 80051b2:	2220      	movs	r2, #32
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	19db      	adds	r3, r3, r7
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e044      	b.n	8005248 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	2300      	movs	r3, #0
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ca:	4b96      	ldr	r3, [pc, #600]	; (8005424 <UART_SetConfig+0x6a8>)
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	5ad3      	ldrh	r3, [r2, r3]
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	69b8      	ldr	r0, [r7, #24]
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	f7fb f907 	bl	80003f0 <__aeabi_uldivmod>
 80051e2:	0002      	movs	r2, r0
 80051e4:	000b      	movs	r3, r1
 80051e6:	0e11      	lsrs	r1, r2, #24
 80051e8:	021d      	lsls	r5, r3, #8
 80051ea:	430d      	orrs	r5, r1
 80051ec:	0214      	lsls	r4, r2, #8
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	68b8      	ldr	r0, [r7, #8]
 80051fc:	68f9      	ldr	r1, [r7, #12]
 80051fe:	1900      	adds	r0, r0, r4
 8005200:	4169      	adcs	r1, r5
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	2300      	movs	r3, #0
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f7fb f8ee 	bl	80003f0 <__aeabi_uldivmod>
 8005214:	0002      	movs	r2, r0
 8005216:	000b      	movs	r3, r1
 8005218:	0013      	movs	r3, r2
 800521a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800521c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521e:	23c0      	movs	r3, #192	; 0xc0
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	429a      	cmp	r2, r3
 8005224:	d309      	bcc.n	800523a <UART_SetConfig+0x4be>
 8005226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	035b      	lsls	r3, r3, #13
 800522c:	429a      	cmp	r2, r3
 800522e:	d204      	bcs.n	800523a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e006      	b.n	8005248 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800523a:	231a      	movs	r3, #26
 800523c:	2220      	movs	r2, #32
 800523e:	189b      	adds	r3, r3, r2
 8005240:	19db      	adds	r3, r3, r7
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005246:	e0d0      	b.n	80053ea <UART_SetConfig+0x66e>
 8005248:	e0cf      	b.n	80053ea <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	69da      	ldr	r2, [r3, #28]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	429a      	cmp	r2, r3
 8005254:	d000      	beq.n	8005258 <UART_SetConfig+0x4dc>
 8005256:	e070      	b.n	800533a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005258:	231b      	movs	r3, #27
 800525a:	2220      	movs	r2, #32
 800525c:	189b      	adds	r3, r3, r2
 800525e:	19db      	adds	r3, r3, r7
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b08      	cmp	r3, #8
 8005264:	d015      	beq.n	8005292 <UART_SetConfig+0x516>
 8005266:	dc18      	bgt.n	800529a <UART_SetConfig+0x51e>
 8005268:	2b04      	cmp	r3, #4
 800526a:	d00d      	beq.n	8005288 <UART_SetConfig+0x50c>
 800526c:	dc15      	bgt.n	800529a <UART_SetConfig+0x51e>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <UART_SetConfig+0x4fc>
 8005272:	2b02      	cmp	r3, #2
 8005274:	d005      	beq.n	8005282 <UART_SetConfig+0x506>
 8005276:	e010      	b.n	800529a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005278:	f7ff fa2c 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 800527c:	0003      	movs	r3, r0
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005280:	e014      	b.n	80052ac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005282:	4b67      	ldr	r3, [pc, #412]	; (8005420 <UART_SetConfig+0x6a4>)
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005286:	e011      	b.n	80052ac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005288:	f7ff f998 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800528c:	0003      	movs	r3, r0
 800528e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005290:	e00c      	b.n	80052ac <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005298:	e008      	b.n	80052ac <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800529e:	231a      	movs	r3, #26
 80052a0:	2220      	movs	r2, #32
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	19db      	adds	r3, r3, r7
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
        break;
 80052aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d100      	bne.n	80052b4 <UART_SetConfig+0x538>
 80052b2:	e09a      	b.n	80053ea <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052b8:	4b5a      	ldr	r3, [pc, #360]	; (8005424 <UART_SetConfig+0x6a8>)
 80052ba:	0052      	lsls	r2, r2, #1
 80052bc:	5ad3      	ldrh	r3, [r2, r3]
 80052be:	0019      	movs	r1, r3
 80052c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052c2:	f7fa ff1f 	bl	8000104 <__udivsi3>
 80052c6:	0003      	movs	r3, r0
 80052c8:	005a      	lsls	r2, r3, #1
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	18d2      	adds	r2, r2, r3
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	0019      	movs	r1, r3
 80052d8:	0010      	movs	r0, r2
 80052da:	f7fa ff13 	bl	8000104 <__udivsi3>
 80052de:	0003      	movs	r3, r0
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	2b0f      	cmp	r3, #15
 80052e6:	d921      	bls.n	800532c <UART_SetConfig+0x5b0>
 80052e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	025b      	lsls	r3, r3, #9
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d21c      	bcs.n	800532c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	200e      	movs	r0, #14
 80052f8:	2420      	movs	r4, #32
 80052fa:	1903      	adds	r3, r0, r4
 80052fc:	19db      	adds	r3, r3, r7
 80052fe:	210f      	movs	r1, #15
 8005300:	438a      	bics	r2, r1
 8005302:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	b29b      	uxth	r3, r3
 800530a:	2207      	movs	r2, #7
 800530c:	4013      	ands	r3, r2
 800530e:	b299      	uxth	r1, r3
 8005310:	1903      	adds	r3, r0, r4
 8005312:	19db      	adds	r3, r3, r7
 8005314:	1902      	adds	r2, r0, r4
 8005316:	19d2      	adds	r2, r2, r7
 8005318:	8812      	ldrh	r2, [r2, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	1902      	adds	r2, r0, r4
 8005324:	19d2      	adds	r2, r2, r7
 8005326:	8812      	ldrh	r2, [r2, #0]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	e05e      	b.n	80053ea <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800532c:	231a      	movs	r3, #26
 800532e:	2220      	movs	r2, #32
 8005330:	189b      	adds	r3, r3, r2
 8005332:	19db      	adds	r3, r3, r7
 8005334:	2201      	movs	r2, #1
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e057      	b.n	80053ea <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800533a:	231b      	movs	r3, #27
 800533c:	2220      	movs	r2, #32
 800533e:	189b      	adds	r3, r3, r2
 8005340:	19db      	adds	r3, r3, r7
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d015      	beq.n	8005374 <UART_SetConfig+0x5f8>
 8005348:	dc18      	bgt.n	800537c <UART_SetConfig+0x600>
 800534a:	2b04      	cmp	r3, #4
 800534c:	d00d      	beq.n	800536a <UART_SetConfig+0x5ee>
 800534e:	dc15      	bgt.n	800537c <UART_SetConfig+0x600>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <UART_SetConfig+0x5de>
 8005354:	2b02      	cmp	r3, #2
 8005356:	d005      	beq.n	8005364 <UART_SetConfig+0x5e8>
 8005358:	e010      	b.n	800537c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535a:	f7ff f9bb 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 800535e:	0003      	movs	r3, r0
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005362:	e014      	b.n	800538e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005364:	4b2e      	ldr	r3, [pc, #184]	; (8005420 <UART_SetConfig+0x6a4>)
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005368:	e011      	b.n	800538e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536a:	f7ff f927 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800536e:	0003      	movs	r3, r0
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005372:	e00c      	b.n	800538e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800537a:	e008      	b.n	800538e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005380:	231a      	movs	r3, #26
 8005382:	2220      	movs	r2, #32
 8005384:	189b      	adds	r3, r3, r2
 8005386:	19db      	adds	r3, r3, r7
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
        break;
 800538c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800538e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005390:	2b00      	cmp	r3, #0
 8005392:	d02a      	beq.n	80053ea <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005398:	4b22      	ldr	r3, [pc, #136]	; (8005424 <UART_SetConfig+0x6a8>)
 800539a:	0052      	lsls	r2, r2, #1
 800539c:	5ad3      	ldrh	r3, [r2, r3]
 800539e:	0019      	movs	r1, r3
 80053a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053a2:	f7fa feaf 	bl	8000104 <__udivsi3>
 80053a6:	0003      	movs	r3, r0
 80053a8:	001a      	movs	r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	18d2      	adds	r2, r2, r3
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	0019      	movs	r1, r3
 80053b8:	0010      	movs	r0, r2
 80053ba:	f7fa fea3 	bl	8000104 <__udivsi3>
 80053be:	0003      	movs	r3, r0
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2b0f      	cmp	r3, #15
 80053c6:	d90a      	bls.n	80053de <UART_SetConfig+0x662>
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	025b      	lsls	r3, r3, #9
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d205      	bcs.n	80053de <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60da      	str	r2, [r3, #12]
 80053dc:	e005      	b.n	80053ea <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80053de:	231a      	movs	r3, #26
 80053e0:	2220      	movs	r2, #32
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	19db      	adds	r3, r3, r7
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	226a      	movs	r2, #106	; 0x6a
 80053ee:	2101      	movs	r1, #1
 80053f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	2268      	movs	r2, #104	; 0x68
 80053f6:	2101      	movs	r1, #1
 80053f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	2200      	movs	r2, #0
 80053fe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	2200      	movs	r2, #0
 8005404:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005406:	231a      	movs	r3, #26
 8005408:	2220      	movs	r2, #32
 800540a:	189b      	adds	r3, r3, r2
 800540c:	19db      	adds	r3, r3, r7
 800540e:	781b      	ldrb	r3, [r3, #0]
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b010      	add	sp, #64	; 0x40
 8005416:	bdb0      	pop	{r4, r5, r7, pc}
 8005418:	40008000 	.word	0x40008000
 800541c:	40008400 	.word	0x40008400
 8005420:	00f42400 	.word	0x00f42400
 8005424:	0800a1f0 	.word	0x0800a1f0

08005428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	2201      	movs	r2, #1
 8005436:	4013      	ands	r3, r2
 8005438:	d00b      	beq.n	8005452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a4a      	ldr	r2, [pc, #296]	; (800556c <UART_AdvFeatureConfig+0x144>)
 8005442:	4013      	ands	r3, r2
 8005444:	0019      	movs	r1, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	2202      	movs	r2, #2
 8005458:	4013      	ands	r3, r2
 800545a:	d00b      	beq.n	8005474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4a43      	ldr	r2, [pc, #268]	; (8005570 <UART_AdvFeatureConfig+0x148>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	2204      	movs	r2, #4
 800547a:	4013      	ands	r3, r2
 800547c:	d00b      	beq.n	8005496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4a3b      	ldr	r2, [pc, #236]	; (8005574 <UART_AdvFeatureConfig+0x14c>)
 8005486:	4013      	ands	r3, r2
 8005488:	0019      	movs	r1, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	2208      	movs	r2, #8
 800549c:	4013      	ands	r3, r2
 800549e:	d00b      	beq.n	80054b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4a34      	ldr	r2, [pc, #208]	; (8005578 <UART_AdvFeatureConfig+0x150>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	2210      	movs	r2, #16
 80054be:	4013      	ands	r3, r2
 80054c0:	d00b      	beq.n	80054da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4a2c      	ldr	r2, [pc, #176]	; (800557c <UART_AdvFeatureConfig+0x154>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2220      	movs	r2, #32
 80054e0:	4013      	ands	r3, r2
 80054e2:	d00b      	beq.n	80054fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	4a25      	ldr	r2, [pc, #148]	; (8005580 <UART_AdvFeatureConfig+0x158>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	0019      	movs	r1, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	2240      	movs	r2, #64	; 0x40
 8005502:	4013      	ands	r3, r2
 8005504:	d01d      	beq.n	8005542 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <UART_AdvFeatureConfig+0x15c>)
 800550e:	4013      	ands	r3, r2
 8005510:	0019      	movs	r1, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	035b      	lsls	r3, r3, #13
 8005526:	429a      	cmp	r2, r3
 8005528:	d10b      	bne.n	8005542 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a15      	ldr	r2, [pc, #84]	; (8005588 <UART_AdvFeatureConfig+0x160>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	2280      	movs	r2, #128	; 0x80
 8005548:	4013      	ands	r3, r2
 800554a:	d00b      	beq.n	8005564 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a0e      	ldr	r2, [pc, #56]	; (800558c <UART_AdvFeatureConfig+0x164>)
 8005554:	4013      	ands	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }
}
 8005564:	46c0      	nop			; (mov r8, r8)
 8005566:	46bd      	mov	sp, r7
 8005568:	b002      	add	sp, #8
 800556a:	bd80      	pop	{r7, pc}
 800556c:	fffdffff 	.word	0xfffdffff
 8005570:	fffeffff 	.word	0xfffeffff
 8005574:	fffbffff 	.word	0xfffbffff
 8005578:	ffff7fff 	.word	0xffff7fff
 800557c:	ffffefff 	.word	0xffffefff
 8005580:	ffffdfff 	.word	0xffffdfff
 8005584:	ffefffff 	.word	0xffefffff
 8005588:	ff9fffff 	.word	0xff9fffff
 800558c:	fff7ffff 	.word	0xfff7ffff

08005590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af02      	add	r7, sp, #8
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	228c      	movs	r2, #140	; 0x8c
 800559c:	2100      	movs	r1, #0
 800559e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a0:	f7fc f97e 	bl	80018a0 <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2208      	movs	r2, #8
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d10c      	bne.n	80055d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2280      	movs	r2, #128	; 0x80
 80055ba:	0391      	lsls	r1, r2, #14
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4a18      	ldr	r2, [pc, #96]	; (8005620 <UART_CheckIdleState+0x90>)
 80055c0:	9200      	str	r2, [sp, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f000 f82e 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 80055c8:	1e03      	subs	r3, r0, #0
 80055ca:	d001      	beq.n	80055d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e023      	b.n	8005618 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2204      	movs	r2, #4
 80055d8:	4013      	ands	r3, r2
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d10c      	bne.n	80055f8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	03d1      	lsls	r1, r2, #15
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <UART_CheckIdleState+0x90>)
 80055e8:	9200      	str	r2, [sp, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f000 f81a 	bl	8005624 <UART_WaitOnFlagUntilTimeout>
 80055f0:	1e03      	subs	r3, r0, #0
 80055f2:	d001      	beq.n	80055f8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e00f      	b.n	8005618 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2284      	movs	r2, #132	; 0x84
 80055fc:	2120      	movs	r1, #32
 80055fe:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2288      	movs	r2, #136	; 0x88
 8005604:	2120      	movs	r1, #32
 8005606:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2280      	movs	r2, #128	; 0x80
 8005612:	2100      	movs	r1, #0
 8005614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	0018      	movs	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	b004      	add	sp, #16
 800561e:	bd80      	pop	{r7, pc}
 8005620:	01ffffff 	.word	0x01ffffff

08005624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b094      	sub	sp, #80	; 0x50
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	1dfb      	adds	r3, r7, #7
 8005632:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	e0a7      	b.n	8005786 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005638:	3301      	adds	r3, #1
 800563a:	d100      	bne.n	800563e <UART_WaitOnFlagUntilTimeout+0x1a>
 800563c:	e0a3      	b.n	8005786 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fc f92f 	bl	80018a0 <HAL_GetTick>
 8005642:	0002      	movs	r2, r0
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <UART_WaitOnFlagUntilTimeout+0x30>
 800564e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005650:	2b00      	cmp	r3, #0
 8005652:	d13f      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8310 	mrs	r3, PRIMASK
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800565c:	647b      	str	r3, [r7, #68]	; 0x44
 800565e:	2301      	movs	r3, #1
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	494e      	ldr	r1, [pc, #312]	; (80057b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005676:	400a      	ands	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	f383 8810 	msr	PRIMASK, r3
}
 8005684:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005686:	f3ef 8310 	mrs	r3, PRIMASK
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568e:	643b      	str	r3, [r7, #64]	; 0x40
 8005690:	2301      	movs	r3, #1
 8005692:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005696:	f383 8810 	msr	PRIMASK, r3
}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2101      	movs	r1, #1
 80056a8:	438a      	bics	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b2:	f383 8810 	msr	PRIMASK, r3
}
 80056b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2284      	movs	r2, #132	; 0x84
 80056bc:	2120      	movs	r1, #32
 80056be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2288      	movs	r2, #136	; 0x88
 80056c4:	2120      	movs	r1, #32
 80056c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2280      	movs	r2, #128	; 0x80
 80056cc:	2100      	movs	r1, #0
 80056ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e069      	b.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2204      	movs	r2, #4
 80056dc:	4013      	ands	r3, r2
 80056de:	d052      	beq.n	8005786 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	401a      	ands	r2, r3
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d148      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2280      	movs	r2, #128	; 0x80
 80056fa:	0112      	lsls	r2, r2, #4
 80056fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005702:	613b      	str	r3, [r7, #16]
  return(result);
 8005704:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005708:	2301      	movs	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f383 8810 	msr	PRIMASK, r3
}
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4924      	ldr	r1, [pc, #144]	; (80057b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005720:	400a      	ands	r2, r1
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005726:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f383 8810 	msr	PRIMASK, r3
}
 800572e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005730:	f3ef 8310 	mrs	r3, PRIMASK
 8005734:	61fb      	str	r3, [r7, #28]
  return(result);
 8005736:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005738:	64bb      	str	r3, [r7, #72]	; 0x48
 800573a:	2301      	movs	r3, #1
 800573c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	f383 8810 	msr	PRIMASK, r3
}
 8005744:	46c0      	nop			; (mov r8, r8)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2101      	movs	r1, #1
 8005752:	438a      	bics	r2, r1
 8005754:	609a      	str	r2, [r3, #8]
 8005756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	f383 8810 	msr	PRIMASK, r3
}
 8005760:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2284      	movs	r2, #132	; 0x84
 8005766:	2120      	movs	r1, #32
 8005768:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2288      	movs	r2, #136	; 0x88
 800576e:	2120      	movs	r1, #32
 8005770:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	228c      	movs	r2, #140	; 0x8c
 8005776:	2120      	movs	r1, #32
 8005778:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2280      	movs	r2, #128	; 0x80
 800577e:	2100      	movs	r1, #0
 8005780:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e010      	b.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	425a      	negs	r2, r3
 8005796:	4153      	adcs	r3, r2
 8005798:	b2db      	uxtb	r3, r3
 800579a:	001a      	movs	r2, r3
 800579c:	1dfb      	adds	r3, r7, #7
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d100      	bne.n	80057a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80057a4:	e747      	b.n	8005636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b014      	add	sp, #80	; 0x50
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	fffffe5f 	.word	0xfffffe5f

080057b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2280      	movs	r2, #128	; 0x80
 80057c0:	5c9b      	ldrb	r3, [r3, r2]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_UARTEx_DisableFifoMode+0x16>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e027      	b.n	800581a <HAL_UARTEx_DisableFifoMode+0x66>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	2101      	movs	r1, #1
 80057d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2284      	movs	r2, #132	; 0x84
 80057d6:	2124      	movs	r1, #36	; 0x24
 80057d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2101      	movs	r1, #1
 80057ee:	438a      	bics	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a0b      	ldr	r2, [pc, #44]	; (8005824 <HAL_UARTEx_DisableFifoMode+0x70>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2284      	movs	r2, #132	; 0x84
 800580c:	2120      	movs	r1, #32
 800580e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	2100      	movs	r1, #0
 8005816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	b004      	add	sp, #16
 8005820:	bd80      	pop	{r7, pc}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	dfffffff 	.word	0xdfffffff

08005828 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2280      	movs	r2, #128	; 0x80
 8005836:	5c9b      	ldrb	r3, [r3, r2]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800583c:	2302      	movs	r3, #2
 800583e:	e02e      	b.n	800589e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	2101      	movs	r1, #1
 8005846:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2284      	movs	r2, #132	; 0x84
 800584c:	2124      	movs	r1, #36	; 0x24
 800584e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2101      	movs	r1, #1
 8005864:	438a      	bics	r2, r1
 8005866:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	08d9      	lsrs	r1, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	0018      	movs	r0, r3
 8005880:	f000 f854 	bl	800592c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2284      	movs	r2, #132	; 0x84
 8005890:	2120      	movs	r1, #32
 8005892:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	2100      	movs	r1, #0
 800589a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b004      	add	sp, #16
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2280      	movs	r2, #128	; 0x80
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058bc:	2302      	movs	r3, #2
 80058be:	e02f      	b.n	8005920 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	2101      	movs	r1, #1
 80058c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2284      	movs	r2, #132	; 0x84
 80058cc:	2124      	movs	r1, #36	; 0x24
 80058ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2101      	movs	r1, #1
 80058e4:	438a      	bics	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	0019      	movs	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f000 f813 	bl	800592c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2284      	movs	r2, #132	; 0x84
 8005912:	2120      	movs	r1, #32
 8005914:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	2100      	movs	r1, #0
 800591c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	0018      	movs	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	b004      	add	sp, #16
 8005926:	bd80      	pop	{r7, pc}
 8005928:	f1ffffff 	.word	0xf1ffffff

0800592c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005938:	2b00      	cmp	r3, #0
 800593a:	d108      	bne.n	800594e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	226a      	movs	r2, #106	; 0x6a
 8005940:	2101      	movs	r1, #1
 8005942:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2268      	movs	r2, #104	; 0x68
 8005948:	2101      	movs	r1, #1
 800594a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800594c:	e043      	b.n	80059d6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800594e:	260f      	movs	r6, #15
 8005950:	19bb      	adds	r3, r7, r6
 8005952:	2208      	movs	r2, #8
 8005954:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005956:	200e      	movs	r0, #14
 8005958:	183b      	adds	r3, r7, r0
 800595a:	2208      	movs	r2, #8
 800595c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	0e5b      	lsrs	r3, r3, #25
 8005966:	b2da      	uxtb	r2, r3
 8005968:	240d      	movs	r4, #13
 800596a:	193b      	adds	r3, r7, r4
 800596c:	2107      	movs	r1, #7
 800596e:	400a      	ands	r2, r1
 8005970:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	0f5b      	lsrs	r3, r3, #29
 800597a:	b2da      	uxtb	r2, r3
 800597c:	250c      	movs	r5, #12
 800597e:	197b      	adds	r3, r7, r5
 8005980:	2107      	movs	r1, #7
 8005982:	400a      	ands	r2, r1
 8005984:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005986:	183b      	adds	r3, r7, r0
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	197a      	adds	r2, r7, r5
 800598c:	7812      	ldrb	r2, [r2, #0]
 800598e:	4914      	ldr	r1, [pc, #80]	; (80059e0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005990:	5c8a      	ldrb	r2, [r1, r2]
 8005992:	435a      	muls	r2, r3
 8005994:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005996:	197b      	adds	r3, r7, r5
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <UARTEx_SetNbDataToProcess+0xb8>)
 800599c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800599e:	0019      	movs	r1, r3
 80059a0:	f7fa fc3a 	bl	8000218 <__divsi3>
 80059a4:	0003      	movs	r3, r0
 80059a6:	b299      	uxth	r1, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	226a      	movs	r2, #106	; 0x6a
 80059ac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ae:	19bb      	adds	r3, r7, r6
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	193a      	adds	r2, r7, r4
 80059b4:	7812      	ldrb	r2, [r2, #0]
 80059b6:	490a      	ldr	r1, [pc, #40]	; (80059e0 <UARTEx_SetNbDataToProcess+0xb4>)
 80059b8:	5c8a      	ldrb	r2, [r1, r2]
 80059ba:	435a      	muls	r2, r3
 80059bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80059be:	193b      	adds	r3, r7, r4
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <UARTEx_SetNbDataToProcess+0xb8>)
 80059c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059c6:	0019      	movs	r1, r3
 80059c8:	f7fa fc26 	bl	8000218 <__divsi3>
 80059cc:	0003      	movs	r3, r0
 80059ce:	b299      	uxth	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2268      	movs	r2, #104	; 0x68
 80059d4:	5299      	strh	r1, [r3, r2]
}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	b005      	add	sp, #20
 80059dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	0800a208 	.word	0x0800a208
 80059e4:	0800a210 	.word	0x0800a210

080059e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <USB_EnableGlobalInt+0x24>)
 80059f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b004      	add	sp, #16
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	0000bf80 	.word	0x0000bf80

08005a10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a18:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <USB_DisableGlobalInt+0x24>)
 8005a1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	43d2      	mvns	r2, r2
 8005a24:	401a      	ands	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b004      	add	sp, #16
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	0000bf80 	.word	0x0000bf80

08005a38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	000a      	movs	r2, r1
 8005a42:	1cfb      	adds	r3, r7, #3
 8005a44:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8005a46:	1cfb      	adds	r3, r7, #3
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	085a      	lsrs	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40
 8005a5a:	e006      	b.n	8005a6a <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	0612      	lsls	r2, r2, #24
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b002      	add	sp, #8
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005a74:	b084      	sub	sp, #16
 8005a76:	b590      	push	{r4, r7, lr}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	2004      	movs	r0, #4
 8005a80:	2410      	movs	r4, #16
 8005a82:	1900      	adds	r0, r0, r4
 8005a84:	2408      	movs	r4, #8
 8005a86:	46a4      	mov	ip, r4
 8005a88:	44bc      	add	ip, r7
 8005a8a:	4460      	add	r0, ip
 8005a8c:	6001      	str	r1, [r0, #0]
 8005a8e:	6042      	str	r2, [r0, #4]
 8005a90:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);
  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	4393      	bics	r3, r2
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  (void)USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	0018      	movs	r0, r3
 8005aac:	f7ff ffc4 	bl	8005a38 <USB_SetCurrentMode>

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b003      	add	sp, #12
 8005abe:	bc90      	pop	{r4, r7}
 8005ac0:	bc08      	pop	{r3}
 8005ac2:	b004      	add	sp, #16
 8005ac4:	4718      	bx	r3
	...

08005ac8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b09c      	sub	sp, #112	; 0x70
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad2:	236f      	movs	r3, #111	; 0x6f
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	18d3      	adds	r3, r2, r3
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4ad6      	ldr	r2, [pc, #856]	; (8005e40 <USB_ActivateEndpoint+0x378>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	66bb      	str	r3, [r7, #104]	; 0x68

  /* initialize Endpoint */
  switch (ep->type)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	78db      	ldrb	r3, [r3, #3]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d00e      	beq.n	8005b12 <USB_ActivateEndpoint+0x4a>
 8005af4:	dc19      	bgt.n	8005b2a <USB_ActivateEndpoint+0x62>
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d01c      	beq.n	8005b34 <USB_ActivateEndpoint+0x6c>
 8005afa:	dc16      	bgt.n	8005b2a <USB_ActivateEndpoint+0x62>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <USB_ActivateEndpoint+0x3e>
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d00c      	beq.n	8005b1e <USB_ActivateEndpoint+0x56>
 8005b04:	e011      	b.n	8005b2a <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b08:	2280      	movs	r2, #128	; 0x80
 8005b0a:	0092      	lsls	r2, r2, #2
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8005b10:	e011      	b.n	8005b36 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b14:	22c0      	movs	r2, #192	; 0xc0
 8005b16:	00d2      	lsls	r2, r2, #3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8005b1c:	e00b      	b.n	8005b36 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b20:	2280      	movs	r2, #128	; 0x80
 8005b22:	00d2      	lsls	r2, r2, #3
 8005b24:	4313      	orrs	r3, r2
 8005b26:	66bb      	str	r3, [r7, #104]	; 0x68
      break;
 8005b28:	e005      	b.n	8005b36 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8005b2a:	236f      	movs	r3, #111	; 0x6f
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	2201      	movs	r2, #1
 8005b30:	701a      	strb	r2, [r3, #0]
      break;
 8005b32:	e000      	b.n	8005b36 <USB_ActivateEndpoint+0x6e>
      break;
 8005b34:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b42:	49c0      	ldr	r1, [pc, #768]	; (8005e44 <USB_ActivateEndpoint+0x37c>)
 8005b44:	430a      	orrs	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	18d3      	adds	r3, r2, r3
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4abc      	ldr	r2, [pc, #752]	; (8005e48 <USB_ActivateEndpoint+0x380>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	7812      	ldrb	r2, [r2, #0]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b6c:	49b5      	ldr	r1, [pc, #724]	; (8005e44 <USB_ActivateEndpoint+0x37c>)
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	7a9b      	ldrb	r3, [r3, #10]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d000      	beq.n	8005b7c <USB_ActivateEndpoint+0xb4>
 8005b7a:	e149      	b.n	8005e10 <USB_ActivateEndpoint+0x348>
  {
    if (ep->is_in != 0U)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d06e      	beq.n	8005c62 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4ab0      	ldr	r2, [pc, #704]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005b8c:	4694      	mov	ip, r2
 8005b8e:	4463      	add	r3, ip
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	49ac      	ldr	r1, [pc, #688]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005b9a:	468c      	mov	ip, r1
 8005b9c:	4463      	add	r3, ip
 8005b9e:	0c12      	lsrs	r2, r2, #16
 8005ba0:	0412      	lsls	r2, r2, #16
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4aa8      	ldr	r2, [pc, #672]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005bac:	4694      	mov	ip, r2
 8005bae:	4463      	add	r3, ip
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	889b      	ldrh	r3, [r3, #4]
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	009a      	lsls	r2, r3, #2
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	48a2      	ldr	r0, [pc, #648]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005bc4:	4684      	mov	ip, r0
 8005bc6:	4463      	add	r3, ip
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	18d3      	adds	r3, r2, r3
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2240      	movs	r2, #64	; 0x40
 8005bde:	4013      	ands	r3, r2
 8005be0:	d011      	beq.n	8005c06 <USB_ActivateEndpoint+0x13e>
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	18d3      	adds	r3, r2, r3
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a96      	ldr	r2, [pc, #600]	; (8005e48 <USB_ActivateEndpoint+0x380>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	18d3      	adds	r3, r2, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4993      	ldr	r1, [pc, #588]	; (8005e50 <USB_ActivateEndpoint+0x388>)
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	78db      	ldrb	r3, [r3, #3]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d016      	beq.n	8005c3c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	18d3      	adds	r3, r2, r3
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a8e      	ldr	r2, [pc, #568]	; (8005e54 <USB_ActivateEndpoint+0x38c>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2220      	movs	r2, #32
 8005c24:	4053      	eors	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	18d3      	adds	r3, r2, r3
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	4983      	ldr	r1, [pc, #524]	; (8005e44 <USB_ActivateEndpoint+0x37c>)
 8005c36:	430a      	orrs	r2, r1
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e257      	b.n	80060ec <USB_ActivateEndpoint+0x624>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	18d3      	adds	r3, r2, r3
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a82      	ldr	r2, [pc, #520]	; (8005e54 <USB_ActivateEndpoint+0x38c>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	18d3      	adds	r3, r2, r3
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	497a      	ldr	r1, [pc, #488]	; (8005e44 <USB_ActivateEndpoint+0x37c>)
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e244      	b.n	80060ec <USB_ActivateEndpoint+0x624>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4a78      	ldr	r2, [pc, #480]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005c6a:	4694      	mov	ip, r2
 8005c6c:	4463      	add	r3, ip
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4975      	ldr	r1, [pc, #468]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005c78:	468c      	mov	ip, r1
 8005c7a:	4463      	add	r3, ip
 8005c7c:	0c12      	lsrs	r2, r2, #16
 8005c7e:	0412      	lsls	r2, r2, #16
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4a70      	ldr	r2, [pc, #448]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005c8a:	4694      	mov	ip, r2
 8005c8c:	4463      	add	r3, ip
 8005c8e:	6859      	ldr	r1, [r3, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	889b      	ldrh	r3, [r3, #4]
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	009a      	lsls	r2, r3, #2
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	486a      	ldr	r0, [pc, #424]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005ca2:	4684      	mov	ip, r0
 8005ca4:	4463      	add	r3, ip
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4a66      	ldr	r2, [pc, #408]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005cb2:	4694      	mov	ip, r2
 8005cb4:	4463      	add	r3, ip
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4963      	ldr	r1, [pc, #396]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005cc0:	468c      	mov	ip, r1
 8005cc2:	4463      	add	r3, ip
 8005cc4:	0412      	lsls	r2, r2, #16
 8005cc6:	0c12      	lsrs	r2, r2, #16
 8005cc8:	605a      	str	r2, [r3, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b3e      	cmp	r3, #62	; 0x3e
 8005cd0:	d920      	bls.n	8005d14 <USB_ActivateEndpoint+0x24c>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	221f      	movs	r2, #31
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d102      	bne.n	8005cea <USB_ActivateEndpoint+0x222>
 8005ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4a56      	ldr	r2, [pc, #344]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005cf2:	4694      	mov	ip, r2
 8005cf4:	4463      	add	r3, ip
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cfa:	069b      	lsls	r3, r3, #26
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4951      	ldr	r1, [pc, #324]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005d06:	468c      	mov	ip, r1
 8005d08:	4463      	add	r3, ip
 8005d0a:	2180      	movs	r1, #128	; 0x80
 8005d0c:	0609      	lsls	r1, r1, #24
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	e042      	b.n	8005d9a <USB_ActivateEndpoint+0x2d2>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d121      	bne.n	8005d60 <USB_ActivateEndpoint+0x298>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4a4a      	ldr	r2, [pc, #296]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005d24:	4694      	mov	ip, r2
 8005d26:	4463      	add	r3, ip
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4946      	ldr	r1, [pc, #280]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005d32:	468c      	mov	ip, r1
 8005d34:	4463      	add	r3, ip
 8005d36:	4948      	ldr	r1, [pc, #288]	; (8005e58 <USB_ActivateEndpoint+0x390>)
 8005d38:	400a      	ands	r2, r1
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4a42      	ldr	r2, [pc, #264]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005d44:	4694      	mov	ip, r2
 8005d46:	4463      	add	r3, ip
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	493e      	ldr	r1, [pc, #248]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005d52:	468c      	mov	ip, r1
 8005d54:	4463      	add	r3, ip
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	0609      	lsls	r1, r1, #24
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
 8005d5e:	e01c      	b.n	8005d9a <USB_ActivateEndpoint+0x2d2>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	667b      	str	r3, [r7, #100]	; 0x64
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d002      	beq.n	8005d78 <USB_ActivateEndpoint+0x2b0>
 8005d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d74:	3301      	adds	r3, #1
 8005d76:	667b      	str	r3, [r7, #100]	; 0x64
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4a33      	ldr	r2, [pc, #204]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005d80:	4694      	mov	ip, r2
 8005d82:	4463      	add	r3, ip
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d88:	069a      	lsls	r2, r3, #26
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	482e      	ldr	r0, [pc, #184]	; (8005e4c <USB_ActivateEndpoint+0x384>)
 8005d92:	4684      	mov	ip, r0
 8005d94:	4463      	add	r3, ip
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	18d3      	adds	r3, r2, r3
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	623b      	str	r3, [r7, #32]
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	01db      	lsls	r3, r3, #7
 8005dae:	4013      	ands	r3, r2
 8005db0:	d011      	beq.n	8005dd6 <USB_ActivateEndpoint+0x30e>
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	18d3      	adds	r3, r2, r3
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <USB_ActivateEndpoint+0x380>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	18d3      	adds	r3, r2, r3
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	4922      	ldr	r1, [pc, #136]	; (8005e5c <USB_ActivateEndpoint+0x394>)
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	18d3      	adds	r3, r2, r3
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <USB_ActivateEndpoint+0x398>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2280      	movs	r2, #128	; 0x80
 8005dec:	0152      	lsls	r2, r2, #5
 8005dee:	4053      	eors	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2280      	movs	r2, #128	; 0x80
 8005df6:	0192      	lsls	r2, r2, #6
 8005df8:	4053      	eors	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	18d3      	adds	r3, r2, r3
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	490e      	ldr	r1, [pc, #56]	; (8005e44 <USB_ActivateEndpoint+0x37c>)
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	e16d      	b.n	80060ec <USB_ActivateEndpoint+0x624>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	78db      	ldrb	r3, [r3, #3]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d127      	bne.n	8005e68 <USB_ActivateEndpoint+0x3a0>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	18d3      	adds	r3, r2, r3
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <USB_ActivateEndpoint+0x380>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	18d3      	adds	r3, r2, r3
 8005e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e36:	490b      	ldr	r1, [pc, #44]	; (8005e64 <USB_ActivateEndpoint+0x39c>)
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e026      	b.n	8005e8c <USB_ActivateEndpoint+0x3c4>
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	07ff898f 	.word	0x07ff898f
 8005e44:	00008080 	.word	0x00008080
 8005e48:	07ff8f8f 	.word	0x07ff8f8f
 8005e4c:	40009800 	.word	0x40009800
 8005e50:	000080c0 	.word	0x000080c0
 8005e54:	07ff8fbf 	.word	0x07ff8fbf
 8005e58:	83ffffff 	.word	0x83ffffff
 8005e5c:	0000c080 	.word	0x0000c080
 8005e60:	07ffbf8f 	.word	0x07ffbf8f
 8005e64:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	18d3      	adds	r3, r2, r3
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4aa1      	ldr	r2, [pc, #644]	; (80060fc <USB_ActivateEndpoint+0x634>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	18d3      	adds	r3, r2, r3
 8005e84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e86:	499e      	ldr	r1, [pc, #632]	; (8006100 <USB_ActivateEndpoint+0x638>)
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	00db      	lsls	r3, r3, #3
 8005e92:	4a9c      	ldr	r2, [pc, #624]	; (8006104 <USB_ActivateEndpoint+0x63c>)
 8005e94:	4694      	mov	ip, r2
 8005e96:	4463      	add	r3, ip
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4998      	ldr	r1, [pc, #608]	; (8006104 <USB_ActivateEndpoint+0x63c>)
 8005ea2:	468c      	mov	ip, r1
 8005ea4:	4463      	add	r3, ip
 8005ea6:	0c12      	lsrs	r2, r2, #16
 8005ea8:	0412      	lsls	r2, r2, #16
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4a94      	ldr	r2, [pc, #592]	; (8006104 <USB_ActivateEndpoint+0x63c>)
 8005eb4:	4694      	mov	ip, r2
 8005eb6:	4463      	add	r3, ip
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	88db      	ldrh	r3, [r3, #6]
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	009a      	lsls	r2, r3, #2
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	488e      	ldr	r0, [pc, #568]	; (8006104 <USB_ActivateEndpoint+0x63c>)
 8005ecc:	4684      	mov	ip, r0
 8005ece:	4463      	add	r3, ip
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4a8a      	ldr	r2, [pc, #552]	; (8006104 <USB_ActivateEndpoint+0x63c>)
 8005edc:	4694      	mov	ip, r2
 8005ede:	4463      	add	r3, ip
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	4986      	ldr	r1, [pc, #536]	; (8006104 <USB_ActivateEndpoint+0x63c>)
 8005eea:	468c      	mov	ip, r1
 8005eec:	4463      	add	r3, ip
 8005eee:	0c12      	lsrs	r2, r2, #16
 8005ef0:	0412      	lsls	r2, r2, #16
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4a82      	ldr	r2, [pc, #520]	; (8006104 <USB_ActivateEndpoint+0x63c>)
 8005efc:	4694      	mov	ip, r2
 8005efe:	4463      	add	r3, ip
 8005f00:	6859      	ldr	r1, [r3, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	891b      	ldrh	r3, [r3, #8]
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	009a      	lsls	r2, r3, #2
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	487c      	ldr	r0, [pc, #496]	; (8006104 <USB_ActivateEndpoint+0x63c>)
 8005f14:	4684      	mov	ip, r0
 8005f16:	4463      	add	r3, ip
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d169      	bne.n	8005ff8 <USB_ActivateEndpoint+0x530>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	18d3      	adds	r3, r2, r3
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	01db      	lsls	r3, r3, #7
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d011      	beq.n	8005f60 <USB_ActivateEndpoint+0x498>
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	18d3      	adds	r3, r2, r3
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a6f      	ldr	r2, [pc, #444]	; (8006108 <USB_ActivateEndpoint+0x640>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	18d3      	adds	r3, r2, r3
 8005f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f5a:	496c      	ldr	r1, [pc, #432]	; (800610c <USB_ActivateEndpoint+0x644>)
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	18d3      	adds	r3, r2, r3
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	2240      	movs	r2, #64	; 0x40
 8005f72:	4013      	ands	r3, r2
 8005f74:	d011      	beq.n	8005f9a <USB_ActivateEndpoint+0x4d2>
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	18d3      	adds	r3, r2, r3
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a61      	ldr	r2, [pc, #388]	; (8006108 <USB_ActivateEndpoint+0x640>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	18d3      	adds	r3, r2, r3
 8005f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f94:	495e      	ldr	r1, [pc, #376]	; (8006110 <USB_ActivateEndpoint+0x648>)
 8005f96:	430a      	orrs	r2, r1
 8005f98:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	18d3      	adds	r3, r2, r3
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a5b      	ldr	r2, [pc, #364]	; (8006114 <USB_ActivateEndpoint+0x64c>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	0152      	lsls	r2, r2, #5
 8005fb2:	4053      	eors	r3, r2
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	2280      	movs	r2, #128	; 0x80
 8005fba:	0192      	lsls	r2, r2, #6
 8005fbc:	4053      	eors	r3, r2
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	18d3      	adds	r3, r2, r3
 8005fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fcc:	494c      	ldr	r1, [pc, #304]	; (8006100 <USB_ActivateEndpoint+0x638>)
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	18d3      	adds	r3, r2, r3
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a4e      	ldr	r2, [pc, #312]	; (8006118 <USB_ActivateEndpoint+0x650>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	18d3      	adds	r3, r2, r3
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	4943      	ldr	r1, [pc, #268]	; (8006100 <USB_ActivateEndpoint+0x638>)
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	e079      	b.n	80060ec <USB_ActivateEndpoint+0x624>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	18d3      	adds	r3, r2, r3
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	657b      	str	r3, [r7, #84]	; 0x54
 8006006:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006008:	2380      	movs	r3, #128	; 0x80
 800600a:	01db      	lsls	r3, r3, #7
 800600c:	4013      	ands	r3, r2
 800600e:	d011      	beq.n	8006034 <USB_ActivateEndpoint+0x56c>
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	18d3      	adds	r3, r2, r3
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a3a      	ldr	r2, [pc, #232]	; (8006108 <USB_ActivateEndpoint+0x640>)
 800601e:	4013      	ands	r3, r2
 8006020:	653b      	str	r3, [r7, #80]	; 0x50
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	18d3      	adds	r3, r2, r3
 800602c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800602e:	4937      	ldr	r1, [pc, #220]	; (800610c <USB_ActivateEndpoint+0x644>)
 8006030:	430a      	orrs	r2, r1
 8006032:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	18d3      	adds	r3, r2, r3
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006044:	2240      	movs	r2, #64	; 0x40
 8006046:	4013      	ands	r3, r2
 8006048:	d011      	beq.n	800606e <USB_ActivateEndpoint+0x5a6>
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <USB_ActivateEndpoint+0x640>)
 8006058:	4013      	ands	r3, r2
 800605a:	64bb      	str	r3, [r7, #72]	; 0x48
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	18d3      	adds	r3, r2, r3
 8006066:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006068:	4929      	ldr	r1, [pc, #164]	; (8006110 <USB_ActivateEndpoint+0x648>)
 800606a:	430a      	orrs	r2, r1
 800606c:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	78db      	ldrb	r3, [r3, #3]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d016      	beq.n	80060a4 <USB_ActivateEndpoint+0x5dc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	18d3      	adds	r3, r2, r3
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a25      	ldr	r2, [pc, #148]	; (8006118 <USB_ActivateEndpoint+0x650>)
 8006084:	4013      	ands	r3, r2
 8006086:	643b      	str	r3, [r7, #64]	; 0x40
 8006088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608a:	2220      	movs	r2, #32
 800608c:	4053      	eors	r3, r2
 800608e:	643b      	str	r3, [r7, #64]	; 0x40
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	18d3      	adds	r3, r2, r3
 800609a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800609c:	4918      	ldr	r1, [pc, #96]	; (8006100 <USB_ActivateEndpoint+0x638>)
 800609e:	430a      	orrs	r2, r1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e011      	b.n	80060c8 <USB_ActivateEndpoint+0x600>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	18d3      	adds	r3, r2, r3
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <USB_ActivateEndpoint+0x650>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	647b      	str	r3, [r7, #68]	; 0x44
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	18d3      	adds	r3, r2, r3
 80060c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c2:	490f      	ldr	r1, [pc, #60]	; (8006100 <USB_ActivateEndpoint+0x638>)
 80060c4:	430a      	orrs	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a0f      	ldr	r2, [pc, #60]	; (8006114 <USB_ActivateEndpoint+0x64c>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	18d3      	adds	r3, r2, r3
 80060e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060e6:	4906      	ldr	r1, [pc, #24]	; (8006100 <USB_ActivateEndpoint+0x638>)
 80060e8:	430a      	orrs	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80060ec:	236f      	movs	r3, #111	; 0x6f
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	781b      	ldrb	r3, [r3, #0]
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b01c      	add	sp, #112	; 0x70
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	07ff8e8f 	.word	0x07ff8e8f
 8006100:	00008080 	.word	0x00008080
 8006104:	40009800 	.word	0x40009800
 8006108:	07ff8f8f 	.word	0x07ff8f8f
 800610c:	0000c080 	.word	0x0000c080
 8006110:	000080c0 	.word	0x000080c0
 8006114:	07ffbf8f 	.word	0x07ffbf8f
 8006118:	07ff8fbf 	.word	0x07ff8fbf

0800611c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b096      	sub	sp, #88	; 0x58
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	7a9b      	ldrb	r3, [r3, #10]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d164      	bne.n	80061f8 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d02f      	beq.n	8006196 <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	18d3      	adds	r3, r2, r3
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	2240      	movs	r2, #64	; 0x40
 8006148:	4013      	ands	r3, r2
 800614a:	d011      	beq.n	8006170 <USB_DeactivateEndpoint+0x54>
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	18d3      	adds	r3, r2, r3
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a9d      	ldr	r2, [pc, #628]	; (80063d0 <USB_DeactivateEndpoint+0x2b4>)
 800615a:	4013      	ands	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	18d3      	adds	r3, r2, r3
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	499a      	ldr	r1, [pc, #616]	; (80063d4 <USB_DeactivateEndpoint+0x2b8>)
 800616c:	430a      	orrs	r2, r1
 800616e:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	18d3      	adds	r3, r2, r3
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a96      	ldr	r2, [pc, #600]	; (80063d8 <USB_DeactivateEndpoint+0x2bc>)
 800617e:	4013      	ands	r3, r2
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	18d3      	adds	r3, r2, r3
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	4993      	ldr	r1, [pc, #588]	; (80063dc <USB_DeactivateEndpoint+0x2c0>)
 8006190:	430a      	orrs	r2, r1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e117      	b.n	80063c6 <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	18d3      	adds	r3, r2, r3
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	2380      	movs	r3, #128	; 0x80
 80061a8:	01db      	lsls	r3, r3, #7
 80061aa:	4013      	ands	r3, r2
 80061ac:	d011      	beq.n	80061d2 <USB_DeactivateEndpoint+0xb6>
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	18d3      	adds	r3, r2, r3
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a85      	ldr	r2, [pc, #532]	; (80063d0 <USB_DeactivateEndpoint+0x2b4>)
 80061bc:	4013      	ands	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	18d3      	adds	r3, r2, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4984      	ldr	r1, [pc, #528]	; (80063e0 <USB_DeactivateEndpoint+0x2c4>)
 80061ce:	430a      	orrs	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	18d3      	adds	r3, r2, r3
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a81      	ldr	r2, [pc, #516]	; (80063e4 <USB_DeactivateEndpoint+0x2c8>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	18d3      	adds	r3, r2, r3
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	497a      	ldr	r1, [pc, #488]	; (80063dc <USB_DeactivateEndpoint+0x2c0>)
 80061f2:	430a      	orrs	r2, r1
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	e0e6      	b.n	80063c6 <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d171      	bne.n	80062e4 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	18d3      	adds	r3, r2, r3
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	63bb      	str	r3, [r7, #56]	; 0x38
 800620e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	01db      	lsls	r3, r3, #7
 8006214:	4013      	ands	r3, r2
 8006216:	d011      	beq.n	800623c <USB_DeactivateEndpoint+0x120>
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	18d3      	adds	r3, r2, r3
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a6a      	ldr	r2, [pc, #424]	; (80063d0 <USB_DeactivateEndpoint+0x2b4>)
 8006226:	4013      	ands	r3, r2
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	18d3      	adds	r3, r2, r3
 8006234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006236:	496a      	ldr	r1, [pc, #424]	; (80063e0 <USB_DeactivateEndpoint+0x2c4>)
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	18d3      	adds	r3, r2, r3
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	633b      	str	r3, [r7, #48]	; 0x30
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2240      	movs	r2, #64	; 0x40
 800624e:	4013      	ands	r3, r2
 8006250:	d011      	beq.n	8006276 <USB_DeactivateEndpoint+0x15a>
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	18d3      	adds	r3, r2, r3
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5c      	ldr	r2, [pc, #368]	; (80063d0 <USB_DeactivateEndpoint+0x2b4>)
 8006260:	4013      	ands	r3, r2
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	18d3      	adds	r3, r2, r3
 800626e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006270:	4958      	ldr	r1, [pc, #352]	; (80063d4 <USB_DeactivateEndpoint+0x2b8>)
 8006272:	430a      	orrs	r2, r1
 8006274:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	18d3      	adds	r3, r2, r3
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a53      	ldr	r2, [pc, #332]	; (80063d0 <USB_DeactivateEndpoint+0x2b4>)
 8006284:	4013      	ands	r3, r2
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	18d3      	adds	r3, r2, r3
 8006292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006294:	494f      	ldr	r1, [pc, #316]	; (80063d4 <USB_DeactivateEndpoint+0x2b8>)
 8006296:	430a      	orrs	r2, r1
 8006298:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a4f      	ldr	r2, [pc, #316]	; (80063e4 <USB_DeactivateEndpoint+0x2c8>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	18d3      	adds	r3, r2, r3
 80062b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b8:	4948      	ldr	r1, [pc, #288]	; (80063dc <USB_DeactivateEndpoint+0x2c0>)
 80062ba:	430a      	orrs	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	18d3      	adds	r3, r2, r3
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a43      	ldr	r2, [pc, #268]	; (80063d8 <USB_DeactivateEndpoint+0x2bc>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	623b      	str	r3, [r7, #32]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	18d3      	adds	r3, r2, r3
 80062da:	6a3a      	ldr	r2, [r7, #32]
 80062dc:	493f      	ldr	r1, [pc, #252]	; (80063dc <USB_DeactivateEndpoint+0x2c0>)
 80062de:	430a      	orrs	r2, r1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e070      	b.n	80063c6 <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	18d3      	adds	r3, r2, r3
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	657b      	str	r3, [r7, #84]	; 0x54
 80062f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	01db      	lsls	r3, r3, #7
 80062f8:	4013      	ands	r3, r2
 80062fa:	d011      	beq.n	8006320 <USB_DeactivateEndpoint+0x204>
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	18d3      	adds	r3, r2, r3
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a31      	ldr	r2, [pc, #196]	; (80063d0 <USB_DeactivateEndpoint+0x2b4>)
 800630a:	4013      	ands	r3, r2
 800630c:	653b      	str	r3, [r7, #80]	; 0x50
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	18d3      	adds	r3, r2, r3
 8006318:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800631a:	4931      	ldr	r1, [pc, #196]	; (80063e0 <USB_DeactivateEndpoint+0x2c4>)
 800631c:	430a      	orrs	r2, r1
 800631e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	18d3      	adds	r3, r2, r3
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800632e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006330:	2240      	movs	r2, #64	; 0x40
 8006332:	4013      	ands	r3, r2
 8006334:	d011      	beq.n	800635a <USB_DeactivateEndpoint+0x23e>
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	18d3      	adds	r3, r2, r3
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a23      	ldr	r2, [pc, #140]	; (80063d0 <USB_DeactivateEndpoint+0x2b4>)
 8006344:	4013      	ands	r3, r2
 8006346:	64bb      	str	r3, [r7, #72]	; 0x48
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	18d3      	adds	r3, r2, r3
 8006352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006354:	491f      	ldr	r1, [pc, #124]	; (80063d4 <USB_DeactivateEndpoint+0x2b8>)
 8006356:	430a      	orrs	r2, r1
 8006358:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	18d3      	adds	r3, r2, r3
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1a      	ldr	r2, [pc, #104]	; (80063d0 <USB_DeactivateEndpoint+0x2b4>)
 8006368:	4013      	ands	r3, r2
 800636a:	647b      	str	r3, [r7, #68]	; 0x44
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	18d3      	adds	r3, r2, r3
 8006376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006378:	4919      	ldr	r1, [pc, #100]	; (80063e0 <USB_DeactivateEndpoint+0x2c4>)
 800637a:	430a      	orrs	r2, r1
 800637c:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	18d3      	adds	r3, r2, r3
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <USB_DeactivateEndpoint+0x2bc>)
 800638c:	4013      	ands	r3, r2
 800638e:	643b      	str	r3, [r7, #64]	; 0x40
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	18d3      	adds	r3, r2, r3
 800639a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800639c:	490f      	ldr	r1, [pc, #60]	; (80063dc <USB_DeactivateEndpoint+0x2c0>)
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	18d3      	adds	r3, r2, r3
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a0d      	ldr	r2, [pc, #52]	; (80063e4 <USB_DeactivateEndpoint+0x2c8>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	18d3      	adds	r3, r2, r3
 80063be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063c0:	4906      	ldr	r1, [pc, #24]	; (80063dc <USB_DeactivateEndpoint+0x2c0>)
 80063c2:	430a      	orrs	r2, r1
 80063c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b016      	add	sp, #88	; 0x58
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	07ff8f8f 	.word	0x07ff8f8f
 80063d4:	000080c0 	.word	0x000080c0
 80063d8:	07ff8fbf 	.word	0x07ff8fbf
 80063dc:	00008080 	.word	0x00008080
 80063e0:	0000c080 	.word	0x0000c080
 80063e4:	07ffbf8f 	.word	0x07ffbf8f

080063e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b097      	sub	sp, #92	; 0x5c
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d001      	beq.n	80063fe <USB_EPStartXfer+0x16>
 80063fa:	f000 fd24 	bl	8006e46 <USB_EPStartXfer+0xa5e>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	d903      	bls.n	8006412 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	657b      	str	r3, [r7, #84]	; 0x54
 8006410:	e002      	b.n	8006418 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	7a9b      	ldrb	r3, [r3, #10]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d12b      	bne.n	8006478 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	6959      	ldr	r1, [r3, #20]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	889a      	ldrh	r2, [r3, #4]
 8006428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800642a:	b29b      	uxth	r3, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 f9b3 	bl	8007798 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	4ade      	ldr	r2, [pc, #888]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800643a:	4694      	mov	ip, r2
 800643c:	4463      	add	r3, ip
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	49db      	ldr	r1, [pc, #876]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 8006448:	468c      	mov	ip, r1
 800644a:	4463      	add	r3, ip
 800644c:	0412      	lsls	r2, r2, #16
 800644e:	0c12      	lsrs	r2, r2, #16
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4ad6      	ldr	r2, [pc, #856]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800645a:	4694      	mov	ip, r2
 800645c:	4463      	add	r3, ip
 800645e:	6819      	ldr	r1, [r3, #0]
 8006460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006462:	041a      	lsls	r2, r3, #16
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	48d2      	ldr	r0, [pc, #840]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800646c:	4684      	mov	ip, r0
 800646e:	4463      	add	r3, ip
 8006470:	430a      	orrs	r2, r1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f000 fccb 	bl	8006e0e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	78db      	ldrb	r3, [r3, #3]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d000      	beq.n	8006482 <USB_EPStartXfer+0x9a>
 8006480:	e35e      	b.n	8006b40 <USB_EPStartXfer+0x758>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	429a      	cmp	r2, r3
 800648c:	d800      	bhi.n	8006490 <USB_EPStartXfer+0xa8>
 800648e:	e309      	b.n	8006aa4 <USB_EPStartXfer+0x6bc>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	18d3      	adds	r3, r2, r3
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4ac6      	ldr	r2, [pc, #792]	; (80067b8 <USB_EPStartXfer+0x3d0>)
 800649e:	4013      	ands	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	18d3      	adds	r3, r2, r3
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	49c3      	ldr	r1, [pc, #780]	; (80067bc <USB_EPStartXfer+0x3d4>)
 80064b0:	430a      	orrs	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6a1a      	ldr	r2, [r3, #32]
 80064b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	18d3      	adds	r3, r2, r3
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2240      	movs	r2, #64	; 0x40
 80064ce:	4013      	ands	r3, r2
 80064d0:	d100      	bne.n	80064d4 <USB_EPStartXfer+0xec>
 80064d2:	e177      	b.n	80067c4 <USB_EPStartXfer+0x3dc>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d172      	bne.n	80065c2 <USB_EPStartXfer+0x1da>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	4ab4      	ldr	r2, [pc, #720]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80064e4:	4694      	mov	ip, r2
 80064e6:	4463      	add	r3, ip
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	49b0      	ldr	r1, [pc, #704]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80064f2:	468c      	mov	ip, r1
 80064f4:	4463      	add	r3, ip
 80064f6:	0412      	lsls	r2, r2, #16
 80064f8:	0c12      	lsrs	r2, r2, #16
 80064fa:	605a      	str	r2, [r3, #4]
 80064fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064fe:	2b3e      	cmp	r3, #62	; 0x3e
 8006500:	d91e      	bls.n	8006540 <USB_EPStartXfer+0x158>
 8006502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	653b      	str	r3, [r7, #80]	; 0x50
 8006508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650a:	221f      	movs	r2, #31
 800650c:	4013      	ands	r3, r2
 800650e:	d102      	bne.n	8006516 <USB_EPStartXfer+0x12e>
 8006510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006512:	3b01      	subs	r3, #1
 8006514:	653b      	str	r3, [r7, #80]	; 0x50
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4aa5      	ldr	r2, [pc, #660]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800651e:	4694      	mov	ip, r2
 8006520:	4463      	add	r3, ip
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006526:	069b      	lsls	r3, r3, #26
 8006528:	431a      	orrs	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	49a0      	ldr	r1, [pc, #640]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 8006532:	468c      	mov	ip, r1
 8006534:	4463      	add	r3, ip
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	0609      	lsls	r1, r1, #24
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	e065      	b.n	800660c <USB_EPStartXfer+0x224>
 8006540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006542:	2b00      	cmp	r3, #0
 8006544:	d121      	bne.n	800658a <USB_EPStartXfer+0x1a2>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4a99      	ldr	r2, [pc, #612]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800654e:	4694      	mov	ip, r2
 8006550:	4463      	add	r3, ip
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	4996      	ldr	r1, [pc, #600]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800655c:	468c      	mov	ip, r1
 800655e:	4463      	add	r3, ip
 8006560:	4997      	ldr	r1, [pc, #604]	; (80067c0 <USB_EPStartXfer+0x3d8>)
 8006562:	400a      	ands	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4a91      	ldr	r2, [pc, #580]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800656e:	4694      	mov	ip, r2
 8006570:	4463      	add	r3, ip
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	498e      	ldr	r1, [pc, #568]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800657c:	468c      	mov	ip, r1
 800657e:	4463      	add	r3, ip
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	0609      	lsls	r1, r1, #24
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
 8006588:	e040      	b.n	800660c <USB_EPStartXfer+0x224>
 800658a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800658c:	085b      	lsrs	r3, r3, #1
 800658e:	653b      	str	r3, [r7, #80]	; 0x50
 8006590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006592:	2201      	movs	r2, #1
 8006594:	4013      	ands	r3, r2
 8006596:	d002      	beq.n	800659e <USB_EPStartXfer+0x1b6>
 8006598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800659a:	3301      	adds	r3, #1
 800659c:	653b      	str	r3, [r7, #80]	; 0x50
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4a83      	ldr	r2, [pc, #524]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80065a6:	4694      	mov	ip, r2
 80065a8:	4463      	add	r3, ip
 80065aa:	6859      	ldr	r1, [r3, #4]
 80065ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ae:	069a      	lsls	r2, r3, #26
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	487f      	ldr	r0, [pc, #508]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80065b8:	4684      	mov	ip, r0
 80065ba:	4463      	add	r3, ip
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
 80065c0:	e024      	b.n	800660c <USB_EPStartXfer+0x224>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d120      	bne.n	800660c <USB_EPStartXfer+0x224>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4a78      	ldr	r2, [pc, #480]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80065d2:	4694      	mov	ip, r2
 80065d4:	4463      	add	r3, ip
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	4975      	ldr	r1, [pc, #468]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80065e0:	468c      	mov	ip, r1
 80065e2:	4463      	add	r3, ip
 80065e4:	0412      	lsls	r2, r2, #16
 80065e6:	0c12      	lsrs	r2, r2, #16
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	4a70      	ldr	r2, [pc, #448]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80065f2:	4694      	mov	ip, r2
 80065f4:	4463      	add	r3, ip
 80065f6:	6859      	ldr	r1, [r3, #4]
 80065f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fa:	041a      	lsls	r2, r3, #16
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	486c      	ldr	r0, [pc, #432]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 8006604:	4684      	mov	ip, r0
 8006606:	4463      	add	r3, ip
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800660c:	201a      	movs	r0, #26
 800660e:	183b      	adds	r3, r7, r0
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	8912      	ldrh	r2, [r2, #8]
 8006614:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6959      	ldr	r1, [r3, #20]
 800661a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661c:	b29c      	uxth	r4, r3
 800661e:	183b      	adds	r3, r7, r0
 8006620:	881a      	ldrh	r2, [r3, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	0023      	movs	r3, r4
 8006626:	f001 f8b7 	bl	8007798 <USB_WritePMA>
            ep->xfer_buff += len;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006630:	18d2      	adds	r2, r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6a1a      	ldr	r2, [r3, #32]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	d906      	bls.n	8006650 <USB_EPStartXfer+0x268>
            {
              ep->xfer_len_db -= len;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6a1a      	ldr	r2, [r3, #32]
 8006646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006648:	1ad2      	subs	r2, r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	621a      	str	r2, [r3, #32]
 800664e:	e005      	b.n	800665c <USB_EPStartXfer+0x274>
            }
            else
            {
              len = ep->xfer_len_db;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2200      	movs	r2, #0
 800665a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d172      	bne.n	800674a <USB_EPStartXfer+0x362>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4a52      	ldr	r2, [pc, #328]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800666c:	4694      	mov	ip, r2
 800666e:	4463      	add	r3, ip
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	494e      	ldr	r1, [pc, #312]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800667a:	468c      	mov	ip, r1
 800667c:	4463      	add	r3, ip
 800667e:	0412      	lsls	r2, r2, #16
 8006680:	0c12      	lsrs	r2, r2, #16
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006686:	2b3e      	cmp	r3, #62	; 0x3e
 8006688:	d91e      	bls.n	80066c8 <USB_EPStartXfer+0x2e0>
 800668a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006692:	221f      	movs	r2, #31
 8006694:	4013      	ands	r3, r2
 8006696:	d102      	bne.n	800669e <USB_EPStartXfer+0x2b6>
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	3b01      	subs	r3, #1
 800669c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	4a43      	ldr	r2, [pc, #268]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80066a6:	4694      	mov	ip, r2
 80066a8:	4463      	add	r3, ip
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	069b      	lsls	r3, r3, #26
 80066b0:	431a      	orrs	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	493e      	ldr	r1, [pc, #248]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80066ba:	468c      	mov	ip, r1
 80066bc:	4463      	add	r3, ip
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	0609      	lsls	r1, r1, #24
 80066c2:	430a      	orrs	r2, r1
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e065      	b.n	8006794 <USB_EPStartXfer+0x3ac>
 80066c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d121      	bne.n	8006712 <USB_EPStartXfer+0x32a>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	4a37      	ldr	r2, [pc, #220]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80066d6:	4694      	mov	ip, r2
 80066d8:	4463      	add	r3, ip
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4934      	ldr	r1, [pc, #208]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80066e4:	468c      	mov	ip, r1
 80066e6:	4463      	add	r3, ip
 80066e8:	4935      	ldr	r1, [pc, #212]	; (80067c0 <USB_EPStartXfer+0x3d8>)
 80066ea:	400a      	ands	r2, r1
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4a2f      	ldr	r2, [pc, #188]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 80066f6:	4694      	mov	ip, r2
 80066f8:	4463      	add	r3, ip
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	492c      	ldr	r1, [pc, #176]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 8006704:	468c      	mov	ip, r1
 8006706:	4463      	add	r3, ip
 8006708:	2180      	movs	r1, #128	; 0x80
 800670a:	0609      	lsls	r1, r1, #24
 800670c:	430a      	orrs	r2, r1
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e040      	b.n	8006794 <USB_EPStartXfer+0x3ac>
 8006712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006714:	085b      	lsrs	r3, r3, #1
 8006716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800671a:	2201      	movs	r2, #1
 800671c:	4013      	ands	r3, r2
 800671e:	d002      	beq.n	8006726 <USB_EPStartXfer+0x33e>
 8006720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006722:	3301      	adds	r3, #1
 8006724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800672e:	4694      	mov	ip, r2
 8006730:	4463      	add	r3, ip
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006736:	069a      	lsls	r2, r3, #26
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	481d      	ldr	r0, [pc, #116]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 8006740:	4684      	mov	ip, r0
 8006742:	4463      	add	r3, ip
 8006744:	430a      	orrs	r2, r1
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	e024      	b.n	8006794 <USB_EPStartXfer+0x3ac>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d120      	bne.n	8006794 <USB_EPStartXfer+0x3ac>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	4a16      	ldr	r2, [pc, #88]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800675a:	4694      	mov	ip, r2
 800675c:	4463      	add	r3, ip
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4913      	ldr	r1, [pc, #76]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 8006768:	468c      	mov	ip, r1
 800676a:	4463      	add	r3, ip
 800676c:	0412      	lsls	r2, r2, #16
 800676e:	0c12      	lsrs	r2, r2, #16
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4a0e      	ldr	r2, [pc, #56]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800677a:	4694      	mov	ip, r2
 800677c:	4463      	add	r3, ip
 800677e:	6819      	ldr	r1, [r3, #0]
 8006780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006782:	041a      	lsls	r2, r3, #16
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	480a      	ldr	r0, [pc, #40]	; (80067b4 <USB_EPStartXfer+0x3cc>)
 800678c:	4684      	mov	ip, r0
 800678e:	4463      	add	r3, ip
 8006790:	430a      	orrs	r2, r1
 8006792:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006794:	201a      	movs	r0, #26
 8006796:	183b      	adds	r3, r7, r0
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	88d2      	ldrh	r2, [r2, #6]
 800679c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6959      	ldr	r1, [r3, #20]
 80067a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a4:	b29c      	uxth	r4, r3
 80067a6:	183b      	adds	r3, r7, r0
 80067a8:	881a      	ldrh	r2, [r3, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	0023      	movs	r3, r4
 80067ae:	f000 fff3 	bl	8007798 <USB_WritePMA>
 80067b2:	e32c      	b.n	8006e0e <USB_EPStartXfer+0xa26>
 80067b4:	40009800 	.word	0x40009800
 80067b8:	07ff8f8f 	.word	0x07ff8f8f
 80067bc:	00008180 	.word	0x00008180
 80067c0:	83ffffff 	.word	0x83ffffff
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d172      	bne.n	80068b2 <USB_EPStartXfer+0x4ca>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	4ad7      	ldr	r2, [pc, #860]	; (8006b30 <USB_EPStartXfer+0x748>)
 80067d4:	4694      	mov	ip, r2
 80067d6:	4463      	add	r3, ip
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	49d3      	ldr	r1, [pc, #844]	; (8006b30 <USB_EPStartXfer+0x748>)
 80067e2:	468c      	mov	ip, r1
 80067e4:	4463      	add	r3, ip
 80067e6:	0412      	lsls	r2, r2, #16
 80067e8:	0c12      	lsrs	r2, r2, #16
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ee:	2b3e      	cmp	r3, #62	; 0x3e
 80067f0:	d91e      	bls.n	8006830 <USB_EPStartXfer+0x448>
 80067f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fa:	221f      	movs	r2, #31
 80067fc:	4013      	ands	r3, r2
 80067fe:	d102      	bne.n	8006806 <USB_EPStartXfer+0x41e>
 8006800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006802:	3b01      	subs	r3, #1
 8006804:	64bb      	str	r3, [r7, #72]	; 0x48
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	4ac8      	ldr	r2, [pc, #800]	; (8006b30 <USB_EPStartXfer+0x748>)
 800680e:	4694      	mov	ip, r2
 8006810:	4463      	add	r3, ip
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006816:	069b      	lsls	r3, r3, #26
 8006818:	431a      	orrs	r2, r3
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	49c3      	ldr	r1, [pc, #780]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006822:	468c      	mov	ip, r1
 8006824:	4463      	add	r3, ip
 8006826:	2180      	movs	r1, #128	; 0x80
 8006828:	0609      	lsls	r1, r1, #24
 800682a:	430a      	orrs	r2, r1
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e065      	b.n	80068fc <USB_EPStartXfer+0x514>
 8006830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006832:	2b00      	cmp	r3, #0
 8006834:	d121      	bne.n	800687a <USB_EPStartXfer+0x492>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4abc      	ldr	r2, [pc, #752]	; (8006b30 <USB_EPStartXfer+0x748>)
 800683e:	4694      	mov	ip, r2
 8006840:	4463      	add	r3, ip
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	49b9      	ldr	r1, [pc, #740]	; (8006b30 <USB_EPStartXfer+0x748>)
 800684c:	468c      	mov	ip, r1
 800684e:	4463      	add	r3, ip
 8006850:	49b8      	ldr	r1, [pc, #736]	; (8006b34 <USB_EPStartXfer+0x74c>)
 8006852:	400a      	ands	r2, r1
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	4ab4      	ldr	r2, [pc, #720]	; (8006b30 <USB_EPStartXfer+0x748>)
 800685e:	4694      	mov	ip, r2
 8006860:	4463      	add	r3, ip
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	49b1      	ldr	r1, [pc, #708]	; (8006b30 <USB_EPStartXfer+0x748>)
 800686c:	468c      	mov	ip, r1
 800686e:	4463      	add	r3, ip
 8006870:	2180      	movs	r1, #128	; 0x80
 8006872:	0609      	lsls	r1, r1, #24
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e040      	b.n	80068fc <USB_EPStartXfer+0x514>
 800687a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006882:	2201      	movs	r2, #1
 8006884:	4013      	ands	r3, r2
 8006886:	d002      	beq.n	800688e <USB_EPStartXfer+0x4a6>
 8006888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800688a:	3301      	adds	r3, #1
 800688c:	64bb      	str	r3, [r7, #72]	; 0x48
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4aa6      	ldr	r2, [pc, #664]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006896:	4694      	mov	ip, r2
 8006898:	4463      	add	r3, ip
 800689a:	6819      	ldr	r1, [r3, #0]
 800689c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689e:	069a      	lsls	r2, r3, #26
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	48a2      	ldr	r0, [pc, #648]	; (8006b30 <USB_EPStartXfer+0x748>)
 80068a8:	4684      	mov	ip, r0
 80068aa:	4463      	add	r3, ip
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e024      	b.n	80068fc <USB_EPStartXfer+0x514>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d120      	bne.n	80068fc <USB_EPStartXfer+0x514>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4a9b      	ldr	r2, [pc, #620]	; (8006b30 <USB_EPStartXfer+0x748>)
 80068c2:	4694      	mov	ip, r2
 80068c4:	4463      	add	r3, ip
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4998      	ldr	r1, [pc, #608]	; (8006b30 <USB_EPStartXfer+0x748>)
 80068d0:	468c      	mov	ip, r1
 80068d2:	4463      	add	r3, ip
 80068d4:	0412      	lsls	r2, r2, #16
 80068d6:	0c12      	lsrs	r2, r2, #16
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4a93      	ldr	r2, [pc, #588]	; (8006b30 <USB_EPStartXfer+0x748>)
 80068e2:	4694      	mov	ip, r2
 80068e4:	4463      	add	r3, ip
 80068e6:	6819      	ldr	r1, [r3, #0]
 80068e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ea:	041a      	lsls	r2, r3, #16
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	488f      	ldr	r0, [pc, #572]	; (8006b30 <USB_EPStartXfer+0x748>)
 80068f4:	4684      	mov	ip, r0
 80068f6:	4463      	add	r3, ip
 80068f8:	430a      	orrs	r2, r1
 80068fa:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068fc:	201a      	movs	r0, #26
 80068fe:	183b      	adds	r3, r7, r0
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	88d2      	ldrh	r2, [r2, #6]
 8006904:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6959      	ldr	r1, [r3, #20]
 800690a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690c:	b29c      	uxth	r4, r3
 800690e:	183b      	adds	r3, r7, r0
 8006910:	881a      	ldrh	r2, [r3, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	0023      	movs	r3, r4
 8006916:	f000 ff3f 	bl	8007798 <USB_WritePMA>
            ep->xfer_buff += len;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695a      	ldr	r2, [r3, #20]
 800691e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006920:	18d2      	adds	r2, r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6a1a      	ldr	r2, [r3, #32]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	429a      	cmp	r2, r3
 8006930:	d906      	bls.n	8006940 <USB_EPStartXfer+0x558>
            {
              ep->xfer_len_db -= len;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6a1a      	ldr	r2, [r3, #32]
 8006936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006938:	1ad2      	subs	r2, r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	621a      	str	r2, [r3, #32]
 800693e:	e005      	b.n	800694c <USB_EPStartXfer+0x564>
            }
            else
            {
              len = ep->xfer_len_db;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2200      	movs	r2, #0
 800694a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d172      	bne.n	8006a3a <USB_EPStartXfer+0x652>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4a75      	ldr	r2, [pc, #468]	; (8006b30 <USB_EPStartXfer+0x748>)
 800695c:	4694      	mov	ip, r2
 800695e:	4463      	add	r3, ip
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4971      	ldr	r1, [pc, #452]	; (8006b30 <USB_EPStartXfer+0x748>)
 800696a:	468c      	mov	ip, r1
 800696c:	4463      	add	r3, ip
 800696e:	0412      	lsls	r2, r2, #16
 8006970:	0c12      	lsrs	r2, r2, #16
 8006972:	605a      	str	r2, [r3, #4]
 8006974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006976:	2b3e      	cmp	r3, #62	; 0x3e
 8006978:	d91e      	bls.n	80069b8 <USB_EPStartXfer+0x5d0>
 800697a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800697c:	095b      	lsrs	r3, r3, #5
 800697e:	647b      	str	r3, [r7, #68]	; 0x44
 8006980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006982:	221f      	movs	r2, #31
 8006984:	4013      	ands	r3, r2
 8006986:	d102      	bne.n	800698e <USB_EPStartXfer+0x5a6>
 8006988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800698a:	3b01      	subs	r3, #1
 800698c:	647b      	str	r3, [r7, #68]	; 0x44
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4a66      	ldr	r2, [pc, #408]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006996:	4694      	mov	ip, r2
 8006998:	4463      	add	r3, ip
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800699e:	069b      	lsls	r3, r3, #26
 80069a0:	431a      	orrs	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4961      	ldr	r1, [pc, #388]	; (8006b30 <USB_EPStartXfer+0x748>)
 80069aa:	468c      	mov	ip, r1
 80069ac:	4463      	add	r3, ip
 80069ae:	2180      	movs	r1, #128	; 0x80
 80069b0:	0609      	lsls	r1, r1, #24
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	e065      	b.n	8006a84 <USB_EPStartXfer+0x69c>
 80069b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d121      	bne.n	8006a02 <USB_EPStartXfer+0x61a>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	4a5a      	ldr	r2, [pc, #360]	; (8006b30 <USB_EPStartXfer+0x748>)
 80069c6:	4694      	mov	ip, r2
 80069c8:	4463      	add	r3, ip
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4957      	ldr	r1, [pc, #348]	; (8006b30 <USB_EPStartXfer+0x748>)
 80069d4:	468c      	mov	ip, r1
 80069d6:	4463      	add	r3, ip
 80069d8:	4956      	ldr	r1, [pc, #344]	; (8006b34 <USB_EPStartXfer+0x74c>)
 80069da:	400a      	ands	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4a52      	ldr	r2, [pc, #328]	; (8006b30 <USB_EPStartXfer+0x748>)
 80069e6:	4694      	mov	ip, r2
 80069e8:	4463      	add	r3, ip
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	494f      	ldr	r1, [pc, #316]	; (8006b30 <USB_EPStartXfer+0x748>)
 80069f4:	468c      	mov	ip, r1
 80069f6:	4463      	add	r3, ip
 80069f8:	2180      	movs	r1, #128	; 0x80
 80069fa:	0609      	lsls	r1, r1, #24
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	e040      	b.n	8006a84 <USB_EPStartXfer+0x69c>
 8006a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	647b      	str	r3, [r7, #68]	; 0x44
 8006a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	d002      	beq.n	8006a16 <USB_EPStartXfer+0x62e>
 8006a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a12:	3301      	adds	r3, #1
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4a44      	ldr	r2, [pc, #272]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006a1e:	4694      	mov	ip, r2
 8006a20:	4463      	add	r3, ip
 8006a22:	6859      	ldr	r1, [r3, #4]
 8006a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a26:	069a      	lsls	r2, r3, #26
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4840      	ldr	r0, [pc, #256]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006a30:	4684      	mov	ip, r0
 8006a32:	4463      	add	r3, ip
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	e024      	b.n	8006a84 <USB_EPStartXfer+0x69c>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d120      	bne.n	8006a84 <USB_EPStartXfer+0x69c>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	4a39      	ldr	r2, [pc, #228]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006a4a:	4694      	mov	ip, r2
 8006a4c:	4463      	add	r3, ip
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	4936      	ldr	r1, [pc, #216]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006a58:	468c      	mov	ip, r1
 8006a5a:	4463      	add	r3, ip
 8006a5c:	0412      	lsls	r2, r2, #16
 8006a5e:	0c12      	lsrs	r2, r2, #16
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	4a31      	ldr	r2, [pc, #196]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006a6a:	4694      	mov	ip, r2
 8006a6c:	4463      	add	r3, ip
 8006a6e:	6859      	ldr	r1, [r3, #4]
 8006a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a72:	041a      	lsls	r2, r3, #16
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	482d      	ldr	r0, [pc, #180]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006a7c:	4684      	mov	ip, r0
 8006a7e:	4463      	add	r3, ip
 8006a80:	430a      	orrs	r2, r1
 8006a82:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006a84:	201a      	movs	r0, #26
 8006a86:	183b      	adds	r3, r7, r0
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	8912      	ldrh	r2, [r2, #8]
 8006a8c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6959      	ldr	r1, [r3, #20]
 8006a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a94:	b29c      	uxth	r4, r3
 8006a96:	183b      	adds	r3, r7, r0
 8006a98:	881a      	ldrh	r2, [r3, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	0023      	movs	r3, r4
 8006a9e:	f000 fe7b 	bl	8007798 <USB_WritePMA>
 8006aa2:	e1b4      	b.n	8006e0e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	18d3      	adds	r3, r2, r3
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a20      	ldr	r2, [pc, #128]	; (8006b38 <USB_EPStartXfer+0x750>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	18d3      	adds	r3, r2, r3
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	491c      	ldr	r1, [pc, #112]	; (8006b3c <USB_EPStartXfer+0x754>)
 8006aca:	430a      	orrs	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006ad6:	4694      	mov	ip, r2
 8006ad8:	4463      	add	r3, ip
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4913      	ldr	r1, [pc, #76]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006ae4:	468c      	mov	ip, r1
 8006ae6:	4463      	add	r3, ip
 8006ae8:	0412      	lsls	r2, r2, #16
 8006aea:	0c12      	lsrs	r2, r2, #16
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4a0e      	ldr	r2, [pc, #56]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006af6:	4694      	mov	ip, r2
 8006af8:	4463      	add	r3, ip
 8006afa:	6819      	ldr	r1, [r3, #0]
 8006afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006afe:	041a      	lsls	r2, r3, #16
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	480a      	ldr	r0, [pc, #40]	; (8006b30 <USB_EPStartXfer+0x748>)
 8006b08:	4684      	mov	ip, r0
 8006b0a:	4463      	add	r3, ip
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b10:	201a      	movs	r0, #26
 8006b12:	183b      	adds	r3, r7, r0
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	88d2      	ldrh	r2, [r2, #6]
 8006b18:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6959      	ldr	r1, [r3, #20]
 8006b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b20:	b29c      	uxth	r4, r3
 8006b22:	183b      	adds	r3, r7, r0
 8006b24:	881a      	ldrh	r2, [r3, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	0023      	movs	r3, r4
 8006b2a:	f000 fe35 	bl	8007798 <USB_WritePMA>
 8006b2e:	e16e      	b.n	8006e0e <USB_EPStartXfer+0xa26>
 8006b30:	40009800 	.word	0x40009800
 8006b34:	83ffffff 	.word	0x83ffffff
 8006b38:	07ff8e8f 	.word	0x07ff8e8f
 8006b3c:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6a1a      	ldr	r2, [r3, #32]
 8006b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	18d3      	adds	r3, r2, r3
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d100      	bne.n	8006b60 <USB_EPStartXfer+0x778>
 8006b5e:	e0ab      	b.n	8006cb8 <USB_EPStartXfer+0x8d0>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d172      	bne.n	8006c4e <USB_EPStartXfer+0x866>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4adc      	ldr	r2, [pc, #880]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006b70:	4694      	mov	ip, r2
 8006b72:	4463      	add	r3, ip
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	49d8      	ldr	r1, [pc, #864]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006b7e:	468c      	mov	ip, r1
 8006b80:	4463      	add	r3, ip
 8006b82:	0412      	lsls	r2, r2, #16
 8006b84:	0c12      	lsrs	r2, r2, #16
 8006b86:	605a      	str	r2, [r3, #4]
 8006b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8006b8c:	d91e      	bls.n	8006bcc <USB_EPStartXfer+0x7e4>
 8006b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	643b      	str	r3, [r7, #64]	; 0x40
 8006b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b96:	221f      	movs	r2, #31
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d102      	bne.n	8006ba2 <USB_EPStartXfer+0x7ba>
 8006b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	4acd      	ldr	r2, [pc, #820]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006baa:	4694      	mov	ip, r2
 8006bac:	4463      	add	r3, ip
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb2:	069b      	lsls	r3, r3, #26
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	49c8      	ldr	r1, [pc, #800]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006bbe:	468c      	mov	ip, r1
 8006bc0:	4463      	add	r3, ip
 8006bc2:	2180      	movs	r1, #128	; 0x80
 8006bc4:	0609      	lsls	r1, r1, #24
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	e065      	b.n	8006c98 <USB_EPStartXfer+0x8b0>
 8006bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d121      	bne.n	8006c16 <USB_EPStartXfer+0x82e>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	4ac1      	ldr	r2, [pc, #772]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006bda:	4694      	mov	ip, r2
 8006bdc:	4463      	add	r3, ip
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	49be      	ldr	r1, [pc, #760]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006be8:	468c      	mov	ip, r1
 8006bea:	4463      	add	r3, ip
 8006bec:	49bd      	ldr	r1, [pc, #756]	; (8006ee4 <USB_EPStartXfer+0xafc>)
 8006bee:	400a      	ands	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4ab9      	ldr	r2, [pc, #740]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006bfa:	4694      	mov	ip, r2
 8006bfc:	4463      	add	r3, ip
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	49b6      	ldr	r1, [pc, #728]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006c08:	468c      	mov	ip, r1
 8006c0a:	4463      	add	r3, ip
 8006c0c:	2180      	movs	r1, #128	; 0x80
 8006c0e:	0609      	lsls	r1, r1, #24
 8006c10:	430a      	orrs	r2, r1
 8006c12:	605a      	str	r2, [r3, #4]
 8006c14:	e040      	b.n	8006c98 <USB_EPStartXfer+0x8b0>
 8006c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c18:	085b      	lsrs	r3, r3, #1
 8006c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1e:	2201      	movs	r2, #1
 8006c20:	4013      	ands	r3, r2
 8006c22:	d002      	beq.n	8006c2a <USB_EPStartXfer+0x842>
 8006c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c26:	3301      	adds	r3, #1
 8006c28:	643b      	str	r3, [r7, #64]	; 0x40
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4aab      	ldr	r2, [pc, #684]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006c32:	4694      	mov	ip, r2
 8006c34:	4463      	add	r3, ip
 8006c36:	6859      	ldr	r1, [r3, #4]
 8006c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c3a:	069a      	lsls	r2, r3, #26
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	48a7      	ldr	r0, [pc, #668]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006c44:	4684      	mov	ip, r0
 8006c46:	4463      	add	r3, ip
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]
 8006c4c:	e024      	b.n	8006c98 <USB_EPStartXfer+0x8b0>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d120      	bne.n	8006c98 <USB_EPStartXfer+0x8b0>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4aa0      	ldr	r2, [pc, #640]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006c5e:	4694      	mov	ip, r2
 8006c60:	4463      	add	r3, ip
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	499d      	ldr	r1, [pc, #628]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006c6c:	468c      	mov	ip, r1
 8006c6e:	4463      	add	r3, ip
 8006c70:	0412      	lsls	r2, r2, #16
 8006c72:	0c12      	lsrs	r2, r2, #16
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4a98      	ldr	r2, [pc, #608]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006c7e:	4694      	mov	ip, r2
 8006c80:	4463      	add	r3, ip
 8006c82:	6859      	ldr	r1, [r3, #4]
 8006c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c86:	041a      	lsls	r2, r3, #16
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	4894      	ldr	r0, [pc, #592]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006c90:	4684      	mov	ip, r0
 8006c92:	4463      	add	r3, ip
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8006c98:	201a      	movs	r0, #26
 8006c9a:	183b      	adds	r3, r7, r0
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	8912      	ldrh	r2, [r2, #8]
 8006ca0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6959      	ldr	r1, [r3, #20]
 8006ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca8:	b29c      	uxth	r4, r3
 8006caa:	183b      	adds	r3, r7, r0
 8006cac:	881a      	ldrh	r2, [r3, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	0023      	movs	r3, r4
 8006cb2:	f000 fd71 	bl	8007798 <USB_WritePMA>
 8006cb6:	e0aa      	b.n	8006e0e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d172      	bne.n	8006da6 <USB_EPStartXfer+0x9be>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4a86      	ldr	r2, [pc, #536]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006cc8:	4694      	mov	ip, r2
 8006cca:	4463      	add	r3, ip
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4982      	ldr	r1, [pc, #520]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006cd6:	468c      	mov	ip, r1
 8006cd8:	4463      	add	r3, ip
 8006cda:	0412      	lsls	r2, r2, #16
 8006cdc:	0c12      	lsrs	r2, r2, #16
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ce4:	d91e      	bls.n	8006d24 <USB_EPStartXfer+0x93c>
 8006ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce8:	095b      	lsrs	r3, r3, #5
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cee:	221f      	movs	r2, #31
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d102      	bne.n	8006cfa <USB_EPStartXfer+0x912>
 8006cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4a77      	ldr	r2, [pc, #476]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006d02:	4694      	mov	ip, r2
 8006d04:	4463      	add	r3, ip
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	069b      	lsls	r3, r3, #26
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4972      	ldr	r1, [pc, #456]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006d16:	468c      	mov	ip, r1
 8006d18:	4463      	add	r3, ip
 8006d1a:	2180      	movs	r1, #128	; 0x80
 8006d1c:	0609      	lsls	r1, r1, #24
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e065      	b.n	8006df0 <USB_EPStartXfer+0xa08>
 8006d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d121      	bne.n	8006d6e <USB_EPStartXfer+0x986>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4a6b      	ldr	r2, [pc, #428]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006d32:	4694      	mov	ip, r2
 8006d34:	4463      	add	r3, ip
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4968      	ldr	r1, [pc, #416]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006d40:	468c      	mov	ip, r1
 8006d42:	4463      	add	r3, ip
 8006d44:	4967      	ldr	r1, [pc, #412]	; (8006ee4 <USB_EPStartXfer+0xafc>)
 8006d46:	400a      	ands	r2, r1
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4a63      	ldr	r2, [pc, #396]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006d52:	4694      	mov	ip, r2
 8006d54:	4463      	add	r3, ip
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4960      	ldr	r1, [pc, #384]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006d60:	468c      	mov	ip, r1
 8006d62:	4463      	add	r3, ip
 8006d64:	2180      	movs	r1, #128	; 0x80
 8006d66:	0609      	lsls	r1, r1, #24
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e040      	b.n	8006df0 <USB_EPStartXfer+0xa08>
 8006d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d76:	2201      	movs	r2, #1
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d002      	beq.n	8006d82 <USB_EPStartXfer+0x99a>
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7e:	3301      	adds	r3, #1
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4a55      	ldr	r2, [pc, #340]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006d8a:	4694      	mov	ip, r2
 8006d8c:	4463      	add	r3, ip
 8006d8e:	6819      	ldr	r1, [r3, #0]
 8006d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d92:	069a      	lsls	r2, r3, #26
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4851      	ldr	r0, [pc, #324]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006d9c:	4684      	mov	ip, r0
 8006d9e:	4463      	add	r3, ip
 8006da0:	430a      	orrs	r2, r1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e024      	b.n	8006df0 <USB_EPStartXfer+0xa08>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d120      	bne.n	8006df0 <USB_EPStartXfer+0xa08>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	4a4a      	ldr	r2, [pc, #296]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006db6:	4694      	mov	ip, r2
 8006db8:	4463      	add	r3, ip
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	00db      	lsls	r3, r3, #3
 8006dc2:	4947      	ldr	r1, [pc, #284]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006dc4:	468c      	mov	ip, r1
 8006dc6:	4463      	add	r3, ip
 8006dc8:	0412      	lsls	r2, r2, #16
 8006dca:	0c12      	lsrs	r2, r2, #16
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	4a42      	ldr	r2, [pc, #264]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006dd6:	4694      	mov	ip, r2
 8006dd8:	4463      	add	r3, ip
 8006dda:	6819      	ldr	r1, [r3, #0]
 8006ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dde:	041a      	lsls	r2, r3, #16
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	483e      	ldr	r0, [pc, #248]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006de8:	4684      	mov	ip, r0
 8006dea:	4463      	add	r3, ip
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006df0:	201a      	movs	r0, #26
 8006df2:	183b      	adds	r3, r7, r0
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	88d2      	ldrh	r2, [r2, #6]
 8006df8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6959      	ldr	r1, [r3, #20]
 8006dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e00:	b29c      	uxth	r4, r3
 8006e02:	183b      	adds	r3, r7, r0
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	0023      	movs	r3, r4
 8006e0a:	f000 fcc5 	bl	8007798 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	18d3      	adds	r3, r2, r3
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a33      	ldr	r2, [pc, #204]	; (8006ee8 <USB_EPStartXfer+0xb00>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2210      	movs	r2, #16
 8006e24:	4053      	eors	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	4053      	eors	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	492b      	ldr	r1, [pc, #172]	; (8006eec <USB_EPStartXfer+0xb04>)
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	f000 fb97 	bl	8007574 <USB_EPStartXfer+0x118c>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	7a9b      	ldrb	r3, [r3, #10]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d000      	beq.n	8006e50 <USB_EPStartXfer+0xa68>
 8006e4e:	e090      	b.n	8006f72 <USB_EPStartXfer+0xb8a>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	699a      	ldr	r2, [r3, #24]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d909      	bls.n	8006e70 <USB_EPStartXfer+0xa88>
      {
        len = ep->maxpacket;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e68:	1ad2      	subs	r2, r2, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	619a      	str	r2, [r3, #24]
 8006e6e:	e005      	b.n	8006e7c <USB_EPStartXfer+0xa94>
      }
      else
      {
        len = ep->xfer_len;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006e84:	4694      	mov	ip, r2
 8006e86:	4463      	add	r3, ip
 8006e88:	685a      	ldr	r2, [r3, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	4913      	ldr	r1, [pc, #76]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006e92:	468c      	mov	ip, r1
 8006e94:	4463      	add	r3, ip
 8006e96:	0412      	lsls	r2, r2, #16
 8006e98:	0c12      	lsrs	r2, r2, #16
 8006e9a:	605a      	str	r2, [r3, #4]
 8006e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006ea0:	d926      	bls.n	8006ef0 <USB_EPStartXfer+0xb08>
 8006ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eaa:	221f      	movs	r2, #31
 8006eac:	4013      	ands	r3, r2
 8006eae:	d102      	bne.n	8006eb6 <USB_EPStartXfer+0xace>
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006ebe:	4694      	mov	ip, r2
 8006ec0:	4463      	add	r3, ip
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	069b      	lsls	r3, r3, #26
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4903      	ldr	r1, [pc, #12]	; (8006ee0 <USB_EPStartXfer+0xaf8>)
 8006ed2:	468c      	mov	ip, r1
 8006ed4:	4463      	add	r3, ip
 8006ed6:	2180      	movs	r1, #128	; 0x80
 8006ed8:	0609      	lsls	r1, r1, #24
 8006eda:	430a      	orrs	r2, r1
 8006edc:	605a      	str	r2, [r3, #4]
 8006ede:	e32d      	b.n	800753c <USB_EPStartXfer+0x1154>
 8006ee0:	40009800 	.word	0x40009800
 8006ee4:	83ffffff 	.word	0x83ffffff
 8006ee8:	07ff8fbf 	.word	0x07ff8fbf
 8006eec:	00008080 	.word	0x00008080
 8006ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d121      	bne.n	8006f3a <USB_EPStartXfer+0xb52>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	4ae0      	ldr	r2, [pc, #896]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006efe:	4694      	mov	ip, r2
 8006f00:	4463      	add	r3, ip
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	49dd      	ldr	r1, [pc, #884]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006f0c:	468c      	mov	ip, r1
 8006f0e:	4463      	add	r3, ip
 8006f10:	49dc      	ldr	r1, [pc, #880]	; (8007284 <USB_EPStartXfer+0xe9c>)
 8006f12:	400a      	ands	r2, r1
 8006f14:	605a      	str	r2, [r3, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4ad8      	ldr	r2, [pc, #864]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	49d5      	ldr	r1, [pc, #852]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006f2c:	468c      	mov	ip, r1
 8006f2e:	4463      	add	r3, ip
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	0609      	lsls	r1, r1, #24
 8006f34:	430a      	orrs	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]
 8006f38:	e300      	b.n	800753c <USB_EPStartXfer+0x1154>
 8006f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3c:	085b      	lsrs	r3, r3, #1
 8006f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f42:	2201      	movs	r2, #1
 8006f44:	4013      	ands	r3, r2
 8006f46:	d002      	beq.n	8006f4e <USB_EPStartXfer+0xb66>
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4aca      	ldr	r2, [pc, #808]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006f56:	4694      	mov	ip, r2
 8006f58:	4463      	add	r3, ip
 8006f5a:	6859      	ldr	r1, [r3, #4]
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	069a      	lsls	r2, r3, #26
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	48c6      	ldr	r0, [pc, #792]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006f68:	4684      	mov	ip, r0
 8006f6a:	4463      	add	r3, ip
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	605a      	str	r2, [r3, #4]
 8006f70:	e2e4      	b.n	800753c <USB_EPStartXfer+0x1154>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	78db      	ldrb	r3, [r3, #3]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d000      	beq.n	8006f7c <USB_EPStartXfer+0xb94>
 8006f7a:	e189      	b.n	8007290 <USB_EPStartXfer+0xea8>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d000      	beq.n	8006f86 <USB_EPStartXfer+0xb9e>
 8006f84:	e078      	b.n	8007078 <USB_EPStartXfer+0xc90>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4abc      	ldr	r2, [pc, #752]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006f8e:	4694      	mov	ip, r2
 8006f90:	4463      	add	r3, ip
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	49b9      	ldr	r1, [pc, #740]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006f9c:	468c      	mov	ip, r1
 8006f9e:	4463      	add	r3, ip
 8006fa0:	0412      	lsls	r2, r2, #16
 8006fa2:	0c12      	lsrs	r2, r2, #16
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b3e      	cmp	r3, #62	; 0x3e
 8006fac:	d920      	bls.n	8006ff0 <USB_EPStartXfer+0xc08>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	221f      	movs	r2, #31
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d102      	bne.n	8006fc6 <USB_EPStartXfer+0xbde>
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	4aac      	ldr	r2, [pc, #688]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006fce:	4694      	mov	ip, r2
 8006fd0:	4463      	add	r3, ip
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd6:	069b      	lsls	r3, r3, #26
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	49a7      	ldr	r1, [pc, #668]	; (8007280 <USB_EPStartXfer+0xe98>)
 8006fe2:	468c      	mov	ip, r1
 8006fe4:	4463      	add	r3, ip
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	0609      	lsls	r1, r1, #24
 8006fea:	430a      	orrs	r2, r1
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	e069      	b.n	80070c4 <USB_EPStartXfer+0xcdc>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d121      	bne.n	800703c <USB_EPStartXfer+0xc54>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	4aa0      	ldr	r2, [pc, #640]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007000:	4694      	mov	ip, r2
 8007002:	4463      	add	r3, ip
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	499c      	ldr	r1, [pc, #624]	; (8007280 <USB_EPStartXfer+0xe98>)
 800700e:	468c      	mov	ip, r1
 8007010:	4463      	add	r3, ip
 8007012:	499c      	ldr	r1, [pc, #624]	; (8007284 <USB_EPStartXfer+0xe9c>)
 8007014:	400a      	ands	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	4a98      	ldr	r2, [pc, #608]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007020:	4694      	mov	ip, r2
 8007022:	4463      	add	r3, ip
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	4994      	ldr	r1, [pc, #592]	; (8007280 <USB_EPStartXfer+0xe98>)
 800702e:	468c      	mov	ip, r1
 8007030:	4463      	add	r3, ip
 8007032:	2180      	movs	r1, #128	; 0x80
 8007034:	0609      	lsls	r1, r1, #24
 8007036:	430a      	orrs	r2, r1
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e043      	b.n	80070c4 <USB_EPStartXfer+0xcdc>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2201      	movs	r2, #1
 800704a:	4013      	ands	r3, r2
 800704c:	d002      	beq.n	8007054 <USB_EPStartXfer+0xc6c>
 800704e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007050:	3301      	adds	r3, #1
 8007052:	637b      	str	r3, [r7, #52]	; 0x34
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4a89      	ldr	r2, [pc, #548]	; (8007280 <USB_EPStartXfer+0xe98>)
 800705c:	4694      	mov	ip, r2
 800705e:	4463      	add	r3, ip
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007064:	069a      	lsls	r2, r3, #26
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4884      	ldr	r0, [pc, #528]	; (8007280 <USB_EPStartXfer+0xe98>)
 800706e:	4684      	mov	ip, r0
 8007070:	4463      	add	r3, ip
 8007072:	430a      	orrs	r2, r1
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e025      	b.n	80070c4 <USB_EPStartXfer+0xcdc>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	785b      	ldrb	r3, [r3, #1]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d121      	bne.n	80070c4 <USB_EPStartXfer+0xcdc>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4a7e      	ldr	r2, [pc, #504]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007088:	4694      	mov	ip, r2
 800708a:	4463      	add	r3, ip
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	497a      	ldr	r1, [pc, #488]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007096:	468c      	mov	ip, r1
 8007098:	4463      	add	r3, ip
 800709a:	0412      	lsls	r2, r2, #16
 800709c:	0c12      	lsrs	r2, r2, #16
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	4a76      	ldr	r2, [pc, #472]	; (8007280 <USB_EPStartXfer+0xe98>)
 80070a8:	4694      	mov	ip, r2
 80070aa:	4463      	add	r3, ip
 80070ac:	6819      	ldr	r1, [r3, #0]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	041a      	lsls	r2, r3, #16
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	4871      	ldr	r0, [pc, #452]	; (8007280 <USB_EPStartXfer+0xe98>)
 80070bc:	4684      	mov	ip, r0
 80070be:	4463      	add	r3, ip
 80070c0:	430a      	orrs	r2, r1
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	785b      	ldrb	r3, [r3, #1]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d000      	beq.n	80070ce <USB_EPStartXfer+0xce6>
 80070cc:	e078      	b.n	80071c0 <USB_EPStartXfer+0xdd8>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4a6a      	ldr	r2, [pc, #424]	; (8007280 <USB_EPStartXfer+0xe98>)
 80070d6:	4694      	mov	ip, r2
 80070d8:	4463      	add	r3, ip
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	4967      	ldr	r1, [pc, #412]	; (8007280 <USB_EPStartXfer+0xe98>)
 80070e4:	468c      	mov	ip, r1
 80070e6:	4463      	add	r3, ip
 80070e8:	0412      	lsls	r2, r2, #16
 80070ea:	0c12      	lsrs	r2, r2, #16
 80070ec:	605a      	str	r2, [r3, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b3e      	cmp	r3, #62	; 0x3e
 80070f4:	d920      	bls.n	8007138 <USB_EPStartXfer+0xd50>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	633b      	str	r3, [r7, #48]	; 0x30
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	221f      	movs	r2, #31
 8007104:	4013      	ands	r3, r2
 8007106:	d102      	bne.n	800710e <USB_EPStartXfer+0xd26>
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	3b01      	subs	r3, #1
 800710c:	633b      	str	r3, [r7, #48]	; 0x30
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	4a5a      	ldr	r2, [pc, #360]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007116:	4694      	mov	ip, r2
 8007118:	4463      	add	r3, ip
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	069b      	lsls	r3, r3, #26
 8007120:	431a      	orrs	r2, r3
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4955      	ldr	r1, [pc, #340]	; (8007280 <USB_EPStartXfer+0xe98>)
 800712a:	468c      	mov	ip, r1
 800712c:	4463      	add	r3, ip
 800712e:	2180      	movs	r1, #128	; 0x80
 8007130:	0609      	lsls	r1, r1, #24
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
 8007136:	e069      	b.n	800720c <USB_EPStartXfer+0xe24>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d121      	bne.n	8007184 <USB_EPStartXfer+0xd9c>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4a4e      	ldr	r2, [pc, #312]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007148:	4694      	mov	ip, r2
 800714a:	4463      	add	r3, ip
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	494a      	ldr	r1, [pc, #296]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007156:	468c      	mov	ip, r1
 8007158:	4463      	add	r3, ip
 800715a:	494a      	ldr	r1, [pc, #296]	; (8007284 <USB_EPStartXfer+0xe9c>)
 800715c:	400a      	ands	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	4a46      	ldr	r2, [pc, #280]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007168:	4694      	mov	ip, r2
 800716a:	4463      	add	r3, ip
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4942      	ldr	r1, [pc, #264]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007176:	468c      	mov	ip, r1
 8007178:	4463      	add	r3, ip
 800717a:	2180      	movs	r1, #128	; 0x80
 800717c:	0609      	lsls	r1, r1, #24
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	e043      	b.n	800720c <USB_EPStartXfer+0xe24>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	085b      	lsrs	r3, r3, #1
 800718a:	633b      	str	r3, [r7, #48]	; 0x30
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2201      	movs	r2, #1
 8007192:	4013      	ands	r3, r2
 8007194:	d002      	beq.n	800719c <USB_EPStartXfer+0xdb4>
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	3301      	adds	r3, #1
 800719a:	633b      	str	r3, [r7, #48]	; 0x30
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	4a37      	ldr	r2, [pc, #220]	; (8007280 <USB_EPStartXfer+0xe98>)
 80071a4:	4694      	mov	ip, r2
 80071a6:	4463      	add	r3, ip
 80071a8:	6859      	ldr	r1, [r3, #4]
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	069a      	lsls	r2, r3, #26
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4832      	ldr	r0, [pc, #200]	; (8007280 <USB_EPStartXfer+0xe98>)
 80071b6:	4684      	mov	ip, r0
 80071b8:	4463      	add	r3, ip
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	e025      	b.n	800720c <USB_EPStartXfer+0xe24>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d121      	bne.n	800720c <USB_EPStartXfer+0xe24>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	4a2c      	ldr	r2, [pc, #176]	; (8007280 <USB_EPStartXfer+0xe98>)
 80071d0:	4694      	mov	ip, r2
 80071d2:	4463      	add	r3, ip
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4928      	ldr	r1, [pc, #160]	; (8007280 <USB_EPStartXfer+0xe98>)
 80071de:	468c      	mov	ip, r1
 80071e0:	4463      	add	r3, ip
 80071e2:	0412      	lsls	r2, r2, #16
 80071e4:	0c12      	lsrs	r2, r2, #16
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	4a24      	ldr	r2, [pc, #144]	; (8007280 <USB_EPStartXfer+0xe98>)
 80071f0:	4694      	mov	ip, r2
 80071f2:	4463      	add	r3, ip
 80071f4:	6859      	ldr	r1, [r3, #4]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	041a      	lsls	r2, r3, #16
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	481f      	ldr	r0, [pc, #124]	; (8007280 <USB_EPStartXfer+0xe98>)
 8007204:	4684      	mov	ip, r0
 8007206:	4463      	add	r3, ip
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d100      	bne.n	8007216 <USB_EPStartXfer+0xe2e>
 8007214:	e192      	b.n	800753c <USB_EPStartXfer+0x1154>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	18d3      	adds	r3, r2, r3
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	2126      	movs	r1, #38	; 0x26
 8007224:	187b      	adds	r3, r7, r1
 8007226:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007228:	187b      	adds	r3, r7, r1
 800722a:	881a      	ldrh	r2, [r3, #0]
 800722c:	2380      	movs	r3, #128	; 0x80
 800722e:	01db      	lsls	r3, r3, #7
 8007230:	4013      	ands	r3, r2
 8007232:	d004      	beq.n	800723e <USB_EPStartXfer+0xe56>
 8007234:	187b      	adds	r3, r7, r1
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	2240      	movs	r2, #64	; 0x40
 800723a:	4013      	ands	r3, r2
 800723c:	d10d      	bne.n	800725a <USB_EPStartXfer+0xe72>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800723e:	2126      	movs	r1, #38	; 0x26
 8007240:	187b      	adds	r3, r7, r1
 8007242:	881a      	ldrh	r2, [r3, #0]
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	01db      	lsls	r3, r3, #7
 8007248:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800724a:	d000      	beq.n	800724e <USB_EPStartXfer+0xe66>
 800724c:	e176      	b.n	800753c <USB_EPStartXfer+0x1154>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800724e:	187b      	adds	r3, r7, r1
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	2240      	movs	r2, #64	; 0x40
 8007254:	4013      	ands	r3, r2
 8007256:	d000      	beq.n	800725a <USB_EPStartXfer+0xe72>
 8007258:	e170      	b.n	800753c <USB_EPStartXfer+0x1154>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	18d3      	adds	r3, r2, r3
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a08      	ldr	r2, [pc, #32]	; (8007288 <USB_EPStartXfer+0xea0>)
 8007268:	4013      	ands	r3, r2
 800726a:	623b      	str	r3, [r7, #32]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	18d3      	adds	r3, r2, r3
 8007276:	6a3a      	ldr	r2, [r7, #32]
 8007278:	4904      	ldr	r1, [pc, #16]	; (800728c <USB_EPStartXfer+0xea4>)
 800727a:	430a      	orrs	r2, r1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e15d      	b.n	800753c <USB_EPStartXfer+0x1154>
 8007280:	40009800 	.word	0x40009800
 8007284:	83ffffff 	.word	0x83ffffff
 8007288:	07ff8f8f 	.word	0x07ff8f8f
 800728c:	000080c0 	.word	0x000080c0
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	78db      	ldrb	r3, [r3, #3]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d000      	beq.n	800729a <USB_EPStartXfer+0xeb2>
 8007298:	e14e      	b.n	8007538 <USB_EPStartXfer+0x1150>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d909      	bls.n	80072ba <USB_EPStartXfer+0xed2>
        {
          len = ep->maxpacket;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	699a      	ldr	r2, [r3, #24]
 80072b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b2:	1ad2      	subs	r2, r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	619a      	str	r2, [r3, #24]
 80072b8:	e005      	b.n	80072c6 <USB_EPStartXfer+0xede>
        }
        else
        {
          len = ep->xfer_len;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2200      	movs	r2, #0
 80072c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d172      	bne.n	80073b4 <USB_EPStartXfer+0xfcc>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	4aaa      	ldr	r2, [pc, #680]	; (8007580 <USB_EPStartXfer+0x1198>)
 80072d6:	4694      	mov	ip, r2
 80072d8:	4463      	add	r3, ip
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	00db      	lsls	r3, r3, #3
 80072e2:	49a7      	ldr	r1, [pc, #668]	; (8007580 <USB_EPStartXfer+0x1198>)
 80072e4:	468c      	mov	ip, r1
 80072e6:	4463      	add	r3, ip
 80072e8:	0412      	lsls	r2, r2, #16
 80072ea:	0c12      	lsrs	r2, r2, #16
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f0:	2b3e      	cmp	r3, #62	; 0x3e
 80072f2:	d91e      	bls.n	8007332 <USB_EPStartXfer+0xf4a>
 80072f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072fc:	221f      	movs	r2, #31
 80072fe:	4013      	ands	r3, r2
 8007300:	d102      	bne.n	8007308 <USB_EPStartXfer+0xf20>
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	3b01      	subs	r3, #1
 8007306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	4a9c      	ldr	r2, [pc, #624]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007310:	4694      	mov	ip, r2
 8007312:	4463      	add	r3, ip
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	069b      	lsls	r3, r3, #26
 800731a:	431a      	orrs	r2, r3
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	4997      	ldr	r1, [pc, #604]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007324:	468c      	mov	ip, r1
 8007326:	4463      	add	r3, ip
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	0609      	lsls	r1, r1, #24
 800732c:	430a      	orrs	r2, r1
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e065      	b.n	80073fe <USB_EPStartXfer+0x1016>
 8007332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007334:	2b00      	cmp	r3, #0
 8007336:	d121      	bne.n	800737c <USB_EPStartXfer+0xf94>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	4a90      	ldr	r2, [pc, #576]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007340:	4694      	mov	ip, r2
 8007342:	4463      	add	r3, ip
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	498c      	ldr	r1, [pc, #560]	; (8007580 <USB_EPStartXfer+0x1198>)
 800734e:	468c      	mov	ip, r1
 8007350:	4463      	add	r3, ip
 8007352:	498c      	ldr	r1, [pc, #560]	; (8007584 <USB_EPStartXfer+0x119c>)
 8007354:	400a      	ands	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	4a88      	ldr	r2, [pc, #544]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007360:	4694      	mov	ip, r2
 8007362:	4463      	add	r3, ip
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	4984      	ldr	r1, [pc, #528]	; (8007580 <USB_EPStartXfer+0x1198>)
 800736e:	468c      	mov	ip, r1
 8007370:	4463      	add	r3, ip
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	0609      	lsls	r1, r1, #24
 8007376:	430a      	orrs	r2, r1
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e040      	b.n	80073fe <USB_EPStartXfer+0x1016>
 800737c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007384:	2201      	movs	r2, #1
 8007386:	4013      	ands	r3, r2
 8007388:	d002      	beq.n	8007390 <USB_EPStartXfer+0xfa8>
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	3301      	adds	r3, #1
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4a7a      	ldr	r2, [pc, #488]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007398:	4694      	mov	ip, r2
 800739a:	4463      	add	r3, ip
 800739c:	6819      	ldr	r1, [r3, #0]
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	069a      	lsls	r2, r3, #26
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	4875      	ldr	r0, [pc, #468]	; (8007580 <USB_EPStartXfer+0x1198>)
 80073aa:	4684      	mov	ip, r0
 80073ac:	4463      	add	r3, ip
 80073ae:	430a      	orrs	r2, r1
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	e024      	b.n	80073fe <USB_EPStartXfer+0x1016>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d120      	bne.n	80073fe <USB_EPStartXfer+0x1016>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	4a6f      	ldr	r2, [pc, #444]	; (8007580 <USB_EPStartXfer+0x1198>)
 80073c4:	4694      	mov	ip, r2
 80073c6:	4463      	add	r3, ip
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	496b      	ldr	r1, [pc, #428]	; (8007580 <USB_EPStartXfer+0x1198>)
 80073d2:	468c      	mov	ip, r1
 80073d4:	4463      	add	r3, ip
 80073d6:	0412      	lsls	r2, r2, #16
 80073d8:	0c12      	lsrs	r2, r2, #16
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4a67      	ldr	r2, [pc, #412]	; (8007580 <USB_EPStartXfer+0x1198>)
 80073e4:	4694      	mov	ip, r2
 80073e6:	4463      	add	r3, ip
 80073e8:	6819      	ldr	r1, [r3, #0]
 80073ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ec:	041a      	lsls	r2, r3, #16
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	4862      	ldr	r0, [pc, #392]	; (8007580 <USB_EPStartXfer+0x1198>)
 80073f6:	4684      	mov	ip, r0
 80073f8:	4463      	add	r3, ip
 80073fa:	430a      	orrs	r2, r1
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	785b      	ldrb	r3, [r3, #1]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d172      	bne.n	80074ec <USB_EPStartXfer+0x1104>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4a5c      	ldr	r2, [pc, #368]	; (8007580 <USB_EPStartXfer+0x1198>)
 800740e:	4694      	mov	ip, r2
 8007410:	4463      	add	r3, ip
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	4959      	ldr	r1, [pc, #356]	; (8007580 <USB_EPStartXfer+0x1198>)
 800741c:	468c      	mov	ip, r1
 800741e:	4463      	add	r3, ip
 8007420:	0412      	lsls	r2, r2, #16
 8007422:	0c12      	lsrs	r2, r2, #16
 8007424:	605a      	str	r2, [r3, #4]
 8007426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007428:	2b3e      	cmp	r3, #62	; 0x3e
 800742a:	d91e      	bls.n	800746a <USB_EPStartXfer+0x1082>
 800742c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	62bb      	str	r3, [r7, #40]	; 0x28
 8007432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007434:	221f      	movs	r2, #31
 8007436:	4013      	ands	r3, r2
 8007438:	d102      	bne.n	8007440 <USB_EPStartXfer+0x1058>
 800743a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743c:	3b01      	subs	r3, #1
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4a4e      	ldr	r2, [pc, #312]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007448:	4694      	mov	ip, r2
 800744a:	4463      	add	r3, ip
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	069b      	lsls	r3, r3, #26
 8007452:	431a      	orrs	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	4949      	ldr	r1, [pc, #292]	; (8007580 <USB_EPStartXfer+0x1198>)
 800745c:	468c      	mov	ip, r1
 800745e:	4463      	add	r3, ip
 8007460:	2180      	movs	r1, #128	; 0x80
 8007462:	0609      	lsls	r1, r1, #24
 8007464:	430a      	orrs	r2, r1
 8007466:	605a      	str	r2, [r3, #4]
 8007468:	e068      	b.n	800753c <USB_EPStartXfer+0x1154>
 800746a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800746c:	2b00      	cmp	r3, #0
 800746e:	d121      	bne.n	80074b4 <USB_EPStartXfer+0x10cc>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	4a42      	ldr	r2, [pc, #264]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007478:	4694      	mov	ip, r2
 800747a:	4463      	add	r3, ip
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	493e      	ldr	r1, [pc, #248]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007486:	468c      	mov	ip, r1
 8007488:	4463      	add	r3, ip
 800748a:	493e      	ldr	r1, [pc, #248]	; (8007584 <USB_EPStartXfer+0x119c>)
 800748c:	400a      	ands	r2, r1
 800748e:	605a      	str	r2, [r3, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	4a3a      	ldr	r2, [pc, #232]	; (8007580 <USB_EPStartXfer+0x1198>)
 8007498:	4694      	mov	ip, r2
 800749a:	4463      	add	r3, ip
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	4936      	ldr	r1, [pc, #216]	; (8007580 <USB_EPStartXfer+0x1198>)
 80074a6:	468c      	mov	ip, r1
 80074a8:	4463      	add	r3, ip
 80074aa:	2180      	movs	r1, #128	; 0x80
 80074ac:	0609      	lsls	r1, r1, #24
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
 80074b2:	e043      	b.n	800753c <USB_EPStartXfer+0x1154>
 80074b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074bc:	2201      	movs	r2, #1
 80074be:	4013      	ands	r3, r2
 80074c0:	d002      	beq.n	80074c8 <USB_EPStartXfer+0x10e0>
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	3301      	adds	r3, #1
 80074c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4a2c      	ldr	r2, [pc, #176]	; (8007580 <USB_EPStartXfer+0x1198>)
 80074d0:	4694      	mov	ip, r2
 80074d2:	4463      	add	r3, ip
 80074d4:	6859      	ldr	r1, [r3, #4]
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	069a      	lsls	r2, r3, #26
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4827      	ldr	r0, [pc, #156]	; (8007580 <USB_EPStartXfer+0x1198>)
 80074e2:	4684      	mov	ip, r0
 80074e4:	4463      	add	r3, ip
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	e027      	b.n	800753c <USB_EPStartXfer+0x1154>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d123      	bne.n	800753c <USB_EPStartXfer+0x1154>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	4a21      	ldr	r2, [pc, #132]	; (8007580 <USB_EPStartXfer+0x1198>)
 80074fc:	4694      	mov	ip, r2
 80074fe:	4463      	add	r3, ip
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	491d      	ldr	r1, [pc, #116]	; (8007580 <USB_EPStartXfer+0x1198>)
 800750a:	468c      	mov	ip, r1
 800750c:	4463      	add	r3, ip
 800750e:	0412      	lsls	r2, r2, #16
 8007510:	0c12      	lsrs	r2, r2, #16
 8007512:	605a      	str	r2, [r3, #4]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4a19      	ldr	r2, [pc, #100]	; (8007580 <USB_EPStartXfer+0x1198>)
 800751c:	4694      	mov	ip, r2
 800751e:	4463      	add	r3, ip
 8007520:	6859      	ldr	r1, [r3, #4]
 8007522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007524:	041a      	lsls	r2, r3, #16
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4814      	ldr	r0, [pc, #80]	; (8007580 <USB_EPStartXfer+0x1198>)
 800752e:	4684      	mov	ip, r0
 8007530:	4463      	add	r3, ip
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
 8007536:	e001      	b.n	800753c <USB_EPStartXfer+0x1154>
      }
      else
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e01c      	b.n	8007576 <USB_EPStartXfer+0x118e>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	18d3      	adds	r3, r2, r3
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <USB_EPStartXfer+0x11a0>)
 800754a:	4013      	ands	r3, r2
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2280      	movs	r2, #128	; 0x80
 8007552:	0152      	lsls	r2, r2, #5
 8007554:	4053      	eors	r3, r2
 8007556:	61fb      	str	r3, [r7, #28]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	2280      	movs	r2, #128	; 0x80
 800755c:	0192      	lsls	r2, r2, #6
 800755e:	4053      	eors	r3, r2
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	18d3      	adds	r3, r2, r3
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	4907      	ldr	r1, [pc, #28]	; (800758c <USB_EPStartXfer+0x11a4>)
 8007570:	430a      	orrs	r2, r1
 8007572:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	0018      	movs	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	b017      	add	sp, #92	; 0x5c
 800757c:	bd90      	pop	{r4, r7, pc}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	40009800 	.word	0x40009800
 8007584:	83ffffff 	.word	0x83ffffff
 8007588:	07ffbf8f 	.word	0x07ffbf8f
 800758c:	00008080 	.word	0x00008080

08007590 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d016      	beq.n	80075d0 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	18d3      	adds	r3, r2, r3
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a16      	ldr	r2, [pc, #88]	; (8007608 <USB_EPSetStall+0x78>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	60bb      	str	r3, [r7, #8]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2210      	movs	r2, #16
 80075b8:	4053      	eors	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	18d3      	adds	r3, r2, r3
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	4910      	ldr	r1, [pc, #64]	; (800760c <USB_EPSetStall+0x7c>)
 80075ca:	430a      	orrs	r2, r1
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e016      	b.n	80075fe <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	18d3      	adds	r3, r2, r3
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a0c      	ldr	r2, [pc, #48]	; (8007610 <USB_EPSetStall+0x80>)
 80075de:	4013      	ands	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2280      	movs	r2, #128	; 0x80
 80075e6:	0152      	lsls	r2, r2, #5
 80075e8:	4053      	eors	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	18d3      	adds	r3, r2, r3
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4904      	ldr	r1, [pc, #16]	; (800760c <USB_EPSetStall+0x7c>)
 80075fa:	430a      	orrs	r2, r1
 80075fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	0018      	movs	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	b004      	add	sp, #16
 8007606:	bd80      	pop	{r7, pc}
 8007608:	07ff8fbf 	.word	0x07ff8fbf
 800760c:	00008080 	.word	0x00008080
 8007610:	07ffbf8f 	.word	0x07ffbf8f

08007614 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	7a9b      	ldrb	r3, [r3, #10]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d000      	beq.n	8007628 <USB_EPClearStall+0x14>
 8007626:	e075      	b.n	8007714 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d037      	beq.n	80076a0 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	18d3      	adds	r3, r2, r3
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	613b      	str	r3, [r7, #16]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2240      	movs	r2, #64	; 0x40
 8007642:	4013      	ands	r3, r2
 8007644:	d011      	beq.n	800766a <USB_EPClearStall+0x56>
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	18d3      	adds	r3, r2, r3
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a33      	ldr	r2, [pc, #204]	; (8007720 <USB_EPClearStall+0x10c>)
 8007654:	4013      	ands	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	18d3      	adds	r3, r2, r3
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	492f      	ldr	r1, [pc, #188]	; (8007724 <USB_EPClearStall+0x110>)
 8007666:	430a      	orrs	r2, r1
 8007668:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	78db      	ldrb	r3, [r3, #3]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d050      	beq.n	8007714 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	18d3      	adds	r3, r2, r3
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a2a      	ldr	r2, [pc, #168]	; (8007728 <USB_EPClearStall+0x114>)
 8007680:	4013      	ands	r3, r2
 8007682:	60bb      	str	r3, [r7, #8]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2220      	movs	r2, #32
 8007688:	4053      	eors	r3, r2
 800768a:	60bb      	str	r3, [r7, #8]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	18d3      	adds	r3, r2, r3
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	4924      	ldr	r1, [pc, #144]	; (800772c <USB_EPClearStall+0x118>)
 800769a:	430a      	orrs	r2, r1
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	e039      	b.n	8007714 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	18d3      	adds	r3, r2, r3
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	4013      	ands	r3, r2
 80076b6:	d011      	beq.n	80076dc <USB_EPClearStall+0xc8>
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	18d3      	adds	r3, r2, r3
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a16      	ldr	r2, [pc, #88]	; (8007720 <USB_EPClearStall+0x10c>)
 80076c6:	4013      	ands	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	18d3      	adds	r3, r2, r3
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	4916      	ldr	r1, [pc, #88]	; (8007730 <USB_EPClearStall+0x11c>)
 80076d8:	430a      	orrs	r2, r1
 80076da:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	18d3      	adds	r3, r2, r3
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a12      	ldr	r2, [pc, #72]	; (8007734 <USB_EPClearStall+0x120>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2280      	movs	r2, #128	; 0x80
 80076f2:	0152      	lsls	r2, r2, #5
 80076f4:	4053      	eors	r3, r2
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2280      	movs	r2, #128	; 0x80
 80076fc:	0192      	lsls	r2, r2, #6
 80076fe:	4053      	eors	r3, r2
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	18d3      	adds	r3, r2, r3
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4907      	ldr	r1, [pc, #28]	; (800772c <USB_EPClearStall+0x118>)
 8007710:	430a      	orrs	r2, r1
 8007712:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	0018      	movs	r0, r3
 8007718:	46bd      	mov	sp, r7
 800771a:	b008      	add	sp, #32
 800771c:	bd80      	pop	{r7, pc}
 800771e:	46c0      	nop			; (mov r8, r8)
 8007720:	07ff8f8f 	.word	0x07ff8f8f
 8007724:	000080c0 	.word	0x000080c0
 8007728:	07ff8fbf 	.word	0x07ff8fbf
 800772c:	00008080 	.word	0x00008080
 8007730:	0000c080 	.word	0x0000c080
 8007734:	07ffbf8f 	.word	0x07ffbf8f

08007738 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	000a      	movs	r2, r1
 8007742:	1cfb      	adds	r3, r7, #3
 8007744:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007746:	1cfb      	adds	r3, r7, #3
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d102      	bne.n	8007754 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2280      	movs	r2, #128	; 0x80
 8007752:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	0018      	movs	r0, r3
 8007758:	46bd      	mov	sp, r7
 800775a:	b002      	add	sp, #8
 800775c:	bd80      	pop	{r7, pc}

0800775e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776a:	2280      	movs	r2, #128	; 0x80
 800776c:	0212      	lsls	r2, r2, #8
 800776e:	431a      	orrs	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	0018      	movs	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	b002      	add	sp, #8
 800777c:	bd80      	pop	{r7, pc}

0800777e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_DRD_TypeDef *USBx)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800778c:	68fb      	ldr	r3, [r7, #12]
}
 800778e:	0018      	movs	r0, r3
 8007790:	46bd      	mov	sp, r7
 8007792:	b004      	add	sp, #16
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08a      	sub	sp, #40	; 0x28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	0019      	movs	r1, r3
 80077a4:	1dbb      	adds	r3, r7, #6
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	1d3b      	adds	r3, r7, #4
 80077aa:	1c0a      	adds	r2, r1, #0
 80077ac:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80077ae:	1d3b      	adds	r3, r7, #4
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	3303      	adds	r3, #3
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80077b8:	2016      	movs	r0, #22
 80077ba:	183b      	adds	r3, r7, r0
 80077bc:	1d3a      	adds	r2, r7, #4
 80077be:	8812      	ldrh	r2, [r2, #0]
 80077c0:	2103      	movs	r1, #3
 80077c2:	400a      	ands	r2, r1
 80077c4:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 80077ca:	183b      	adds	r3, r7, r0
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <USB_WritePMA+0x40>
  {
    NbWords--;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80077d8:	1dbb      	adds	r3, r7, #6
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	4a28      	ldr	r2, [pc, #160]	; (8007880 <USB_WritePMA+0xe8>)
 80077de:	4694      	mov	ip, r2
 80077e0:	4463      	add	r3, ip
 80077e2:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	623b      	str	r3, [r7, #32]
 80077e8:	e01f      	b.n	800782a <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	7859      	ldrb	r1, [r3, #1]
 80077f0:	0209      	lsls	r1, r1, #8
 80077f2:	430a      	orrs	r2, r1
 80077f4:	7899      	ldrb	r1, [r3, #2]
 80077f6:	0409      	lsls	r1, r1, #16
 80077f8:	430a      	orrs	r2, r1
 80077fa:	78db      	ldrb	r3, [r3, #3]
 80077fc:	061b      	lsls	r3, r3, #24
 80077fe:	4313      	orrs	r3, r2
 8007800:	001a      	movs	r2, r3
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	3304      	adds	r3, #4
 800780a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3301      	adds	r3, #1
 8007810:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	3301      	adds	r3, #1
 8007816:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	3301      	adds	r3, #1
 800781c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	3301      	adds	r3, #1
 8007822:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	3b01      	subs	r3, #1
 8007828:	623b      	str	r3, [r7, #32]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1dc      	bne.n	80077ea <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007830:	2316      	movs	r3, #22
 8007832:	18fb      	adds	r3, r7, r3
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d01e      	beq.n	8007878 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	001a      	movs	r2, r3
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	409a      	lsls	r2, r3
 800784a:	0013      	movs	r3, r2
 800784c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784e:	4313      	orrs	r3, r2
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	3301      	adds	r3, #1
 8007856:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	3301      	adds	r3, #1
 800785c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800785e:	2116      	movs	r1, #22
 8007860:	187b      	adds	r3, r7, r1
 8007862:	881a      	ldrh	r2, [r3, #0]
 8007864:	187b      	adds	r3, r7, r1
 8007866:	3a01      	subs	r2, #1
 8007868:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800786a:	187b      	adds	r3, r7, r1
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e5      	bne.n	800783e <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007876:	601a      	str	r2, [r3, #0]
  }
}
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	46bd      	mov	sp, r7
 800787c:	b00a      	add	sp, #40	; 0x28
 800787e:	bd80      	pop	{r7, pc}
 8007880:	40009800 	.word	0x40009800

08007884 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007884:	b590      	push	{r4, r7, lr}
 8007886:	b08b      	sub	sp, #44	; 0x2c
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	0019      	movs	r1, r3
 8007890:	1dbb      	adds	r3, r7, #6
 8007892:	801a      	strh	r2, [r3, #0]
 8007894:	1d3b      	adds	r3, r7, #4
 8007896:	1c0a      	adds	r2, r1, #0
 8007898:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800789a:	1d3b      	adds	r3, r7, #4
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	3303      	adds	r3, #3
 80078a0:	089b      	lsrs	r3, r3, #2
 80078a2:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80078a4:	201a      	movs	r0, #26
 80078a6:	183b      	adds	r3, r7, r0
 80078a8:	1d3a      	adds	r2, r7, #4
 80078aa:	8812      	ldrh	r2, [r2, #0]
 80078ac:	2103      	movs	r1, #3
 80078ae:	400a      	ands	r2, r1
 80078b0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80078b6:	1dbb      	adds	r3, r7, #6
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	4a39      	ldr	r2, [pc, #228]	; (80079a0 <USB_ReadPMA+0x11c>)
 80078bc:	4694      	mov	ip, r2
 80078be:	4463      	add	r3, ip
 80078c0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80078c2:	183b      	adds	r3, r7, r0
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
 80078d4:	e03c      	b.n	8007950 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	21ff      	movs	r1, #255	; 0xff
 80078de:	4011      	ands	r1, r2
 80078e0:	000c      	movs	r4, r1
 80078e2:	7819      	ldrb	r1, [r3, #0]
 80078e4:	2000      	movs	r0, #0
 80078e6:	4001      	ands	r1, r0
 80078e8:	1c08      	adds	r0, r1, #0
 80078ea:	1c21      	adds	r1, r4, #0
 80078ec:	4301      	orrs	r1, r0
 80078ee:	7019      	strb	r1, [r3, #0]
 80078f0:	0a11      	lsrs	r1, r2, #8
 80078f2:	20ff      	movs	r0, #255	; 0xff
 80078f4:	4001      	ands	r1, r0
 80078f6:	000c      	movs	r4, r1
 80078f8:	7859      	ldrb	r1, [r3, #1]
 80078fa:	2000      	movs	r0, #0
 80078fc:	4001      	ands	r1, r0
 80078fe:	1c08      	adds	r0, r1, #0
 8007900:	1c21      	adds	r1, r4, #0
 8007902:	4301      	orrs	r1, r0
 8007904:	7059      	strb	r1, [r3, #1]
 8007906:	0c11      	lsrs	r1, r2, #16
 8007908:	20ff      	movs	r0, #255	; 0xff
 800790a:	4001      	ands	r1, r0
 800790c:	000c      	movs	r4, r1
 800790e:	7899      	ldrb	r1, [r3, #2]
 8007910:	2000      	movs	r0, #0
 8007912:	4001      	ands	r1, r0
 8007914:	1c08      	adds	r0, r1, #0
 8007916:	1c21      	adds	r1, r4, #0
 8007918:	4301      	orrs	r1, r0
 800791a:	7099      	strb	r1, [r3, #2]
 800791c:	0e10      	lsrs	r0, r2, #24
 800791e:	78da      	ldrb	r2, [r3, #3]
 8007920:	2100      	movs	r1, #0
 8007922:	400a      	ands	r2, r1
 8007924:	1c11      	adds	r1, r2, #0
 8007926:	1c02      	adds	r2, r0, #0
 8007928:	430a      	orrs	r2, r1
 800792a:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	3304      	adds	r3, #4
 8007930:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	3301      	adds	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	3301      	adds	r3, #1
 800793c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	3301      	adds	r3, #1
 8007942:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	3301      	adds	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	3b01      	subs	r3, #1
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1bf      	bne.n	80078d6 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007956:	231a      	movs	r3, #26
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01b      	beq.n	8007998 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	b2db      	uxtb	r3, r3
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	40da      	lsrs	r2, r3
 8007970:	0013      	movs	r3, r2
 8007972:	b2da      	uxtb	r2, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	701a      	strb	r2, [r3, #0]
      count++;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	3301      	adds	r3, #1
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	3301      	adds	r3, #1
 8007982:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8007984:	211a      	movs	r1, #26
 8007986:	187b      	adds	r3, r7, r1
 8007988:	881a      	ldrh	r2, [r3, #0]
 800798a:	187b      	adds	r3, r7, r1
 800798c:	3a01      	subs	r2, #1
 800798e:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8007990:	187b      	adds	r3, r7, r1
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <USB_ReadPMA+0xe2>
  }
}
 8007998:	46c0      	nop			; (mov r8, r8)
 800799a:	46bd      	mov	sp, r7
 800799c:	b00b      	add	sp, #44	; 0x2c
 800799e:	bd90      	pop	{r4, r7, pc}
 80079a0:	40009800 	.word	0x40009800

080079a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	000a      	movs	r2, r1
 80079ae:	1cfb      	adds	r3, r7, #3
 80079b0:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079b2:	2387      	movs	r3, #135	; 0x87
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	0018      	movs	r0, r3
 80079b8:	f7f9 fe9e 	bl	80016f8 <USBD_static_malloc>
 80079bc:	0003      	movs	r3, r0
 80079be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassData = NULL;
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	23af      	movs	r3, #175	; 0xaf
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	2100      	movs	r1, #0
 80079ce:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 80079d0:	2302      	movs	r3, #2
 80079d2:	e06e      	b.n	8007ab2 <USBD_CDC_Init+0x10e>
  }

  pdev->pClassData = (void *)hcdc;
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	23af      	movs	r3, #175	; 0xaf
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	68f9      	ldr	r1, [r7, #12]
 80079dc:	50d1      	str	r1, [r2, r3]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7c1b      	ldrb	r3, [r3, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d11a      	bne.n	8007a1c <USBD_CDC_Init+0x78>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	2181      	movs	r1, #129	; 0x81
 80079f0:	f7f9 fcbd 	bl	800136e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079fa:	2380      	movs	r3, #128	; 0x80
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	2202      	movs	r2, #2
 8007a02:	2101      	movs	r1, #1
 8007a04:	f7f9 fcb3 	bl	800136e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	23bc      	movs	r3, #188	; 0xbc
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	2101      	movs	r1, #1
 8007a10:	52d1      	strh	r1, [r2, r3]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	224e      	movs	r2, #78	; 0x4e
 8007a16:	2110      	movs	r1, #16
 8007a18:	5299      	strh	r1, [r3, r2]
 8007a1a:	e017      	b.n	8007a4c <USBD_CDC_Init+0xa8>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	2340      	movs	r3, #64	; 0x40
 8007a20:	2202      	movs	r2, #2
 8007a22:	2181      	movs	r1, #129	; 0x81
 8007a24:	f7f9 fca3 	bl	800136e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	2202      	movs	r2, #2
 8007a34:	2101      	movs	r1, #1
 8007a36:	f7f9 fc9a 	bl	800136e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	23bc      	movs	r3, #188	; 0xbc
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	2101      	movs	r1, #1
 8007a42:	52d1      	strh	r1, [r2, r3]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	224e      	movs	r2, #78	; 0x4e
 8007a48:	2110      	movs	r1, #16
 8007a4a:	5299      	strh	r1, [r3, r2]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	2308      	movs	r3, #8
 8007a50:	2203      	movs	r2, #3
 8007a52:	2182      	movs	r1, #130	; 0x82
 8007a54:	f7f9 fc8b 	bl	800136e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	224c      	movs	r2, #76	; 0x4c
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	5299      	strh	r1, [r3, r2]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	23b0      	movs	r3, #176	; 0xb0
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	58d3      	ldr	r3, [r2, r3]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	2385      	movs	r3, #133	; 0x85
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	2100      	movs	r1, #0
 8007a74:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	2386      	movs	r3, #134	; 0x86
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	50d1      	str	r1, [r2, r3]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	7c1b      	ldrb	r3, [r3, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <USBD_CDC_Init+0xfa>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	2381      	movs	r3, #129	; 0x81
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	58d2      	ldr	r2, [r2, r3]
 8007a90:	2380      	movs	r3, #128	; 0x80
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	2101      	movs	r1, #1
 8007a98:	f7f9 fdad 	bl	80015f6 <USBD_LL_PrepareReceive>
 8007a9c:	e008      	b.n	8007ab0 <USBD_CDC_Init+0x10c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	2381      	movs	r3, #129	; 0x81
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	58d2      	ldr	r2, [r2, r3]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	2340      	movs	r3, #64	; 0x40
 8007aaa:	2101      	movs	r1, #1
 8007aac:	f7f9 fda3 	bl	80015f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	b004      	add	sp, #16
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	000a      	movs	r2, r1
 8007ac4:	1cfb      	adds	r3, r7, #3
 8007ac6:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2181      	movs	r1, #129	; 0x81
 8007acc:	0018      	movs	r0, r3
 8007ace:	f7f9 fc85 	bl	80013dc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2101      	movs	r1, #1
 8007adc:	0018      	movs	r0, r3
 8007ade:	f7f9 fc7d 	bl	80013dc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	23bc      	movs	r3, #188	; 0xbc
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	2100      	movs	r1, #0
 8007aea:	52d1      	strh	r1, [r2, r3]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2182      	movs	r1, #130	; 0x82
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7f9 fc73 	bl	80013dc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	224c      	movs	r2, #76	; 0x4c
 8007afa:	2100      	movs	r1, #0
 8007afc:	5299      	strh	r1, [r3, r2]
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	224e      	movs	r2, #78	; 0x4e
 8007b02:	2100      	movs	r1, #0
 8007b04:	5299      	strh	r1, [r3, r2]

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	23af      	movs	r3, #175	; 0xaf
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	58d3      	ldr	r3, [r2, r3]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d011      	beq.n	8007b36 <USBD_CDC_DeInit+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	23b0      	movs	r3, #176	; 0xb0
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	58d3      	ldr	r3, [r2, r3]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	23af      	movs	r3, #175	; 0xaf
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	58d3      	ldr	r3, [r2, r3]
 8007b26:	0018      	movs	r0, r3
 8007b28:	f7f9 fdf2 	bl	8001710 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	23af      	movs	r3, #175	; 0xaf
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	2100      	movs	r1, #0
 8007b34:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	0018      	movs	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	23af      	movs	r3, #175	; 0xaf
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	58d3      	ldr	r3, [r2, r3]
 8007b52:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b54:	230d      	movs	r3, #13
 8007b56:	18fb      	adds	r3, r7, r3
 8007b58:	2200      	movs	r2, #0
 8007b5a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8007b5c:	230a      	movs	r3, #10
 8007b5e:	18fb      	adds	r3, r7, r3
 8007b60:	2200      	movs	r2, #0
 8007b62:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b64:	2317      	movs	r3, #23
 8007b66:	18fb      	adds	r3, r7, r3
 8007b68:	2200      	movs	r2, #0
 8007b6a:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <USBD_CDC_Setup+0x36>
  {
    return (uint8_t)USBD_FAIL;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e0c5      	b.n	8007d02 <USBD_CDC_Setup+0x1c2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	001a      	movs	r2, r3
 8007b7c:	2360      	movs	r3, #96	; 0x60
 8007b7e:	4013      	ands	r3, r2
 8007b80:	d04f      	beq.n	8007c22 <USBD_CDC_Setup+0xe2>
 8007b82:	2b20      	cmp	r3, #32
 8007b84:	d000      	beq.n	8007b88 <USBD_CDC_Setup+0x48>
 8007b86:	e0ae      	b.n	8007ce6 <USBD_CDC_Setup+0x1a6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	88db      	ldrh	r3, [r3, #6]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d03d      	beq.n	8007c0c <USBD_CDC_Setup+0xcc>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	b25b      	sxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	da1c      	bge.n	8007bd4 <USBD_CDC_Setup+0x94>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	23b0      	movs	r3, #176	; 0xb0
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	58d3      	ldr	r3, [r2, r3]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ba8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	88d2      	ldrh	r2, [r2, #6]
 8007bae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	88db      	ldrh	r3, [r3, #6]
 8007bb4:	220e      	movs	r2, #14
 8007bb6:	18ba      	adds	r2, r7, r2
 8007bb8:	b299      	uxth	r1, r3
 8007bba:	2907      	cmp	r1, #7
 8007bbc:	d900      	bls.n	8007bc0 <USBD_CDC_Setup+0x80>
 8007bbe:	2307      	movs	r3, #7
 8007bc0:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007bc2:	6939      	ldr	r1, [r7, #16]
 8007bc4:	230e      	movs	r3, #14
 8007bc6:	18fb      	adds	r3, r7, r3
 8007bc8:	881a      	ldrh	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f001 fc5e 	bl	800948e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007bd2:	e093      	b.n	8007cfc <USBD_CDC_Setup+0x1bc>
          hcdc->CmdOpCode = req->bRequest;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	7859      	ldrb	r1, [r3, #1]
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	2380      	movs	r3, #128	; 0x80
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	88db      	ldrh	r3, [r3, #6]
 8007be4:	2b3f      	cmp	r3, #63	; 0x3f
 8007be6:	d803      	bhi.n	8007bf0 <USBD_CDC_Setup+0xb0>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	88db      	ldrh	r3, [r3, #6]
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	e000      	b.n	8007bf2 <USBD_CDC_Setup+0xb2>
 8007bf0:	2240      	movs	r2, #64	; 0x40
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	4945      	ldr	r1, [pc, #276]	; (8007d0c <USBD_CDC_Setup+0x1cc>)
 8007bf6:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007bf8:	6939      	ldr	r1, [r7, #16]
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4a43      	ldr	r2, [pc, #268]	; (8007d0c <USBD_CDC_Setup+0x1cc>)
 8007bfe:	5c9b      	ldrb	r3, [r3, r2]
 8007c00:	001a      	movs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	0018      	movs	r0, r3
 8007c06:	f001 fc6f 	bl	80094e8 <USBD_CtlPrepareRx>
      break;
 8007c0a:	e077      	b.n	8007cfc <USBD_CDC_Setup+0x1bc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	23b0      	movs	r3, #176	; 0xb0
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	58d3      	ldr	r3, [r2, r3]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	7850      	ldrb	r0, [r2, #1]
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4798      	blx	r3
      break;
 8007c20:	e06c      	b.n	8007cfc <USBD_CDC_Setup+0x1bc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b0b      	cmp	r3, #11
 8007c28:	d03c      	beq.n	8007ca4 <USBD_CDC_Setup+0x164>
 8007c2a:	dc4d      	bgt.n	8007cc8 <USBD_CDC_Setup+0x188>
 8007c2c:	2b0a      	cmp	r3, #10
 8007c2e:	d01f      	beq.n	8007c70 <USBD_CDC_Setup+0x130>
 8007c30:	dc4a      	bgt.n	8007cc8 <USBD_CDC_Setup+0x188>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <USBD_CDC_Setup+0xfc>
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d051      	beq.n	8007cde <USBD_CDC_Setup+0x19e>
 8007c3a:	e045      	b.n	8007cc8 <USBD_CDC_Setup+0x188>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	23a7      	movs	r3, #167	; 0xa7
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	5cd3      	ldrb	r3, [r2, r3]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d107      	bne.n	8007c5a <USBD_CDC_Setup+0x11a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c4a:	230a      	movs	r3, #10
 8007c4c:	18f9      	adds	r1, r7, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2202      	movs	r2, #2
 8007c52:	0018      	movs	r0, r3
 8007c54:	f001 fc1b 	bl	800948e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c58:	e044      	b.n	8007ce4 <USBD_CDC_Setup+0x1a4>
            USBD_CtlError(pdev, req);
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	0011      	movs	r1, r2
 8007c60:	0018      	movs	r0, r3
 8007c62:	f001 fb8c 	bl	800937e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c66:	2317      	movs	r3, #23
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	701a      	strb	r2, [r3, #0]
          break;
 8007c6e:	e039      	b.n	8007ce4 <USBD_CDC_Setup+0x1a4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	23a7      	movs	r3, #167	; 0xa7
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	5cd3      	ldrb	r3, [r2, r3]
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d107      	bne.n	8007c8e <USBD_CDC_Setup+0x14e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c7e:	230d      	movs	r3, #13
 8007c80:	18f9      	adds	r1, r7, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	0018      	movs	r0, r3
 8007c88:	f001 fc01 	bl	800948e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c8c:	e02a      	b.n	8007ce4 <USBD_CDC_Setup+0x1a4>
            USBD_CtlError(pdev, req);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	0011      	movs	r1, r2
 8007c94:	0018      	movs	r0, r3
 8007c96:	f001 fb72 	bl	800937e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c9a:	2317      	movs	r3, #23
 8007c9c:	18fb      	adds	r3, r7, r3
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	701a      	strb	r2, [r3, #0]
          break;
 8007ca2:	e01f      	b.n	8007ce4 <USBD_CDC_Setup+0x1a4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	23a7      	movs	r3, #167	; 0xa7
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	5cd3      	ldrb	r3, [r2, r3]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d017      	beq.n	8007ce2 <USBD_CDC_Setup+0x1a2>
          {
            USBD_CtlError(pdev, req);
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	0011      	movs	r1, r2
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f001 fb60 	bl	800937e <USBD_CtlError>
            ret = USBD_FAIL;
 8007cbe:	2317      	movs	r3, #23
 8007cc0:	18fb      	adds	r3, r7, r3
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	701a      	strb	r2, [r3, #0]
          }
          break;
 8007cc6:	e00c      	b.n	8007ce2 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	0011      	movs	r1, r2
 8007cce:	0018      	movs	r0, r3
 8007cd0:	f001 fb55 	bl	800937e <USBD_CtlError>
          ret = USBD_FAIL;
 8007cd4:	2317      	movs	r3, #23
 8007cd6:	18fb      	adds	r3, r7, r3
 8007cd8:	2203      	movs	r2, #3
 8007cda:	701a      	strb	r2, [r3, #0]
          break;
 8007cdc:	e002      	b.n	8007ce4 <USBD_CDC_Setup+0x1a4>
          break;
 8007cde:	46c0      	nop			; (mov r8, r8)
 8007ce0:	e00c      	b.n	8007cfc <USBD_CDC_Setup+0x1bc>
          break;
 8007ce2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007ce4:	e00a      	b.n	8007cfc <USBD_CDC_Setup+0x1bc>

    default:
      USBD_CtlError(pdev, req);
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	0011      	movs	r1, r2
 8007cec:	0018      	movs	r0, r3
 8007cee:	f001 fb46 	bl	800937e <USBD_CtlError>
      ret = USBD_FAIL;
 8007cf2:	2317      	movs	r3, #23
 8007cf4:	18fb      	adds	r3, r7, r3
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	701a      	strb	r2, [r3, #0]
      break;
 8007cfa:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8007cfc:	2317      	movs	r3, #23
 8007cfe:	18fb      	adds	r3, r7, r3
 8007d00:	781b      	ldrb	r3, [r3, #0]
}
 8007d02:	0018      	movs	r0, r3
 8007d04:	46bd      	mov	sp, r7
 8007d06:	b006      	add	sp, #24
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	00000201 	.word	0x00000201

08007d10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d10:	b590      	push	{r4, r7, lr}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	000a      	movs	r2, r1
 8007d1a:	1cfb      	adds	r3, r7, #3
 8007d1c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	23b1      	movs	r3, #177	; 0xb1
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	58d3      	ldr	r3, [r2, r3]
 8007d26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	23af      	movs	r3, #175	; 0xaf
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	58d3      	ldr	r3, [r2, r3]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <USBD_CDC_DataIn+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e05a      	b.n	8007dee <USBD_CDC_DataIn+0xde>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	23af      	movs	r3, #175	; 0xaf
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	58d3      	ldr	r3, [r2, r3]
 8007d40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d42:	1cfb      	adds	r3, r7, #3
 8007d44:	781a      	ldrb	r2, [r3, #0]
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	0013      	movs	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	189b      	adds	r3, r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	18cb      	adds	r3, r1, r3
 8007d52:	3318      	adds	r3, #24
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d02b      	beq.n	8007db2 <USBD_CDC_DataIn+0xa2>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007d5a:	1cfb      	adds	r3, r7, #3
 8007d5c:	781a      	ldrb	r2, [r3, #0]
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	0013      	movs	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	189b      	adds	r3, r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	18cb      	adds	r3, r1, r3
 8007d6a:	3318      	adds	r3, #24
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	1cfb      	adds	r3, r7, #3
 8007d70:	781a      	ldrb	r2, [r3, #0]
 8007d72:	68f9      	ldr	r1, [r7, #12]
 8007d74:	0013      	movs	r3, r2
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	189b      	adds	r3, r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	18cb      	adds	r3, r1, r3
 8007d7e:	334c      	adds	r3, #76	; 0x4c
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	0019      	movs	r1, r3
 8007d84:	f7f8 fa44 	bl	8000210 <__aeabi_uidivmod>
 8007d88:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007d8a:	d112      	bne.n	8007db2 <USBD_CDC_DataIn+0xa2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007d8c:	1cfb      	adds	r3, r7, #3
 8007d8e:	781a      	ldrb	r2, [r3, #0]
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	0013      	movs	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	189b      	adds	r3, r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	18cb      	adds	r3, r1, r3
 8007d9c:	3318      	adds	r3, #24
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007da2:	1cfb      	adds	r3, r7, #3
 8007da4:	7819      	ldrb	r1, [r3, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	2300      	movs	r3, #0
 8007daa:	2200      	movs	r2, #0
 8007dac:	f7f9 fbf3 	bl	8001596 <USBD_LL_Transmit>
 8007db0:	e01c      	b.n	8007dec <USBD_CDC_DataIn+0xdc>
  }
  else
  {
    hcdc->TxState = 0U;
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	2385      	movs	r3, #133	; 0x85
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	2100      	movs	r1, #0
 8007dba:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	23b0      	movs	r3, #176	; 0xb0
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	58d3      	ldr	r3, [r2, r3]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d010      	beq.n	8007dec <USBD_CDC_DataIn+0xdc>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	23b0      	movs	r3, #176	; 0xb0
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	58d3      	ldr	r3, [r2, r3]
 8007dd2:	691c      	ldr	r4, [r3, #16]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	2382      	movs	r3, #130	; 0x82
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	58d0      	ldr	r0, [r2, r3]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2284      	movs	r2, #132	; 0x84
 8007de0:	0092      	lsls	r2, r2, #2
 8007de2:	1899      	adds	r1, r3, r2
 8007de4:	1cfb      	adds	r3, r7, #3
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	001a      	movs	r2, r3
 8007dea:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	0018      	movs	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b005      	add	sp, #20
 8007df4:	bd90      	pop	{r4, r7, pc}

08007df6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	000a      	movs	r2, r1
 8007e00:	1cfb      	adds	r3, r7, #3
 8007e02:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	23af      	movs	r3, #175	; 0xaf
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	58d3      	ldr	r3, [r2, r3]
 8007e0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	23af      	movs	r3, #175	; 0xaf
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	58d3      	ldr	r3, [r2, r3]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <USBD_CDC_DataOut+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e01c      	b.n	8007e58 <USBD_CDC_DataOut+0x62>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e1e:	1cfb      	adds	r3, r7, #3
 8007e20:	781a      	ldrb	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	0011      	movs	r1, r2
 8007e26:	0018      	movs	r0, r3
 8007e28:	f7f9 fc15 	bl	8001656 <USBD_LL_GetRxDataSize>
 8007e2c:	0001      	movs	r1, r0
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	2383      	movs	r3, #131	; 0x83
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	23b0      	movs	r3, #176	; 0xb0
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	58d3      	ldr	r3, [r2, r3]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	68f9      	ldr	r1, [r7, #12]
 8007e42:	2381      	movs	r3, #129	; 0x81
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	58c8      	ldr	r0, [r1, r3]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2183      	movs	r1, #131	; 0x83
 8007e4c:	0089      	lsls	r1, r1, #2
 8007e4e:	468c      	mov	ip, r1
 8007e50:	4463      	add	r3, ip
 8007e52:	0019      	movs	r1, r3
 8007e54:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	0018      	movs	r0, r3
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	b004      	add	sp, #16
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	23af      	movs	r3, #175	; 0xaf
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	58d3      	ldr	r3, [r2, r3]
 8007e70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <USBD_CDC_EP0_RxReady+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e020      	b.n	8007ebe <USBD_CDC_EP0_RxReady+0x5e>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	23b0      	movs	r3, #176	; 0xb0
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	58d3      	ldr	r3, [r2, r3]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d019      	beq.n	8007ebc <USBD_CDC_EP0_RxReady+0x5c>
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	2380      	movs	r3, #128	; 0x80
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	5cd3      	ldrb	r3, [r2, r3]
 8007e90:	2bff      	cmp	r3, #255	; 0xff
 8007e92:	d013      	beq.n	8007ebc <USBD_CDC_EP0_RxReady+0x5c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	23b0      	movs	r3, #176	; 0xb0
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	58d3      	ldr	r3, [r2, r3]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	2280      	movs	r2, #128	; 0x80
 8007ea2:	0092      	lsls	r2, r2, #2
 8007ea4:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)hcdc->data,
 8007ea6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	4c07      	ldr	r4, [pc, #28]	; (8007ec8 <USBD_CDC_EP0_RxReady+0x68>)
 8007eac:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007eae:	b292      	uxth	r2, r2
 8007eb0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	2380      	movs	r3, #128	; 0x80
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	21ff      	movs	r1, #255	; 0xff
 8007eba:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	b005      	add	sp, #20
 8007ec4:	bd90      	pop	{r4, r7, pc}
 8007ec6:	46c0      	nop			; (mov r8, r8)
 8007ec8:	00000201 	.word	0x00000201

08007ecc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2243      	movs	r2, #67	; 0x43
 8007ed8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007eda:	4b02      	ldr	r3, [pc, #8]	; (8007ee4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8007edc:	0018      	movs	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b002      	add	sp, #8
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200000fc 	.word	0x200000fc

08007ee8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2243      	movs	r2, #67	; 0x43
 8007ef4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007ef6:	4b02      	ldr	r3, [pc, #8]	; (8007f00 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8007ef8:	0018      	movs	r0, r3
 8007efa:	46bd      	mov	sp, r7
 8007efc:	b002      	add	sp, #8
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	200000b8 	.word	0x200000b8

08007f04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2243      	movs	r2, #67	; 0x43
 8007f10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007f12:	4b02      	ldr	r3, [pc, #8]	; (8007f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8007f14:	0018      	movs	r0, r3
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b002      	add	sp, #8
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20000140 	.word	0x20000140

08007f20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f2e:	4b02      	ldr	r3, [pc, #8]	; (8007f38 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8007f30:	0018      	movs	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	b002      	add	sp, #8
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20000074 	.word	0x20000074

08007f3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e005      	b.n	8007f5c <USBD_CDC_RegisterInterface+0x20>
  }

  pdev->pUserData = fops;
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	23b0      	movs	r3, #176	; 0xb0
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	b002      	add	sp, #8
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	23af      	movs	r3, #175	; 0xaf
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	58d3      	ldr	r3, [r2, r3]
 8007f78:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <USBD_CDC_SetTxBuffer+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e00a      	b.n	8007f9a <USBD_CDC_SetTxBuffer+0x36>
  }

  hcdc->TxBuffer = pbuff;
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	2382      	movs	r3, #130	; 0x82
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	2384      	movs	r3, #132	; 0x84
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b006      	add	sp, #24
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	23af      	movs	r3, #175	; 0xaf
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	58d3      	ldr	r3, [r2, r3]
 8007fb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <USBD_CDC_SetRxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e005      	b.n	8007fcc <USBD_CDC_SetRxBuffer+0x2a>
  }

  hcdc->RxBuffer = pbuff;
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	2381      	movs	r3, #129	; 0x81
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	0018      	movs	r0, r3
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b004      	add	sp, #16
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	23af      	movs	r3, #175	; 0xaf
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	58d3      	ldr	r3, [r2, r3]
 8007fe4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	23af      	movs	r3, #175	; 0xaf
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	58d3      	ldr	r3, [r2, r3]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <USBD_CDC_ReceivePacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e018      	b.n	8008028 <USBD_CDC_ReceivePacket+0x54>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	7c1b      	ldrb	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	2381      	movs	r3, #129	; 0x81
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	58d2      	ldr	r2, [r2, r3]
 8008006:	2380      	movs	r3, #128	; 0x80
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	2101      	movs	r1, #1
 800800e:	f7f9 faf2 	bl	80015f6 <USBD_LL_PrepareReceive>
 8008012:	e008      	b.n	8008026 <USBD_CDC_ReceivePacket+0x52>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	2381      	movs	r3, #129	; 0x81
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	58d2      	ldr	r2, [r2, r3]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	2340      	movs	r3, #64	; 0x40
 8008020:	2101      	movs	r1, #1
 8008022:	f7f9 fae8 	bl	80015f6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	0018      	movs	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	b004      	add	sp, #16
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008030:	b5b0      	push	{r4, r5, r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	1dfb      	adds	r3, r7, #7
 800803c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008044:	2303      	movs	r3, #3
 8008046:	e029      	b.n	800809c <USBD_Init+0x6c>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	23ae      	movs	r3, #174	; 0xae
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	2100      	movs	r1, #0
 8008050:	50d1      	str	r1, [r2, r3]
  pdev->pUserData = NULL;
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	23b0      	movs	r3, #176	; 0xb0
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	2100      	movs	r1, #0
 800805a:	50d1      	str	r1, [r2, r3]
  pdev->pConfDesc = NULL;
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	23b3      	movs	r3, #179	; 0xb3
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	2100      	movs	r1, #0
 8008064:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	23ad      	movs	r3, #173	; 0xad
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	23a7      	movs	r3, #167	; 0xa7
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	2101      	movs	r1, #1
 800807e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	1dfa      	adds	r2, r7, #7
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008088:	2517      	movs	r5, #23
 800808a:	197c      	adds	r4, r7, r5
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	0018      	movs	r0, r3
 8008090:	f7f9 f8d6 	bl	8001240 <USBD_LL_Init>
 8008094:	0003      	movs	r3, r0
 8008096:	7023      	strb	r3, [r4, #0]

  return ret;
 8008098:	197b      	adds	r3, r7, r5
 800809a:	781b      	ldrb	r3, [r3, #0]
}
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b006      	add	sp, #24
 80080a2:	bdb0      	pop	{r4, r5, r7, pc}

080080a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ae:	230e      	movs	r3, #14
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	2200      	movs	r2, #0
 80080b4:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	e01a      	b.n	80080f6 <USBD_RegisterClass+0x52>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	23ae      	movs	r3, #174	; 0xae
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	23ae      	movs	r3, #174	; 0xae
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	58d3      	ldr	r3, [r2, r3]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00d      	beq.n	80080f4 <USBD_RegisterClass+0x50>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	23ae      	movs	r3, #174	; 0xae
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	58d3      	ldr	r3, [r2, r3]
 80080e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e2:	220e      	movs	r2, #14
 80080e4:	18ba      	adds	r2, r7, r2
 80080e6:	0010      	movs	r0, r2
 80080e8:	4798      	blx	r3
 80080ea:	0001      	movs	r1, r0
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	23b3      	movs	r3, #179	; 0xb3
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	0018      	movs	r0, r3
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b004      	add	sp, #16
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	0018      	movs	r0, r3
 800810a:	f7f9 f90b 	bl	8001324 <USBD_LL_Start>
 800810e:	0003      	movs	r3, r0
}
 8008110:	0018      	movs	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	b002      	add	sp, #8
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	0018      	movs	r0, r3
 8008124:	46bd      	mov	sp, r7
 8008126:	b002      	add	sp, #8
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800812a:	b590      	push	{r4, r7, lr}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	000a      	movs	r2, r1
 8008134:	1cfb      	adds	r3, r7, #3
 8008136:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008138:	210f      	movs	r1, #15
 800813a:	187b      	adds	r3, r7, r1
 800813c:	2203      	movs	r2, #3
 800813e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	23ae      	movs	r3, #174	; 0xae
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	58d3      	ldr	r3, [r2, r3]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00c      	beq.n	8008166 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	23ae      	movs	r3, #174	; 0xae
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	58d3      	ldr	r3, [r2, r3]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	187c      	adds	r4, r7, r1
 8008158:	1cfa      	adds	r2, r7, #3
 800815a:	7811      	ldrb	r1, [r2, #0]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	0010      	movs	r0, r2
 8008160:	4798      	blx	r3
 8008162:	0003      	movs	r3, r0
 8008164:	7023      	strb	r3, [r4, #0]
  }

  return ret;
 8008166:	230f      	movs	r3, #15
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	781b      	ldrb	r3, [r3, #0]
}
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b005      	add	sp, #20
 8008172:	bd90      	pop	{r4, r7, pc}

08008174 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	000a      	movs	r2, r1
 800817e:	1cfb      	adds	r3, r7, #3
 8008180:	701a      	strb	r2, [r3, #0]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	23ae      	movs	r3, #174	; 0xae
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	58d3      	ldr	r3, [r2, r3]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <USBD_ClrClassConfig+0x2e>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	23ae      	movs	r3, #174	; 0xae
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	58d3      	ldr	r3, [r2, r3]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	1cfa      	adds	r2, r7, #3
 800819a:	7811      	ldrb	r1, [r2, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	0010      	movs	r0, r2
 80081a0:	4798      	blx	r3
  }

  return USBD_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	0018      	movs	r0, r3
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b002      	add	sp, #8
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081ac:	b590      	push	{r4, r7, lr}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a30      	ldr	r2, [pc, #192]	; (800827c <USBD_LL_SetupStage+0xd0>)
 80081ba:	4694      	mov	ip, r2
 80081bc:	4463      	add	r3, ip
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	0011      	movs	r1, r2
 80081c2:	0018      	movs	r0, r3
 80081c4:	f001 f89e 	bl	8009304 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	23a5      	movs	r3, #165	; 0xa5
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	2101      	movs	r1, #1
 80081d0:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	23ac      	movs	r3, #172	; 0xac
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	5ad3      	ldrh	r3, [r2, r3]
 80081da:	0019      	movs	r1, r3
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	23a6      	movs	r3, #166	; 0xa6
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a25      	ldr	r2, [pc, #148]	; (800827c <USBD_LL_SetupStage+0xd0>)
 80081e8:	5c9b      	ldrb	r3, [r3, r2]
 80081ea:	001a      	movs	r2, r3
 80081ec:	231f      	movs	r3, #31
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d01f      	beq.n	8008234 <USBD_LL_SetupStage+0x88>
 80081f4:	d82b      	bhi.n	800824e <USBD_LL_SetupStage+0xa2>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <USBD_LL_SetupStage+0x54>
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d00d      	beq.n	800821a <USBD_LL_SetupStage+0x6e>
 80081fe:	e026      	b.n	800824e <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a1e      	ldr	r2, [pc, #120]	; (800827c <USBD_LL_SetupStage+0xd0>)
 8008204:	189a      	adds	r2, r3, r2
 8008206:	230f      	movs	r3, #15
 8008208:	18fc      	adds	r4, r7, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	0011      	movs	r1, r2
 800820e:	0018      	movs	r0, r3
 8008210:	f000 fa42 	bl	8008698 <USBD_StdDevReq>
 8008214:	0003      	movs	r3, r0
 8008216:	7023      	strb	r3, [r4, #0]
      break;
 8008218:	e029      	b.n	800826e <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a17      	ldr	r2, [pc, #92]	; (800827c <USBD_LL_SetupStage+0xd0>)
 800821e:	189a      	adds	r2, r3, r2
 8008220:	230f      	movs	r3, #15
 8008222:	18fc      	adds	r4, r7, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	0011      	movs	r1, r2
 8008228:	0018      	movs	r0, r3
 800822a:	f000 faaf 	bl	800878c <USBD_StdItfReq>
 800822e:	0003      	movs	r3, r0
 8008230:	7023      	strb	r3, [r4, #0]
      break;
 8008232:	e01c      	b.n	800826e <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a11      	ldr	r2, [pc, #68]	; (800827c <USBD_LL_SetupStage+0xd0>)
 8008238:	189a      	adds	r2, r3, r2
 800823a:	230f      	movs	r3, #15
 800823c:	18fc      	adds	r4, r7, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	0011      	movs	r1, r2
 8008242:	0018      	movs	r0, r3
 8008244:	f000 fafc 	bl	8008840 <USBD_StdEPReq>
 8008248:	0003      	movs	r3, r0
 800824a:	7023      	strb	r3, [r4, #0]
      break;
 800824c:	e00f      	b.n	800826e <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a0a      	ldr	r2, [pc, #40]	; (800827c <USBD_LL_SetupStage+0xd0>)
 8008252:	5c9b      	ldrb	r3, [r3, r2]
 8008254:	227f      	movs	r2, #127	; 0x7f
 8008256:	4393      	bics	r3, r2
 8008258:	b2da      	uxtb	r2, r3
 800825a:	230f      	movs	r3, #15
 800825c:	18fc      	adds	r4, r7, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	0011      	movs	r1, r2
 8008262:	0018      	movs	r0, r3
 8008264:	f7f9 f8e5 	bl	8001432 <USBD_LL_StallEP>
 8008268:	0003      	movs	r3, r0
 800826a:	7023      	strb	r3, [r4, #0]
      break;
 800826c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800826e:	230f      	movs	r3, #15
 8008270:	18fb      	adds	r3, r7, r3
 8008272:	781b      	ldrb	r3, [r3, #0]
}
 8008274:	0018      	movs	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	b005      	add	sp, #20
 800827a:	bd90      	pop	{r4, r7, pc}
 800827c:	000002aa 	.word	0x000002aa

08008280 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008280:	b5b0      	push	{r4, r5, r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	607a      	str	r2, [r7, #4]
 800828a:	200b      	movs	r0, #11
 800828c:	183b      	adds	r3, r7, r0
 800828e:	1c0a      	adds	r2, r1, #0
 8008290:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008292:	183b      	adds	r3, r7, r0
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d13f      	bne.n	800831a <USBD_LL_DataOutStage+0x9a>
  {
    pep = &pdev->ep_out[0];
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3355      	adds	r3, #85	; 0x55
 800829e:	33ff      	adds	r3, #255	; 0xff
 80082a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	23a5      	movs	r3, #165	; 0xa5
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	58d3      	ldr	r3, [r2, r3]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d159      	bne.n	8008362 <USBD_LL_DataOutStage+0xe2>
    {
      if (pep->rem_length > pep->maxpacket)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d914      	bls.n	80082e4 <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	1ad2      	subs	r2, r2, r3
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	68d9      	ldr	r1, [r3, #12]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	000b      	movs	r3, r1
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d900      	bls.n	80082d8 <USBD_LL_DataOutStage+0x58>
 80082d6:	0013      	movs	r3, r2
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	001a      	movs	r2, r3
 80082de:	f001 f923 	bl	8009528 <USBD_CtlContinueRx>
 80082e2:	e03e      	b.n	8008362 <USBD_LL_DataOutStage+0xe2>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	23a7      	movs	r3, #167	; 0xa7
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	5cd3      	ldrb	r3, [r2, r3]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d10e      	bne.n	8008310 <USBD_LL_DataOutStage+0x90>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	23ae      	movs	r3, #174	; 0xae
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	58d3      	ldr	r3, [r2, r3]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d007      	beq.n	8008310 <USBD_LL_DataOutStage+0x90>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	23ae      	movs	r3, #174	; 0xae
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	58d3      	ldr	r3, [r2, r3]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	0010      	movs	r0, r2
 800830e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	0018      	movs	r0, r3
 8008314:	f001 f919 	bl	800954a <USBD_CtlSendStatus>
 8008318:	e023      	b.n	8008362 <USBD_LL_DataOutStage+0xe2>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	23a7      	movs	r3, #167	; 0xa7
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	5cd3      	ldrb	r3, [r2, r3]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b03      	cmp	r3, #3
 8008326:	d11c      	bne.n	8008362 <USBD_LL_DataOutStage+0xe2>
    {
      if (pdev->pClass->DataOut != NULL)
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	23ae      	movs	r3, #174	; 0xae
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	58d3      	ldr	r3, [r2, r3]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d015      	beq.n	8008362 <USBD_LL_DataOutStage+0xe2>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	23ae      	movs	r3, #174	; 0xae
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	58d3      	ldr	r3, [r2, r3]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	2517      	movs	r5, #23
 8008342:	197c      	adds	r4, r7, r5
 8008344:	220b      	movs	r2, #11
 8008346:	18ba      	adds	r2, r7, r2
 8008348:	7811      	ldrb	r1, [r2, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	0010      	movs	r0, r2
 800834e:	4798      	blx	r3
 8008350:	0003      	movs	r3, r0
 8008352:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8008354:	197b      	adds	r3, r7, r5
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <USBD_LL_DataOutStage+0xe2>
        {
          return ret;
 800835c:	197b      	adds	r3, r7, r5
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	e000      	b.n	8008364 <USBD_LL_DataOutStage+0xe4>
        }
      }
    }
  }

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	0018      	movs	r0, r3
 8008366:	46bd      	mov	sp, r7
 8008368:	b006      	add	sp, #24
 800836a:	bdb0      	pop	{r4, r5, r7, pc}

0800836c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800836c:	b5b0      	push	{r4, r5, r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	607a      	str	r2, [r7, #4]
 8008376:	200b      	movs	r0, #11
 8008378:	183b      	adds	r3, r7, r0
 800837a:	1c0a      	adds	r2, r1, #0
 800837c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800837e:	183b      	adds	r3, r7, r0
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d000      	beq.n	8008388 <USBD_LL_DataInStage+0x1c>
 8008386:	e078      	b.n	800847a <USBD_LL_DataInStage+0x10e>
  {
    pep = &pdev->ep_in[0];
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3314      	adds	r3, #20
 800838c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	23a5      	movs	r3, #165	; 0xa5
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	58d3      	ldr	r3, [r2, r3]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d15f      	bne.n	800845a <USBD_LL_DataInStage+0xee>
    {
      if (pep->rem_length > pep->maxpacket)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d914      	bls.n	80083d0 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	0018      	movs	r0, r3
 80083be:	f001 f882 	bl	80094c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	2300      	movs	r3, #0
 80083c6:	2200      	movs	r2, #0
 80083c8:	2100      	movs	r1, #0
 80083ca:	f7f9 f914 	bl	80015f6 <USBD_LL_PrepareReceive>
 80083ce:	e044      	b.n	800845a <USBD_LL_DataInStage+0xee>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d11f      	bne.n	800841c <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d319      	bcc.n	800841c <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	68f9      	ldr	r1, [r7, #12]
 80083ee:	23a6      	movs	r3, #166	; 0xa6
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d211      	bcs.n	800841c <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	0018      	movs	r0, r3
 8008400:	f001 f861 	bl	80094c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	23a6      	movs	r3, #166	; 0xa6
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	2100      	movs	r1, #0
 800840c:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	2300      	movs	r3, #0
 8008412:	2200      	movs	r2, #0
 8008414:	2100      	movs	r1, #0
 8008416:	f7f9 f8ee 	bl	80015f6 <USBD_LL_PrepareReceive>
 800841a:	e01e      	b.n	800845a <USBD_LL_DataInStage+0xee>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	23a7      	movs	r3, #167	; 0xa7
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	5cd3      	ldrb	r3, [r2, r3]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d10e      	bne.n	8008448 <USBD_LL_DataInStage+0xdc>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	23ae      	movs	r3, #174	; 0xae
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	58d3      	ldr	r3, [r2, r3]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d007      	beq.n	8008448 <USBD_LL_DataInStage+0xdc>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	23ae      	movs	r3, #174	; 0xae
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	58d3      	ldr	r3, [r2, r3]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	0010      	movs	r0, r2
 8008446:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2180      	movs	r1, #128	; 0x80
 800844c:	0018      	movs	r0, r3
 800844e:	f7f8 fff0 	bl	8001432 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	0018      	movs	r0, r3
 8008456:	f001 f88c 	bl	8009572 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	23a8      	movs	r3, #168	; 0xa8
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	5cd3      	ldrb	r3, [r2, r3]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d12d      	bne.n	80084c2 <USBD_LL_DataInStage+0x156>
    {
      (void)USBD_RunTestMode(pdev);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	0018      	movs	r0, r3
 800846a:	f7ff fe55 	bl	8008118 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	23a8      	movs	r3, #168	; 0xa8
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	2100      	movs	r1, #0
 8008476:	54d1      	strb	r1, [r2, r3]
 8008478:	e023      	b.n	80084c2 <USBD_LL_DataInStage+0x156>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	23a7      	movs	r3, #167	; 0xa7
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	5cd3      	ldrb	r3, [r2, r3]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b03      	cmp	r3, #3
 8008486:	d11c      	bne.n	80084c2 <USBD_LL_DataInStage+0x156>
    {
      if (pdev->pClass->DataIn != NULL)
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	23ae      	movs	r3, #174	; 0xae
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	58d3      	ldr	r3, [r2, r3]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d015      	beq.n	80084c2 <USBD_LL_DataInStage+0x156>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	23ae      	movs	r3, #174	; 0xae
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	58d3      	ldr	r3, [r2, r3]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	2517      	movs	r5, #23
 80084a2:	197c      	adds	r4, r7, r5
 80084a4:	220b      	movs	r2, #11
 80084a6:	18ba      	adds	r2, r7, r2
 80084a8:	7811      	ldrb	r1, [r2, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	0010      	movs	r0, r2
 80084ae:	4798      	blx	r3
 80084b0:	0003      	movs	r3, r0
 80084b2:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 80084b4:	197b      	adds	r3, r7, r5
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <USBD_LL_DataInStage+0x156>
        {
          return ret;
 80084bc:	197b      	adds	r3, r7, r5
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	e000      	b.n	80084c4 <USBD_LL_DataInStage+0x158>
        }
      }
    }
  }

  return USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	0018      	movs	r0, r3
 80084c6:	46bd      	mov	sp, r7
 80084c8:	b006      	add	sp, #24
 80084ca:	bdb0      	pop	{r4, r5, r7, pc}

080084cc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	23a7      	movs	r3, #167	; 0xa7
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	2101      	movs	r1, #1
 80084dc:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	23a5      	movs	r3, #165	; 0xa5
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	2100      	movs	r1, #0
 80084e6:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	23a9      	movs	r3, #169	; 0xa9
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	2100      	movs	r1, #0
 80084f6:	50d1      	str	r1, [r2, r3]

  if (pdev->pClass == NULL)
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	23ae      	movs	r3, #174	; 0xae
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	58d3      	ldr	r3, [r2, r3]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <USBD_LL_Reset+0x3c>
  {
    return USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	e034      	b.n	8008572 <USBD_LL_Reset+0xa6>
  }

  if (pdev->pClassData != NULL)
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	23af      	movs	r3, #175	; 0xaf
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	58d3      	ldr	r3, [r2, r3]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d011      	beq.n	8008538 <USBD_LL_Reset+0x6c>
  {
    if (pdev->pClass->DeInit != NULL)
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	23ae      	movs	r3, #174	; 0xae
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	58d3      	ldr	r3, [r2, r3]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <USBD_LL_Reset+0x6c>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	23ae      	movs	r3, #174	; 0xae
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	58d3      	ldr	r3, [r2, r3]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	b2d9      	uxtb	r1, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	0018      	movs	r0, r3
 8008536:	4790      	blx	r2
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	2340      	movs	r3, #64	; 0x40
 800853c:	2200      	movs	r2, #0
 800853e:	2100      	movs	r1, #0
 8008540:	f7f8 ff15 	bl	800136e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	23b2      	movs	r3, #178	; 0xb2
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	2101      	movs	r1, #1
 800854c:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	23b0      	movs	r3, #176	; 0xb0
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	2140      	movs	r1, #64	; 0x40
 8008556:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	2340      	movs	r3, #64	; 0x40
 800855c:	2200      	movs	r2, #0
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	f7f8 ff05 	bl	800136e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2240      	movs	r2, #64	; 0x40
 800856e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	0018      	movs	r0, r3
 8008574:	46bd      	mov	sp, r7
 8008576:	b002      	add	sp, #8
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	000a      	movs	r2, r1
 8008584:	1cfb      	adds	r3, r7, #3
 8008586:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	1cfa      	adds	r2, r7, #3
 800858c:	7812      	ldrb	r2, [r2, #0]
 800858e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008590:	2300      	movs	r3, #0
}
 8008592:	0018      	movs	r0, r3
 8008594:	46bd      	mov	sp, r7
 8008596:	b002      	add	sp, #8
 8008598:	bd80      	pop	{r7, pc}
	...

0800859c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	23a7      	movs	r3, #167	; 0xa7
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	5cd3      	ldrb	r3, [r2, r3]
 80085ac:	b2d9      	uxtb	r1, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a05      	ldr	r2, [pc, #20]	; (80085c8 <USBD_LL_Suspend+0x2c>)
 80085b2:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	23a7      	movs	r3, #167	; 0xa7
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	2104      	movs	r1, #4
 80085bc:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	0018      	movs	r0, r3
 80085c2:	46bd      	mov	sp, r7
 80085c4:	b002      	add	sp, #8
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	0000029d 	.word	0x0000029d

080085cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	23a7      	movs	r3, #167	; 0xa7
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	5cd3      	ldrb	r3, [r2, r3]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d107      	bne.n	80085f2 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a05      	ldr	r2, [pc, #20]	; (80085fc <USBD_LL_Resume+0x30>)
 80085e6:	5c9b      	ldrb	r3, [r3, r2]
 80085e8:	b2d9      	uxtb	r1, r3
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	23a7      	movs	r3, #167	; 0xa7
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	0018      	movs	r0, r3
 80085f6:	46bd      	mov	sp, r7
 80085f8:	b002      	add	sp, #8
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	0000029d 	.word	0x0000029d

08008600 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	23ae      	movs	r3, #174	; 0xae
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	58d3      	ldr	r3, [r2, r3]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <USBD_LL_SOF+0x18>
  {
    return USBD_FAIL;
 8008614:	2303      	movs	r3, #3
 8008616:	e016      	b.n	8008646 <USBD_LL_SOF+0x46>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	23a7      	movs	r3, #167	; 0xa7
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	5cd3      	ldrb	r3, [r2, r3]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b03      	cmp	r3, #3
 8008624:	d10e      	bne.n	8008644 <USBD_LL_SOF+0x44>
  {
    if (pdev->pClass->SOF != NULL)
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	23ae      	movs	r3, #174	; 0xae
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	58d3      	ldr	r3, [r2, r3]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d007      	beq.n	8008644 <USBD_LL_SOF+0x44>
    {
      (void)pdev->pClass->SOF(pdev);
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	23ae      	movs	r3, #174	; 0xae
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	58d3      	ldr	r3, [r2, r3]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	0010      	movs	r0, r2
 8008642:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	0018      	movs	r0, r3
 8008648:	46bd      	mov	sp, r7
 800864a:	b002      	add	sp, #8
 800864c:	bd80      	pop	{r7, pc}

0800864e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	2112      	movs	r1, #18
 8008660:	187b      	adds	r3, r7, r1
 8008662:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	3301      	adds	r3, #1
 8008668:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	2010      	movs	r0, #16
 8008670:	183b      	adds	r3, r7, r0
 8008672:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008674:	183b      	adds	r3, r7, r0
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	021b      	lsls	r3, r3, #8
 800867a:	b21a      	sxth	r2, r3
 800867c:	187b      	adds	r3, r7, r1
 800867e:	2100      	movs	r1, #0
 8008680:	5e5b      	ldrsh	r3, [r3, r1]
 8008682:	4313      	orrs	r3, r2
 8008684:	b21a      	sxth	r2, r3
 8008686:	210e      	movs	r1, #14
 8008688:	187b      	adds	r3, r7, r1
 800868a:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 800868c:	187b      	adds	r3, r7, r1
 800868e:	881b      	ldrh	r3, [r3, #0]
}
 8008690:	0018      	movs	r0, r3
 8008692:	46bd      	mov	sp, r7
 8008694:	b006      	add	sp, #24
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008698:	b590      	push	{r4, r7, lr}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086a2:	230f      	movs	r3, #15
 80086a4:	18fb      	adds	r3, r7, r3
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	001a      	movs	r2, r3
 80086b0:	2360      	movs	r3, #96	; 0x60
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b40      	cmp	r3, #64	; 0x40
 80086b6:	d004      	beq.n	80086c2 <USBD_StdDevReq+0x2a>
 80086b8:	d857      	bhi.n	800876a <USBD_StdDevReq+0xd2>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00f      	beq.n	80086de <USBD_StdDevReq+0x46>
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d153      	bne.n	800876a <USBD_StdDevReq+0xd2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	23ae      	movs	r3, #174	; 0xae
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	58d3      	ldr	r3, [r2, r3]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	220f      	movs	r2, #15
 80086ce:	18bc      	adds	r4, r7, r2
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	0010      	movs	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	0003      	movs	r3, r0
 80086da:	7023      	strb	r3, [r4, #0]
      break;
 80086dc:	e04c      	b.n	8008778 <USBD_StdDevReq+0xe0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	2b09      	cmp	r3, #9
 80086e4:	d839      	bhi.n	800875a <USBD_StdDevReq+0xc2>
 80086e6:	009a      	lsls	r2, r3, #2
 80086e8:	4b27      	ldr	r3, [pc, #156]	; (8008788 <USBD_StdDevReq+0xf0>)
 80086ea:	18d3      	adds	r3, r2, r3
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	0011      	movs	r1, r2
 80086f6:	0018      	movs	r0, r3
 80086f8:	f000 fa58 	bl	8008bac <USBD_GetDescriptor>
          break;
 80086fc:	e034      	b.n	8008768 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f000 fc2b 	bl	8008f60 <USBD_SetAddress>
          break;
 800870a:	e02d      	b.n	8008768 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800870c:	230f      	movs	r3, #15
 800870e:	18fc      	adds	r4, r7, r3
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	0011      	movs	r1, r2
 8008716:	0018      	movs	r0, r3
 8008718:	f000 fc78 	bl	800900c <USBD_SetConfig>
 800871c:	0003      	movs	r3, r0
 800871e:	7023      	strb	r3, [r4, #0]
          break;
 8008720:	e022      	b.n	8008768 <USBD_StdDevReq+0xd0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	0011      	movs	r1, r2
 8008728:	0018      	movs	r0, r3
 800872a:	f000 fd37 	bl	800919c <USBD_GetConfig>
          break;
 800872e:	e01b      	b.n	8008768 <USBD_StdDevReq+0xd0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	0011      	movs	r1, r2
 8008736:	0018      	movs	r0, r3
 8008738:	f000 fd6c 	bl	8009214 <USBD_GetStatus>
          break;
 800873c:	e014      	b.n	8008768 <USBD_StdDevReq+0xd0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	0011      	movs	r1, r2
 8008744:	0018      	movs	r0, r3
 8008746:	f000 fda0 	bl	800928a <USBD_SetFeature>
          break;
 800874a:	e00d      	b.n	8008768 <USBD_StdDevReq+0xd0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	0011      	movs	r1, r2
 8008752:	0018      	movs	r0, r3
 8008754:	f000 fdaf 	bl	80092b6 <USBD_ClrFeature>
          break;
 8008758:	e006      	b.n	8008768 <USBD_StdDevReq+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	0011      	movs	r1, r2
 8008760:	0018      	movs	r0, r3
 8008762:	f000 fe0c 	bl	800937e <USBD_CtlError>
          break;
 8008766:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008768:	e006      	b.n	8008778 <USBD_StdDevReq+0xe0>

    default:
      USBD_CtlError(pdev, req);
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	0011      	movs	r1, r2
 8008770:	0018      	movs	r0, r3
 8008772:	f000 fe04 	bl	800937e <USBD_CtlError>
      break;
 8008776:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008778:	230f      	movs	r3, #15
 800877a:	18fb      	adds	r3, r7, r3
 800877c:	781b      	ldrb	r3, [r3, #0]
}
 800877e:	0018      	movs	r0, r3
 8008780:	46bd      	mov	sp, r7
 8008782:	b005      	add	sp, #20
 8008784:	bd90      	pop	{r4, r7, pc}
 8008786:	46c0      	nop			; (mov r8, r8)
 8008788:	0800a218 	.word	0x0800a218

0800878c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b5b0      	push	{r4, r5, r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008796:	230f      	movs	r3, #15
 8008798:	18fb      	adds	r3, r7, r3
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	001a      	movs	r2, r3
 80087a4:	2360      	movs	r3, #96	; 0x60
 80087a6:	4013      	ands	r3, r2
 80087a8:	2b40      	cmp	r3, #64	; 0x40
 80087aa:	d004      	beq.n	80087b6 <USBD_StdItfReq+0x2a>
 80087ac:	d83a      	bhi.n	8008824 <USBD_StdItfReq+0x98>
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <USBD_StdItfReq+0x2a>
 80087b2:	2b20      	cmp	r3, #32
 80087b4:	d136      	bne.n	8008824 <USBD_StdItfReq+0x98>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	23a7      	movs	r3, #167	; 0xa7
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	5cd3      	ldrb	r3, [r2, r3]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d825      	bhi.n	8008812 <USBD_StdItfReq+0x86>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	889b      	ldrh	r3, [r3, #4]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d819      	bhi.n	8008804 <USBD_StdItfReq+0x78>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	23ae      	movs	r3, #174	; 0xae
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	58d3      	ldr	r3, [r2, r3]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	250f      	movs	r5, #15
 80087dc:	197c      	adds	r4, r7, r5
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	0010      	movs	r0, r2
 80087e4:	4798      	blx	r3
 80087e6:	0003      	movs	r3, r0
 80087e8:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	88db      	ldrh	r3, [r3, #6]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d116      	bne.n	8008820 <USBD_StdItfReq+0x94>
 80087f2:	197b      	adds	r3, r7, r5
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d112      	bne.n	8008820 <USBD_StdItfReq+0x94>
            {
              (void)USBD_CtlSendStatus(pdev);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	0018      	movs	r0, r3
 80087fe:	f000 fea4 	bl	800954a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008802:	e00d      	b.n	8008820 <USBD_StdItfReq+0x94>
            USBD_CtlError(pdev, req);
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	0011      	movs	r1, r2
 800880a:	0018      	movs	r0, r3
 800880c:	f000 fdb7 	bl	800937e <USBD_CtlError>
          break;
 8008810:	e006      	b.n	8008820 <USBD_StdItfReq+0x94>

        default:
          USBD_CtlError(pdev, req);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	0011      	movs	r1, r2
 8008818:	0018      	movs	r0, r3
 800881a:	f000 fdb0 	bl	800937e <USBD_CtlError>
          break;
 800881e:	e000      	b.n	8008822 <USBD_StdItfReq+0x96>
          break;
 8008820:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008822:	e006      	b.n	8008832 <USBD_StdItfReq+0xa6>

    default:
      USBD_CtlError(pdev, req);
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	0011      	movs	r1, r2
 800882a:	0018      	movs	r0, r3
 800882c:	f000 fda7 	bl	800937e <USBD_CtlError>
      break;
 8008830:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008832:	230f      	movs	r3, #15
 8008834:	18fb      	adds	r3, r7, r3
 8008836:	781b      	ldrb	r3, [r3, #0]
}
 8008838:	0018      	movs	r0, r3
 800883a:	46bd      	mov	sp, r7
 800883c:	b004      	add	sp, #16
 800883e:	bdb0      	pop	{r4, r5, r7, pc}

08008840 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008840:	b590      	push	{r4, r7, lr}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800884a:	230f      	movs	r3, #15
 800884c:	18fb      	adds	r3, r7, r3
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
  ep_addr = LOBYTE(req->wIndex);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	889a      	ldrh	r2, [r3, #4]
 8008856:	230e      	movs	r3, #14
 8008858:	18fb      	adds	r3, r7, r3
 800885a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	001a      	movs	r2, r3
 8008862:	2360      	movs	r3, #96	; 0x60
 8008864:	4013      	ands	r3, r2
 8008866:	2b40      	cmp	r3, #64	; 0x40
 8008868:	d006      	beq.n	8008878 <USBD_StdEPReq+0x38>
 800886a:	d900      	bls.n	800886e <USBD_StdEPReq+0x2e>
 800886c:	e18f      	b.n	8008b8e <USBD_StdEPReq+0x34e>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d010      	beq.n	8008894 <USBD_StdEPReq+0x54>
 8008872:	2b20      	cmp	r3, #32
 8008874:	d000      	beq.n	8008878 <USBD_StdEPReq+0x38>
 8008876:	e18a      	b.n	8008b8e <USBD_StdEPReq+0x34e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	23ae      	movs	r3, #174	; 0xae
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	58d3      	ldr	r3, [r2, r3]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	220f      	movs	r2, #15
 8008884:	18bc      	adds	r4, r7, r2
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	0010      	movs	r0, r2
 800888c:	4798      	blx	r3
 800888e:	0003      	movs	r3, r0
 8008890:	7023      	strb	r3, [r4, #0]
      break;
 8008892:	e183      	b.n	8008b9c <USBD_StdEPReq+0x35c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2b03      	cmp	r3, #3
 800889a:	d007      	beq.n	80088ac <USBD_StdEPReq+0x6c>
 800889c:	dd00      	ble.n	80088a0 <USBD_StdEPReq+0x60>
 800889e:	e16e      	b.n	8008b7e <USBD_StdEPReq+0x33e>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d100      	bne.n	80088a6 <USBD_StdEPReq+0x66>
 80088a4:	e0a3      	b.n	80089ee <USBD_StdEPReq+0x1ae>
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d04d      	beq.n	8008946 <USBD_StdEPReq+0x106>
 80088aa:	e168      	b.n	8008b7e <USBD_StdEPReq+0x33e>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	23a7      	movs	r3, #167	; 0xa7
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	5cd3      	ldrb	r3, [r2, r3]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d002      	beq.n	80088c0 <USBD_StdEPReq+0x80>
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d01e      	beq.n	80088fc <USBD_StdEPReq+0xbc>
 80088be:	e03a      	b.n	8008936 <USBD_StdEPReq+0xf6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088c0:	220e      	movs	r2, #14
 80088c2:	18bb      	adds	r3, r7, r2
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d011      	beq.n	80088ee <USBD_StdEPReq+0xae>
 80088ca:	18bb      	adds	r3, r7, r2
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b80      	cmp	r3, #128	; 0x80
 80088d0:	d00d      	beq.n	80088ee <USBD_StdEPReq+0xae>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088d2:	18bb      	adds	r3, r7, r2
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	0011      	movs	r1, r2
 80088da:	0018      	movs	r0, r3
 80088dc:	f7f8 fda9 	bl	8001432 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2180      	movs	r1, #128	; 0x80
 80088e4:	0018      	movs	r0, r3
 80088e6:	f7f8 fda4 	bl	8001432 <USBD_LL_StallEP>
 80088ea:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088ec:	e02a      	b.n	8008944 <USBD_StdEPReq+0x104>
                USBD_CtlError(pdev, req);
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	0011      	movs	r1, r2
 80088f4:	0018      	movs	r0, r3
 80088f6:	f000 fd42 	bl	800937e <USBD_CtlError>
              break;
 80088fa:	e023      	b.n	8008944 <USBD_StdEPReq+0x104>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	885b      	ldrh	r3, [r3, #2]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d113      	bne.n	800892c <USBD_StdEPReq+0xec>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008904:	220e      	movs	r2, #14
 8008906:	18bb      	adds	r3, r7, r2
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00e      	beq.n	800892c <USBD_StdEPReq+0xec>
 800890e:	18bb      	adds	r3, r7, r2
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b80      	cmp	r3, #128	; 0x80
 8008914:	d00a      	beq.n	800892c <USBD_StdEPReq+0xec>
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <USBD_StdEPReq+0xec>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800891e:	18bb      	adds	r3, r7, r2
 8008920:	781a      	ldrb	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	0011      	movs	r1, r2
 8008926:	0018      	movs	r0, r3
 8008928:	f7f8 fd83 	bl	8001432 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	0018      	movs	r0, r3
 8008930:	f000 fe0b 	bl	800954a <USBD_CtlSendStatus>

              break;
 8008934:	e006      	b.n	8008944 <USBD_StdEPReq+0x104>

            default:
              USBD_CtlError(pdev, req);
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	0011      	movs	r1, r2
 800893c:	0018      	movs	r0, r3
 800893e:	f000 fd1e 	bl	800937e <USBD_CtlError>
              break;
 8008942:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008944:	e122      	b.n	8008b8c <USBD_StdEPReq+0x34c>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	23a7      	movs	r3, #167	; 0xa7
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	5cd3      	ldrb	r3, [r2, r3]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	d002      	beq.n	800895a <USBD_StdEPReq+0x11a>
 8008954:	2b03      	cmp	r3, #3
 8008956:	d01e      	beq.n	8008996 <USBD_StdEPReq+0x156>
 8008958:	e040      	b.n	80089dc <USBD_StdEPReq+0x19c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800895a:	220e      	movs	r2, #14
 800895c:	18bb      	adds	r3, r7, r2
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d011      	beq.n	8008988 <USBD_StdEPReq+0x148>
 8008964:	18bb      	adds	r3, r7, r2
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	2b80      	cmp	r3, #128	; 0x80
 800896a:	d00d      	beq.n	8008988 <USBD_StdEPReq+0x148>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800896c:	18bb      	adds	r3, r7, r2
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	0011      	movs	r1, r2
 8008974:	0018      	movs	r0, r3
 8008976:	f7f8 fd5c 	bl	8001432 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2180      	movs	r1, #128	; 0x80
 800897e:	0018      	movs	r0, r3
 8008980:	f7f8 fd57 	bl	8001432 <USBD_LL_StallEP>
 8008984:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008986:	e031      	b.n	80089ec <USBD_StdEPReq+0x1ac>
                USBD_CtlError(pdev, req);
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	0011      	movs	r1, r2
 800898e:	0018      	movs	r0, r3
 8008990:	f000 fcf5 	bl	800937e <USBD_CtlError>
              break;
 8008994:	e02a      	b.n	80089ec <USBD_StdEPReq+0x1ac>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	885b      	ldrh	r3, [r3, #2]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d125      	bne.n	80089ea <USBD_StdEPReq+0x1aa>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800899e:	210e      	movs	r1, #14
 80089a0:	187b      	adds	r3, r7, r1
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	227f      	movs	r2, #127	; 0x7f
 80089a6:	4013      	ands	r3, r2
 80089a8:	d006      	beq.n	80089b8 <USBD_StdEPReq+0x178>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80089aa:	187b      	adds	r3, r7, r1
 80089ac:	781a      	ldrb	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	0011      	movs	r1, r2
 80089b2:	0018      	movs	r0, r3
 80089b4:	f7f8 fd68 	bl	8001488 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	0018      	movs	r0, r3
 80089bc:	f000 fdc5 	bl	800954a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	23ae      	movs	r3, #174	; 0xae
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	58d3      	ldr	r3, [r2, r3]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	220f      	movs	r2, #15
 80089cc:	18bc      	adds	r4, r7, r2
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	0010      	movs	r0, r2
 80089d4:	4798      	blx	r3
 80089d6:	0003      	movs	r3, r0
 80089d8:	7023      	strb	r3, [r4, #0]
              }
              break;
 80089da:	e006      	b.n	80089ea <USBD_StdEPReq+0x1aa>

            default:
              USBD_CtlError(pdev, req);
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	0011      	movs	r1, r2
 80089e2:	0018      	movs	r0, r3
 80089e4:	f000 fccb 	bl	800937e <USBD_CtlError>
              break;
 80089e8:	e000      	b.n	80089ec <USBD_StdEPReq+0x1ac>
              break;
 80089ea:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80089ec:	e0ce      	b.n	8008b8c <USBD_StdEPReq+0x34c>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	23a7      	movs	r3, #167	; 0xa7
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	5cd3      	ldrb	r3, [r2, r3]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d002      	beq.n	8008a02 <USBD_StdEPReq+0x1c2>
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d03c      	beq.n	8008a7a <USBD_StdEPReq+0x23a>
 8008a00:	e0b5      	b.n	8008b6e <USBD_StdEPReq+0x32e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a02:	220e      	movs	r2, #14
 8008a04:	18bb      	adds	r3, r7, r2
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <USBD_StdEPReq+0x1e2>
 8008a0c:	18bb      	adds	r3, r7, r2
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b80      	cmp	r3, #128	; 0x80
 8008a12:	d006      	beq.n	8008a22 <USBD_StdEPReq+0x1e2>
              {
                USBD_CtlError(pdev, req);
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	0011      	movs	r1, r2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f000 fcaf 	bl	800937e <USBD_CtlError>
                break;
 8008a20:	e0ac      	b.n	8008b7c <USBD_StdEPReq+0x33c>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a22:	220e      	movs	r2, #14
 8008a24:	18bb      	adds	r3, r7, r2
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	b25b      	sxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da0c      	bge.n	8008a48 <USBD_StdEPReq+0x208>
 8008a2e:	18bb      	adds	r3, r7, r2
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	227f      	movs	r2, #127	; 0x7f
 8008a34:	401a      	ands	r2, r3
 8008a36:	0013      	movs	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	189b      	adds	r3, r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	3310      	adds	r3, #16
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	18d3      	adds	r3, r2, r3
 8008a44:	3304      	adds	r3, #4
 8008a46:	e00d      	b.n	8008a64 <USBD_StdEPReq+0x224>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a48:	230e      	movs	r3, #14
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	227f      	movs	r2, #127	; 0x7f
 8008a50:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a52:	0013      	movs	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	189b      	adds	r3, r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	3351      	adds	r3, #81	; 0x51
 8008a5c:	33ff      	adds	r3, #255	; 0xff
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	18d3      	adds	r3, r2, r3
 8008a62:	3304      	adds	r3, #4
 8008a64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2202      	movs	r2, #2
 8008a72:	0018      	movs	r0, r3
 8008a74:	f000 fd0b 	bl	800948e <USBD_CtlSendData>
              break;
 8008a78:	e080      	b.n	8008b7c <USBD_StdEPReq+0x33c>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a7a:	220e      	movs	r2, #14
 8008a7c:	18bb      	adds	r3, r7, r2
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	b25b      	sxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	da14      	bge.n	8008ab0 <USBD_StdEPReq+0x270>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a86:	18bb      	adds	r3, r7, r2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	220f      	movs	r2, #15
 8008a8c:	401a      	ands	r2, r3
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	0013      	movs	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	189b      	adds	r3, r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	18cb      	adds	r3, r1, r3
 8008a9a:	3324      	adds	r3, #36	; 0x24
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d11e      	bne.n	8008ae0 <USBD_StdEPReq+0x2a0>
                {
                  USBD_CtlError(pdev, req);
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	0011      	movs	r1, r2
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f000 fc68 	bl	800937e <USBD_CtlError>
                  break;
 8008aae:	e065      	b.n	8008b7c <USBD_StdEPReq+0x33c>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ab0:	230e      	movs	r3, #14
 8008ab2:	18fb      	adds	r3, r7, r3
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	220f      	movs	r2, #15
 8008ab8:	401a      	ands	r2, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	23b2      	movs	r3, #178	; 0xb2
 8008abe:	0059      	lsls	r1, r3, #1
 8008ac0:	0013      	movs	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	189b      	adds	r3, r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	18c3      	adds	r3, r0, r3
 8008aca:	185b      	adds	r3, r3, r1
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <USBD_StdEPReq+0x2a0>
                {
                  USBD_CtlError(pdev, req);
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	0011      	movs	r1, r2
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f000 fc50 	bl	800937e <USBD_CtlError>
                  break;
 8008ade:	e04d      	b.n	8008b7c <USBD_StdEPReq+0x33c>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ae0:	220e      	movs	r2, #14
 8008ae2:	18bb      	adds	r3, r7, r2
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b25b      	sxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	da0c      	bge.n	8008b06 <USBD_StdEPReq+0x2c6>
 8008aec:	18bb      	adds	r3, r7, r2
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	227f      	movs	r2, #127	; 0x7f
 8008af2:	401a      	ands	r2, r3
 8008af4:	0013      	movs	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	189b      	adds	r3, r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	3310      	adds	r3, #16
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	18d3      	adds	r3, r2, r3
 8008b02:	3304      	adds	r3, #4
 8008b04:	e00d      	b.n	8008b22 <USBD_StdEPReq+0x2e2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b06:	230e      	movs	r3, #14
 8008b08:	18fb      	adds	r3, r7, r3
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	227f      	movs	r2, #127	; 0x7f
 8008b0e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b10:	0013      	movs	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	189b      	adds	r3, r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	3351      	adds	r3, #81	; 0x51
 8008b1a:	33ff      	adds	r3, #255	; 0xff
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	18d3      	adds	r3, r2, r3
 8008b20:	3304      	adds	r3, #4
 8008b22:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b24:	220e      	movs	r2, #14
 8008b26:	18bb      	adds	r3, r7, r2
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <USBD_StdEPReq+0x2f6>
 8008b2e:	18bb      	adds	r3, r7, r2
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d103      	bne.n	8008b3e <USBD_StdEPReq+0x2fe>
              {
                pep->status = 0x0000U;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	e010      	b.n	8008b60 <USBD_StdEPReq+0x320>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b3e:	230e      	movs	r3, #14
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f7f8 fcc8 	bl	80014de <USBD_LL_IsStallEP>
 8008b4e:	1e03      	subs	r3, r0, #0
 8008b50:	d003      	beq.n	8008b5a <USBD_StdEPReq+0x31a>
              {
                pep->status = 0x0001U;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2201      	movs	r2, #1
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	e002      	b.n	8008b60 <USBD_StdEPReq+0x320>
              }
              else
              {
                pep->status = 0x0000U;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b60:	68b9      	ldr	r1, [r7, #8]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2202      	movs	r2, #2
 8008b66:	0018      	movs	r0, r3
 8008b68:	f000 fc91 	bl	800948e <USBD_CtlSendData>
              break;
 8008b6c:	e006      	b.n	8008b7c <USBD_StdEPReq+0x33c>

            default:
              USBD_CtlError(pdev, req);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	0011      	movs	r1, r2
 8008b74:	0018      	movs	r0, r3
 8008b76:	f000 fc02 	bl	800937e <USBD_CtlError>
              break;
 8008b7a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008b7c:	e006      	b.n	8008b8c <USBD_StdEPReq+0x34c>

        default:
          USBD_CtlError(pdev, req);
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	0011      	movs	r1, r2
 8008b84:	0018      	movs	r0, r3
 8008b86:	f000 fbfa 	bl	800937e <USBD_CtlError>
          break;
 8008b8a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008b8c:	e006      	b.n	8008b9c <USBD_StdEPReq+0x35c>

    default:
      USBD_CtlError(pdev, req);
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	0011      	movs	r1, r2
 8008b94:	0018      	movs	r0, r3
 8008b96:	f000 fbf2 	bl	800937e <USBD_CtlError>
      break;
 8008b9a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008b9c:	230f      	movs	r3, #15
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	781b      	ldrb	r3, [r3, #0]
}
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	b005      	add	sp, #20
 8008ba8:	bd90      	pop	{r4, r7, pc}
	...

08008bac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bb6:	2308      	movs	r3, #8
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	2200      	movs	r2, #0
 8008bbc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bc2:	230b      	movs	r3, #11
 8008bc4:	18fb      	adds	r3, r7, r3
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	885b      	ldrh	r3, [r3, #2]
 8008bce:	0a1b      	lsrs	r3, r3, #8
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2b0f      	cmp	r3, #15
 8008bd4:	d900      	bls.n	8008bd8 <USBD_GetDescriptor+0x2c>
 8008bd6:	e17b      	b.n	8008ed0 <USBD_GetDescriptor+0x324>
 8008bd8:	009a      	lsls	r2, r3, #2
 8008bda:	4bdd      	ldr	r3, [pc, #884]	; (8008f50 <USBD_GetDescriptor+0x3a4>)
 8008bdc:	18d3      	adds	r3, r2, r3
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	23ad      	movs	r3, #173	; 0xad
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	58d3      	ldr	r3, [r2, r3]
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00d      	beq.n	8008c0c <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	23ad      	movs	r3, #173	; 0xad
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	58d3      	ldr	r3, [r2, r3]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	7c12      	ldrb	r2, [r2, #16]
 8008bfe:	2108      	movs	r1, #8
 8008c00:	1879      	adds	r1, r7, r1
 8008c02:	0010      	movs	r0, r2
 8008c04:	4798      	blx	r3
 8008c06:	0003      	movs	r3, r0
 8008c08:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c0a:	e16e      	b.n	8008eea <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	0011      	movs	r1, r2
 8008c12:	0018      	movs	r0, r3
 8008c14:	f000 fbb3 	bl	800937e <USBD_CtlError>
        err++;
 8008c18:	210b      	movs	r1, #11
 8008c1a:	187b      	adds	r3, r7, r1
 8008c1c:	781a      	ldrb	r2, [r3, #0]
 8008c1e:	187b      	adds	r3, r7, r1
 8008c20:	3201      	adds	r2, #1
 8008c22:	701a      	strb	r2, [r3, #0]
      break;
 8008c24:	e161      	b.n	8008eea <USBD_GetDescriptor+0x33e>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	23ad      	movs	r3, #173	; 0xad
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	58d3      	ldr	r3, [r2, r3]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	7c12      	ldrb	r2, [r2, #16]
 8008c34:	2108      	movs	r1, #8
 8008c36:	1879      	adds	r1, r7, r1
 8008c38:	0010      	movs	r0, r2
 8008c3a:	4798      	blx	r3
 8008c3c:	0003      	movs	r3, r0
 8008c3e:	60fb      	str	r3, [r7, #12]
      break;
 8008c40:	e153      	b.n	8008eea <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7c1b      	ldrb	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10f      	bne.n	8008c6a <USBD_GetDescriptor+0xbe>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	23ae      	movs	r3, #174	; 0xae
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	58d3      	ldr	r3, [r2, r3]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	2208      	movs	r2, #8
 8008c56:	18ba      	adds	r2, r7, r2
 8008c58:	0010      	movs	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	0003      	movs	r3, r0
 8008c5e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3301      	adds	r3, #1
 8008c64:	2202      	movs	r2, #2
 8008c66:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c68:	e13f      	b.n	8008eea <USBD_GetDescriptor+0x33e>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	23ae      	movs	r3, #174	; 0xae
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	58d3      	ldr	r3, [r2, r3]
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	2208      	movs	r2, #8
 8008c76:	18ba      	adds	r2, r7, r2
 8008c78:	0010      	movs	r0, r2
 8008c7a:	4798      	blx	r3
 8008c7c:	0003      	movs	r3, r0
 8008c7e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	2202      	movs	r2, #2
 8008c86:	701a      	strb	r2, [r3, #0]
      break;
 8008c88:	e12f      	b.n	8008eea <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	885b      	ldrh	r3, [r3, #2]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b05      	cmp	r3, #5
 8008c92:	d900      	bls.n	8008c96 <USBD_GetDescriptor+0xea>
 8008c94:	e0d0      	b.n	8008e38 <USBD_GetDescriptor+0x28c>
 8008c96:	009a      	lsls	r2, r3, #2
 8008c98:	4bae      	ldr	r3, [pc, #696]	; (8008f54 <USBD_GetDescriptor+0x3a8>)
 8008c9a:	18d3      	adds	r3, r2, r3
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	23ad      	movs	r3, #173	; 0xad
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	58d3      	ldr	r3, [r2, r3]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00d      	beq.n	8008cca <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	23ad      	movs	r3, #173	; 0xad
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	58d3      	ldr	r3, [r2, r3]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	7c12      	ldrb	r2, [r2, #16]
 8008cbc:	2108      	movs	r1, #8
 8008cbe:	1879      	adds	r1, r7, r1
 8008cc0:	0010      	movs	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	0003      	movs	r3, r0
 8008cc6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc8:	e0c3      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	0011      	movs	r1, r2
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f000 fb54 	bl	800937e <USBD_CtlError>
            err++;
 8008cd6:	210b      	movs	r1, #11
 8008cd8:	187b      	adds	r3, r7, r1
 8008cda:	781a      	ldrb	r2, [r3, #0]
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	3201      	adds	r2, #1
 8008ce0:	701a      	strb	r2, [r3, #0]
          break;
 8008ce2:	e0b6      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	23ad      	movs	r3, #173	; 0xad
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	58d3      	ldr	r3, [r2, r3]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00d      	beq.n	8008d0e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	23ad      	movs	r3, #173	; 0xad
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	58d3      	ldr	r3, [r2, r3]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	7c12      	ldrb	r2, [r2, #16]
 8008d00:	2108      	movs	r1, #8
 8008d02:	1879      	adds	r1, r7, r1
 8008d04:	0010      	movs	r0, r2
 8008d06:	4798      	blx	r3
 8008d08:	0003      	movs	r3, r0
 8008d0a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d0c:	e0a1      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	0011      	movs	r1, r2
 8008d14:	0018      	movs	r0, r3
 8008d16:	f000 fb32 	bl	800937e <USBD_CtlError>
            err++;
 8008d1a:	210b      	movs	r1, #11
 8008d1c:	187b      	adds	r3, r7, r1
 8008d1e:	781a      	ldrb	r2, [r3, #0]
 8008d20:	187b      	adds	r3, r7, r1
 8008d22:	3201      	adds	r2, #1
 8008d24:	701a      	strb	r2, [r3, #0]
          break;
 8008d26:	e094      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	23ad      	movs	r3, #173	; 0xad
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	58d3      	ldr	r3, [r2, r3]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00d      	beq.n	8008d52 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	23ad      	movs	r3, #173	; 0xad
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	58d3      	ldr	r3, [r2, r3]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	7c12      	ldrb	r2, [r2, #16]
 8008d44:	2108      	movs	r1, #8
 8008d46:	1879      	adds	r1, r7, r1
 8008d48:	0010      	movs	r0, r2
 8008d4a:	4798      	blx	r3
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d50:	e07f      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	0011      	movs	r1, r2
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 fb10 	bl	800937e <USBD_CtlError>
            err++;
 8008d5e:	210b      	movs	r1, #11
 8008d60:	187b      	adds	r3, r7, r1
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	187b      	adds	r3, r7, r1
 8008d66:	3201      	adds	r2, #1
 8008d68:	701a      	strb	r2, [r3, #0]
          break;
 8008d6a:	e072      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	23ad      	movs	r3, #173	; 0xad
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	58d3      	ldr	r3, [r2, r3]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00d      	beq.n	8008d96 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	23ad      	movs	r3, #173	; 0xad
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	58d3      	ldr	r3, [r2, r3]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	7c12      	ldrb	r2, [r2, #16]
 8008d88:	2108      	movs	r1, #8
 8008d8a:	1879      	adds	r1, r7, r1
 8008d8c:	0010      	movs	r0, r2
 8008d8e:	4798      	blx	r3
 8008d90:	0003      	movs	r3, r0
 8008d92:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d94:	e05d      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	0011      	movs	r1, r2
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f000 faee 	bl	800937e <USBD_CtlError>
            err++;
 8008da2:	210b      	movs	r1, #11
 8008da4:	187b      	adds	r3, r7, r1
 8008da6:	781a      	ldrb	r2, [r3, #0]
 8008da8:	187b      	adds	r3, r7, r1
 8008daa:	3201      	adds	r2, #1
 8008dac:	701a      	strb	r2, [r3, #0]
          break;
 8008dae:	e050      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	23ad      	movs	r3, #173	; 0xad
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	58d3      	ldr	r3, [r2, r3]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00d      	beq.n	8008dda <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	23ad      	movs	r3, #173	; 0xad
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	58d3      	ldr	r3, [r2, r3]
 8008dc6:	695b      	ldr	r3, [r3, #20]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7c12      	ldrb	r2, [r2, #16]
 8008dcc:	2108      	movs	r1, #8
 8008dce:	1879      	adds	r1, r7, r1
 8008dd0:	0010      	movs	r0, r2
 8008dd2:	4798      	blx	r3
 8008dd4:	0003      	movs	r3, r0
 8008dd6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd8:	e03b      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	0011      	movs	r1, r2
 8008de0:	0018      	movs	r0, r3
 8008de2:	f000 facc 	bl	800937e <USBD_CtlError>
            err++;
 8008de6:	210b      	movs	r1, #11
 8008de8:	187b      	adds	r3, r7, r1
 8008dea:	781a      	ldrb	r2, [r3, #0]
 8008dec:	187b      	adds	r3, r7, r1
 8008dee:	3201      	adds	r2, #1
 8008df0:	701a      	strb	r2, [r3, #0]
          break;
 8008df2:	e02e      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	23ad      	movs	r3, #173	; 0xad
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	58d3      	ldr	r3, [r2, r3]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00d      	beq.n	8008e1e <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	23ad      	movs	r3, #173	; 0xad
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	58d3      	ldr	r3, [r2, r3]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	7c12      	ldrb	r2, [r2, #16]
 8008e10:	2108      	movs	r1, #8
 8008e12:	1879      	adds	r1, r7, r1
 8008e14:	0010      	movs	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	0003      	movs	r3, r0
 8008e1a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e1c:	e019      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	0011      	movs	r1, r2
 8008e24:	0018      	movs	r0, r3
 8008e26:	f000 faaa 	bl	800937e <USBD_CtlError>
            err++;
 8008e2a:	210b      	movs	r1, #11
 8008e2c:	187b      	adds	r3, r7, r1
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	187b      	adds	r3, r7, r1
 8008e32:	3201      	adds	r2, #1
 8008e34:	701a      	strb	r2, [r3, #0]
          break;
 8008e36:	e00c      	b.n	8008e52 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	0011      	movs	r1, r2
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f000 fa9d 	bl	800937e <USBD_CtlError>
          err++;
 8008e44:	210b      	movs	r1, #11
 8008e46:	187b      	adds	r3, r7, r1
 8008e48:	781a      	ldrb	r2, [r3, #0]
 8008e4a:	187b      	adds	r3, r7, r1
 8008e4c:	3201      	adds	r2, #1
 8008e4e:	701a      	strb	r2, [r3, #0]
#endif
          break;
 8008e50:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008e52:	e04a      	b.n	8008eea <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	7c1b      	ldrb	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10b      	bne.n	8008e74 <USBD_GetDescriptor+0x2c8>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	23ae      	movs	r3, #174	; 0xae
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	58d3      	ldr	r3, [r2, r3]
 8008e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e66:	2208      	movs	r2, #8
 8008e68:	18ba      	adds	r2, r7, r2
 8008e6a:	0010      	movs	r0, r2
 8008e6c:	4798      	blx	r3
 8008e6e:	0003      	movs	r3, r0
 8008e70:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e72:	e03a      	b.n	8008eea <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	0011      	movs	r1, r2
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f000 fa7f 	bl	800937e <USBD_CtlError>
        err++;
 8008e80:	210b      	movs	r1, #11
 8008e82:	187b      	adds	r3, r7, r1
 8008e84:	781a      	ldrb	r2, [r3, #0]
 8008e86:	187b      	adds	r3, r7, r1
 8008e88:	3201      	adds	r2, #1
 8008e8a:	701a      	strb	r2, [r3, #0]
      break;
 8008e8c:	e02d      	b.n	8008eea <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7c1b      	ldrb	r3, [r3, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10f      	bne.n	8008eb6 <USBD_GetDescriptor+0x30a>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	23ae      	movs	r3, #174	; 0xae
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	58d3      	ldr	r3, [r2, r3]
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	18ba      	adds	r2, r7, r2
 8008ea4:	0010      	movs	r0, r2
 8008ea6:	4798      	blx	r3
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eb4:	e019      	b.n	8008eea <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f000 fa5e 	bl	800937e <USBD_CtlError>
        err++;
 8008ec2:	210b      	movs	r1, #11
 8008ec4:	187b      	adds	r3, r7, r1
 8008ec6:	781a      	ldrb	r2, [r3, #0]
 8008ec8:	187b      	adds	r3, r7, r1
 8008eca:	3201      	adds	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
      break;
 8008ece:	e00c      	b.n	8008eea <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	0011      	movs	r1, r2
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f000 fa51 	bl	800937e <USBD_CtlError>
      err++;
 8008edc:	210b      	movs	r1, #11
 8008ede:	187b      	adds	r3, r7, r1
 8008ee0:	781a      	ldrb	r2, [r3, #0]
 8008ee2:	187b      	adds	r3, r7, r1
 8008ee4:	3201      	adds	r2, #1
 8008ee6:	701a      	strb	r2, [r3, #0]
      break;
 8008ee8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008eea:	230b      	movs	r3, #11
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d131      	bne.n	8008f58 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	88db      	ldrh	r3, [r3, #6]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d023      	beq.n	8008f44 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 8008efc:	2108      	movs	r1, #8
 8008efe:	187b      	adds	r3, r7, r1
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d017      	beq.n	8008f36 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	88da      	ldrh	r2, [r3, #6]
 8008f0a:	187b      	adds	r3, r7, r1
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	1c18      	adds	r0, r3, #0
 8008f10:	1c11      	adds	r1, r2, #0
 8008f12:	b28a      	uxth	r2, r1
 8008f14:	b283      	uxth	r3, r0
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d900      	bls.n	8008f1c <USBD_GetDescriptor+0x370>
 8008f1a:	1c01      	adds	r1, r0, #0
 8008f1c:	b28a      	uxth	r2, r1
 8008f1e:	2108      	movs	r1, #8
 8008f20:	187b      	adds	r3, r7, r1
 8008f22:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f24:	187b      	adds	r3, r7, r1
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	001a      	movs	r2, r3
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f000 faad 	bl	800948e <USBD_CtlSendData>
 8008f34:	e011      	b.n	8008f5a <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	0011      	movs	r1, r2
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f000 fa1e 	bl	800937e <USBD_CtlError>
 8008f42:	e00a      	b.n	8008f5a <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	0018      	movs	r0, r3
 8008f48:	f000 faff 	bl	800954a <USBD_CtlSendStatus>
 8008f4c:	e005      	b.n	8008f5a <USBD_GetDescriptor+0x3ae>
 8008f4e:	46c0      	nop			; (mov r8, r8)
 8008f50:	0800a240 	.word	0x0800a240
 8008f54:	0800a280 	.word	0x0800a280
    return;
 8008f58:	46c0      	nop			; (mov r8, r8)
  }
}
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	b004      	add	sp, #16
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	889b      	ldrh	r3, [r3, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d13e      	bne.n	8008ff0 <USBD_SetAddress+0x90>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	88db      	ldrh	r3, [r3, #6]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d13a      	bne.n	8008ff0 <USBD_SetAddress+0x90>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	885b      	ldrh	r3, [r3, #2]
 8008f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f80:	d836      	bhi.n	8008ff0 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	885b      	ldrh	r3, [r3, #2]
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	230f      	movs	r3, #15
 8008f8a:	18fb      	adds	r3, r7, r3
 8008f8c:	217f      	movs	r1, #127	; 0x7f
 8008f8e:	400a      	ands	r2, r1
 8008f90:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	23a7      	movs	r3, #167	; 0xa7
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	5cd3      	ldrb	r3, [r2, r3]
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b03      	cmp	r3, #3
 8008f9e:	d106      	bne.n	8008fae <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	0011      	movs	r1, r2
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	f000 f9e9 	bl	800937e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fac:	e027      	b.n	8008ffe <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	240f      	movs	r4, #15
 8008fb2:	193a      	adds	r2, r7, r4
 8008fb4:	4914      	ldr	r1, [pc, #80]	; (8009008 <USBD_SetAddress+0xa8>)
 8008fb6:	7812      	ldrb	r2, [r2, #0]
 8008fb8:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fba:	193b      	adds	r3, r7, r4
 8008fbc:	781a      	ldrb	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	0011      	movs	r1, r2
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f7f8 fabc 	bl	8001540 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f000 fabd 	bl	800954a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fd0:	193b      	adds	r3, r7, r4
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	23a7      	movs	r3, #167	; 0xa7
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	2102      	movs	r1, #2
 8008fe0:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	e00c      	b.n	8008ffe <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	23a7      	movs	r3, #167	; 0xa7
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	2101      	movs	r1, #1
 8008fec:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fee:	e006      	b.n	8008ffe <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	0011      	movs	r1, r2
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f000 f9c1 	bl	800937e <USBD_CtlError>
  }
}
 8008ffc:	46c0      	nop			; (mov r8, r8)
 8008ffe:	46c0      	nop			; (mov r8, r8)
 8009000:	46bd      	mov	sp, r7
 8009002:	b005      	add	sp, #20
 8009004:	bd90      	pop	{r4, r7, pc}
 8009006:	46c0      	nop			; (mov r8, r8)
 8009008:	0000029e 	.word	0x0000029e

0800900c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900c:	b5b0      	push	{r4, r5, r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009016:	230f      	movs	r3, #15
 8009018:	18fb      	adds	r3, r7, r3
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	885b      	ldrh	r3, [r3, #2]
 8009022:	b2da      	uxtb	r2, r3
 8009024:	4b5c      	ldr	r3, [pc, #368]	; (8009198 <USBD_SetConfig+0x18c>)
 8009026:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009028:	4b5b      	ldr	r3, [pc, #364]	; (8009198 <USBD_SetConfig+0x18c>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d907      	bls.n	8009040 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	0011      	movs	r1, r2
 8009036:	0018      	movs	r0, r3
 8009038:	f000 f9a1 	bl	800937e <USBD_CtlError>
    return USBD_FAIL;
 800903c:	2303      	movs	r3, #3
 800903e:	e0a7      	b.n	8009190 <USBD_SetConfig+0x184>
  }

  switch (pdev->dev_state)
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	23a7      	movs	r3, #167	; 0xa7
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	5cd3      	ldrb	r3, [r2, r3]
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b02      	cmp	r3, #2
 800904c:	d002      	beq.n	8009054 <USBD_SetConfig+0x48>
 800904e:	2b03      	cmp	r3, #3
 8009050:	d02e      	beq.n	80090b0 <USBD_SetConfig+0xa4>
 8009052:	e088      	b.n	8009166 <USBD_SetConfig+0x15a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009054:	4b50      	ldr	r3, [pc, #320]	; (8009198 <USBD_SetConfig+0x18c>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d024      	beq.n	80090a6 <USBD_SetConfig+0x9a>
      {
        pdev->dev_config = cfgidx;
 800905c:	4b4e      	ldr	r3, [pc, #312]	; (8009198 <USBD_SetConfig+0x18c>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	001a      	movs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009066:	4b4c      	ldr	r3, [pc, #304]	; (8009198 <USBD_SetConfig+0x18c>)
 8009068:	781a      	ldrb	r2, [r3, #0]
 800906a:	250f      	movs	r5, #15
 800906c:	197c      	adds	r4, r7, r5
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	0011      	movs	r1, r2
 8009072:	0018      	movs	r0, r3
 8009074:	f7ff f859 	bl	800812a <USBD_SetClassConfig>
 8009078:	0003      	movs	r3, r0
 800907a:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 800907c:	197b      	adds	r3, r7, r5
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d006      	beq.n	8009092 <USBD_SetConfig+0x86>
        {
          USBD_CtlError(pdev, req);
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	0011      	movs	r1, r2
 800908a:	0018      	movs	r0, r3
 800908c:	f000 f977 	bl	800937e <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009090:	e07b      	b.n	800918a <USBD_SetConfig+0x17e>
          (void)USBD_CtlSendStatus(pdev);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	0018      	movs	r0, r3
 8009096:	f000 fa58 	bl	800954a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	23a7      	movs	r3, #167	; 0xa7
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	2103      	movs	r1, #3
 80090a2:	54d1      	strb	r1, [r2, r3]
      break;
 80090a4:	e071      	b.n	800918a <USBD_SetConfig+0x17e>
        (void)USBD_CtlSendStatus(pdev);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f000 fa4e 	bl	800954a <USBD_CtlSendStatus>
      break;
 80090ae:	e06c      	b.n	800918a <USBD_SetConfig+0x17e>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80090b0:	4b39      	ldr	r3, [pc, #228]	; (8009198 <USBD_SetConfig+0x18c>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d115      	bne.n	80090e4 <USBD_SetConfig+0xd8>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	23a7      	movs	r3, #167	; 0xa7
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	2102      	movs	r1, #2
 80090c0:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 80090c2:	4b35      	ldr	r3, [pc, #212]	; (8009198 <USBD_SetConfig+0x18c>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	001a      	movs	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090cc:	4b32      	ldr	r3, [pc, #200]	; (8009198 <USBD_SetConfig+0x18c>)
 80090ce:	781a      	ldrb	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	0011      	movs	r1, r2
 80090d4:	0018      	movs	r0, r3
 80090d6:	f7ff f84d 	bl	8008174 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	0018      	movs	r0, r3
 80090de:	f000 fa34 	bl	800954a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090e2:	e052      	b.n	800918a <USBD_SetConfig+0x17e>
      else if (cfgidx != pdev->dev_config)
 80090e4:	4b2c      	ldr	r3, [pc, #176]	; (8009198 <USBD_SetConfig+0x18c>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	001a      	movs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d034      	beq.n	800915c <USBD_SetConfig+0x150>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	0011      	movs	r1, r2
 80090fc:	0018      	movs	r0, r3
 80090fe:	f7ff f839 	bl	8008174 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009102:	4b25      	ldr	r3, [pc, #148]	; (8009198 <USBD_SetConfig+0x18c>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	001a      	movs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800910c:	4b22      	ldr	r3, [pc, #136]	; (8009198 <USBD_SetConfig+0x18c>)
 800910e:	781a      	ldrb	r2, [r3, #0]
 8009110:	250f      	movs	r5, #15
 8009112:	197c      	adds	r4, r7, r5
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	0011      	movs	r1, r2
 8009118:	0018      	movs	r0, r3
 800911a:	f7ff f806 	bl	800812a <USBD_SetClassConfig>
 800911e:	0003      	movs	r3, r0
 8009120:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 8009122:	197b      	adds	r3, r7, r5
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d013      	beq.n	8009152 <USBD_SetConfig+0x146>
          USBD_CtlError(pdev, req);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	0011      	movs	r1, r2
 8009130:	0018      	movs	r0, r3
 8009132:	f000 f924 	bl	800937e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	b2da      	uxtb	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	0011      	movs	r1, r2
 8009140:	0018      	movs	r0, r3
 8009142:	f7ff f817 	bl	8008174 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	23a7      	movs	r3, #167	; 0xa7
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	2102      	movs	r1, #2
 800914e:	54d1      	strb	r1, [r2, r3]
      break;
 8009150:	e01b      	b.n	800918a <USBD_SetConfig+0x17e>
          (void)USBD_CtlSendStatus(pdev);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	0018      	movs	r0, r3
 8009156:	f000 f9f8 	bl	800954a <USBD_CtlSendStatus>
      break;
 800915a:	e016      	b.n	800918a <USBD_SetConfig+0x17e>
        (void)USBD_CtlSendStatus(pdev);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	0018      	movs	r0, r3
 8009160:	f000 f9f3 	bl	800954a <USBD_CtlSendStatus>
      break;
 8009164:	e011      	b.n	800918a <USBD_SetConfig+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	0011      	movs	r1, r2
 800916c:	0018      	movs	r0, r3
 800916e:	f000 f906 	bl	800937e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <USBD_SetConfig+0x18c>)
 8009174:	781a      	ldrb	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	0011      	movs	r1, r2
 800917a:	0018      	movs	r0, r3
 800917c:	f7fe fffa 	bl	8008174 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009180:	230f      	movs	r3, #15
 8009182:	18fb      	adds	r3, r7, r3
 8009184:	2203      	movs	r2, #3
 8009186:	701a      	strb	r2, [r3, #0]
      break;
 8009188:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800918a:	230f      	movs	r3, #15
 800918c:	18fb      	adds	r3, r7, r3
 800918e:	781b      	ldrb	r3, [r3, #0]
}
 8009190:	0018      	movs	r0, r3
 8009192:	46bd      	mov	sp, r7
 8009194:	b004      	add	sp, #16
 8009196:	bdb0      	pop	{r4, r5, r7, pc}
 8009198:	20001cb8 	.word	0x20001cb8

0800919c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	88db      	ldrh	r3, [r3, #6]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d006      	beq.n	80091bc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	0011      	movs	r1, r2
 80091b4:	0018      	movs	r0, r3
 80091b6:	f000 f8e2 	bl	800937e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80091ba:	e027      	b.n	800920c <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	23a7      	movs	r3, #167	; 0xa7
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	5cd3      	ldrb	r3, [r2, r3]
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	dc02      	bgt.n	80091d0 <USBD_GetConfig+0x34>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dc03      	bgt.n	80091d6 <USBD_GetConfig+0x3a>
 80091ce:	e016      	b.n	80091fe <USBD_GetConfig+0x62>
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d00c      	beq.n	80091ee <USBD_GetConfig+0x52>
 80091d4:	e013      	b.n	80091fe <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3308      	adds	r3, #8
 80091e0:	0019      	movs	r1, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	0018      	movs	r0, r3
 80091e8:	f000 f951 	bl	800948e <USBD_CtlSendData>
        break;
 80091ec:	e00e      	b.n	800920c <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	1d19      	adds	r1, r3, #4
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	0018      	movs	r0, r3
 80091f8:	f000 f949 	bl	800948e <USBD_CtlSendData>
        break;
 80091fc:	e006      	b.n	800920c <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	0011      	movs	r1, r2
 8009204:	0018      	movs	r0, r3
 8009206:	f000 f8ba 	bl	800937e <USBD_CtlError>
        break;
 800920a:	46c0      	nop			; (mov r8, r8)
}
 800920c:	46c0      	nop			; (mov r8, r8)
 800920e:	46bd      	mov	sp, r7
 8009210:	b002      	add	sp, #8
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	23a7      	movs	r3, #167	; 0xa7
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	5cd3      	ldrb	r3, [r2, r3]
 8009226:	b2db      	uxtb	r3, r3
 8009228:	3b01      	subs	r3, #1
 800922a:	2b02      	cmp	r3, #2
 800922c:	d822      	bhi.n	8009274 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	88db      	ldrh	r3, [r3, #6]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d006      	beq.n	8009244 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	0011      	movs	r1, r2
 800923c:	0018      	movs	r0, r3
 800923e:	f000 f89e 	bl	800937e <USBD_CtlError>
        break;
 8009242:	e01e      	b.n	8009282 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	23a9      	movs	r3, #169	; 0xa9
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	58d3      	ldr	r3, [r2, r3]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	2202      	movs	r2, #2
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	330c      	adds	r3, #12
 8009266:	0019      	movs	r1, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	0018      	movs	r0, r3
 800926e:	f000 f90e 	bl	800948e <USBD_CtlSendData>
      break;
 8009272:	e006      	b.n	8009282 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	0011      	movs	r1, r2
 800927a:	0018      	movs	r0, r3
 800927c:	f000 f87f 	bl	800937e <USBD_CtlError>
      break;
 8009280:	46c0      	nop			; (mov r8, r8)
  }
}
 8009282:	46c0      	nop			; (mov r8, r8)
 8009284:	46bd      	mov	sp, r7
 8009286:	b002      	add	sp, #8
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	885b      	ldrh	r3, [r3, #2]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d108      	bne.n	80092ae <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	23a9      	movs	r3, #169	; 0xa9
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	2101      	movs	r1, #1
 80092a4:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	0018      	movs	r0, r3
 80092aa:	f000 f94e 	bl	800954a <USBD_CtlSendStatus>
  }
}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	46bd      	mov	sp, r7
 80092b2:	b002      	add	sp, #8
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	23a7      	movs	r3, #167	; 0xa7
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	5cd3      	ldrb	r3, [r2, r3]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d80d      	bhi.n	80092ec <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	885b      	ldrh	r3, [r3, #2]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d110      	bne.n	80092fa <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	23a9      	movs	r3, #169	; 0xa9
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	2100      	movs	r1, #0
 80092e0:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	0018      	movs	r0, r3
 80092e6:	f000 f930 	bl	800954a <USBD_CtlSendStatus>
      }
      break;
 80092ea:	e006      	b.n	80092fa <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	0011      	movs	r1, r2
 80092f2:	0018      	movs	r0, r3
 80092f4:	f000 f843 	bl	800937e <USBD_CtlError>
      break;
 80092f8:	e000      	b.n	80092fc <USBD_ClrFeature+0x46>
      break;
 80092fa:	46c0      	nop			; (mov r8, r8)
  }
}
 80092fc:	46c0      	nop			; (mov r8, r8)
 80092fe:	46bd      	mov	sp, r7
 8009300:	b002      	add	sp, #8
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3301      	adds	r3, #1
 800931e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	781a      	ldrb	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3301      	adds	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	0018      	movs	r0, r3
 8009332:	f7ff f98c 	bl	800864e <SWAPBYTE>
 8009336:	0003      	movs	r3, r0
 8009338:	001a      	movs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3301      	adds	r3, #1
 8009342:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	3301      	adds	r3, #1
 8009348:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	0018      	movs	r0, r3
 800934e:	f7ff f97e 	bl	800864e <SWAPBYTE>
 8009352:	0003      	movs	r3, r0
 8009354:	001a      	movs	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3301      	adds	r3, #1
 8009364:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	0018      	movs	r0, r3
 800936a:	f7ff f970 	bl	800864e <SWAPBYTE>
 800936e:	0003      	movs	r3, r0
 8009370:	001a      	movs	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	80da      	strh	r2, [r3, #6]
}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	46bd      	mov	sp, r7
 800937a:	b004      	add	sp, #16
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2180      	movs	r1, #128	; 0x80
 800938c:	0018      	movs	r0, r3
 800938e:	f7f8 f850 	bl	8001432 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2100      	movs	r1, #0
 8009396:	0018      	movs	r0, r3
 8009398:	f7f8 f84b 	bl	8001432 <USBD_LL_StallEP>
}
 800939c:	46c0      	nop			; (mov r8, r8)
 800939e:	46bd      	mov	sp, r7
 80093a0:	b002      	add	sp, #8
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093a4:	b590      	push	{r4, r7, lr}
 80093a6:	b087      	sub	sp, #28
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093b0:	2417      	movs	r4, #23
 80093b2:	193b      	adds	r3, r7, r4
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d044      	beq.n	8009448 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	0018      	movs	r0, r3
 80093c6:	f000 f843 	bl	8009450 <USBD_GetLen>
 80093ca:	0003      	movs	r3, r0
 80093cc:	3301      	adds	r3, #1
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	18db      	adds	r3, r3, r3
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093d8:	193b      	adds	r3, r7, r4
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	18d3      	adds	r3, r2, r3
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	7812      	ldrb	r2, [r2, #0]
 80093e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80093e6:	193b      	adds	r3, r7, r4
 80093e8:	781a      	ldrb	r2, [r3, #0]
 80093ea:	193b      	adds	r3, r7, r4
 80093ec:	3201      	adds	r2, #1
 80093ee:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093f0:	193b      	adds	r3, r7, r4
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	18d3      	adds	r3, r2, r3
 80093f8:	2203      	movs	r2, #3
 80093fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80093fc:	193b      	adds	r3, r7, r4
 80093fe:	781a      	ldrb	r2, [r3, #0]
 8009400:	193b      	adds	r3, r7, r4
 8009402:	3201      	adds	r2, #1
 8009404:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8009406:	e01a      	b.n	800943e <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8009408:	2117      	movs	r1, #23
 800940a:	187b      	adds	r3, r7, r1
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	18d3      	adds	r3, r2, r3
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	7812      	ldrb	r2, [r2, #0]
 8009416:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3301      	adds	r3, #1
 800941c:	613b      	str	r3, [r7, #16]
    idx++;
 800941e:	187b      	adds	r3, r7, r1
 8009420:	781a      	ldrb	r2, [r3, #0]
 8009422:	187b      	adds	r3, r7, r1
 8009424:	3201      	adds	r2, #1
 8009426:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8009428:	187b      	adds	r3, r7, r1
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	18d3      	adds	r3, r2, r3
 8009430:	2200      	movs	r2, #0
 8009432:	701a      	strb	r2, [r3, #0]
    idx++;
 8009434:	187b      	adds	r3, r7, r1
 8009436:	781a      	ldrb	r2, [r3, #0]
 8009438:	187b      	adds	r3, r7, r1
 800943a:	3201      	adds	r2, #1
 800943c:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e0      	bne.n	8009408 <USBD_GetString+0x64>
 8009446:	e000      	b.n	800944a <USBD_GetString+0xa6>
    return;
 8009448:	46c0      	nop			; (mov r8, r8)
  }
}
 800944a:	46bd      	mov	sp, r7
 800944c:	b007      	add	sp, #28
 800944e:	bd90      	pop	{r4, r7, pc}

08009450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009458:	230f      	movs	r3, #15
 800945a:	18fb      	adds	r3, r7, r3
 800945c:	2200      	movs	r2, #0
 800945e:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009464:	e008      	b.n	8009478 <USBD_GetLen+0x28>
  {
    len++;
 8009466:	210f      	movs	r1, #15
 8009468:	187b      	adds	r3, r7, r1
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	187b      	adds	r3, r7, r1
 800946e:	3201      	adds	r2, #1
 8009470:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3301      	adds	r3, #1
 8009476:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1f2      	bne.n	8009466 <USBD_GetLen+0x16>
  }

  return len;
 8009480:	230f      	movs	r3, #15
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	781b      	ldrb	r3, [r3, #0]
}
 8009486:	0018      	movs	r0, r3
 8009488:	46bd      	mov	sp, r7
 800948a:	b004      	add	sp, #16
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b084      	sub	sp, #16
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	23a5      	movs	r3, #165	; 0xa5
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	2102      	movs	r1, #2
 80094a2:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	2100      	movs	r1, #0
 80094b8:	f7f8 f86d 	bl	8001596 <USBD_LL_Transmit>

  return USBD_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	0018      	movs	r0, r3
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b004      	add	sp, #16
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	2100      	movs	r1, #0
 80094da:	f7f8 f85c 	bl	8001596 <USBD_LL_Transmit>

  return USBD_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	0018      	movs	r0, r3
 80094e2:	46bd      	mov	sp, r7
 80094e4:	b004      	add	sp, #16
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	23a5      	movs	r3, #165	; 0xa5
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	2103      	movs	r1, #3
 80094fc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	23ac      	movs	r3, #172	; 0xac
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	23ae      	movs	r3, #174	; 0xae
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	50d1      	str	r1, [r2, r3]
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	2100      	movs	r1, #0
 800951a:	f7f8 f86c 	bl	80015f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	0018      	movs	r0, r3
 8009522:	46bd      	mov	sp, r7
 8009524:	b004      	add	sp, #16
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	2100      	movs	r1, #0
 800953c:	f7f8 f85b 	bl	80015f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	b004      	add	sp, #16
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b082      	sub	sp, #8
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	23a5      	movs	r3, #165	; 0xa5
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	2104      	movs	r1, #4
 800955a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	2300      	movs	r3, #0
 8009560:	2200      	movs	r2, #0
 8009562:	2100      	movs	r1, #0
 8009564:	f7f8 f817 	bl	8001596 <USBD_LL_Transmit>

  return USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	0018      	movs	r0, r3
 800956c:	46bd      	mov	sp, r7
 800956e:	b002      	add	sp, #8
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	23a5      	movs	r3, #165	; 0xa5
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	2105      	movs	r1, #5
 8009582:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	2300      	movs	r3, #0
 8009588:	2200      	movs	r2, #0
 800958a:	2100      	movs	r1, #0
 800958c:	f7f8 f833 	bl	80015f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	0018      	movs	r0, r3
 8009594:	46bd      	mov	sp, r7
 8009596:	b002      	add	sp, #8
 8009598:	bd80      	pop	{r7, pc}
	...

0800959c <__errno>:
 800959c:	4b01      	ldr	r3, [pc, #4]	; (80095a4 <__errno+0x8>)
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	4770      	bx	lr
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	20000184 	.word	0x20000184

080095a8 <__libc_init_array>:
 80095a8:	b570      	push	{r4, r5, r6, lr}
 80095aa:	2600      	movs	r6, #0
 80095ac:	4d0c      	ldr	r5, [pc, #48]	; (80095e0 <__libc_init_array+0x38>)
 80095ae:	4c0d      	ldr	r4, [pc, #52]	; (80095e4 <__libc_init_array+0x3c>)
 80095b0:	1b64      	subs	r4, r4, r5
 80095b2:	10a4      	asrs	r4, r4, #2
 80095b4:	42a6      	cmp	r6, r4
 80095b6:	d109      	bne.n	80095cc <__libc_init_array+0x24>
 80095b8:	2600      	movs	r6, #0
 80095ba:	f000 fd6b 	bl	800a094 <_init>
 80095be:	4d0a      	ldr	r5, [pc, #40]	; (80095e8 <__libc_init_array+0x40>)
 80095c0:	4c0a      	ldr	r4, [pc, #40]	; (80095ec <__libc_init_array+0x44>)
 80095c2:	1b64      	subs	r4, r4, r5
 80095c4:	10a4      	asrs	r4, r4, #2
 80095c6:	42a6      	cmp	r6, r4
 80095c8:	d105      	bne.n	80095d6 <__libc_init_array+0x2e>
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	00b3      	lsls	r3, r6, #2
 80095ce:	58eb      	ldr	r3, [r5, r3]
 80095d0:	4798      	blx	r3
 80095d2:	3601      	adds	r6, #1
 80095d4:	e7ee      	b.n	80095b4 <__libc_init_array+0xc>
 80095d6:	00b3      	lsls	r3, r6, #2
 80095d8:	58eb      	ldr	r3, [r5, r3]
 80095da:	4798      	blx	r3
 80095dc:	3601      	adds	r6, #1
 80095de:	e7f2      	b.n	80095c6 <__libc_init_array+0x1e>
 80095e0:	0800a304 	.word	0x0800a304
 80095e4:	0800a304 	.word	0x0800a304
 80095e8:	0800a304 	.word	0x0800a304
 80095ec:	0800a308 	.word	0x0800a308

080095f0 <memset>:
 80095f0:	0003      	movs	r3, r0
 80095f2:	1882      	adds	r2, r0, r2
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d100      	bne.n	80095fa <memset+0xa>
 80095f8:	4770      	bx	lr
 80095fa:	7019      	strb	r1, [r3, #0]
 80095fc:	3301      	adds	r3, #1
 80095fe:	e7f9      	b.n	80095f4 <memset+0x4>

08009600 <_puts_r>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	0005      	movs	r5, r0
 8009604:	000e      	movs	r6, r1
 8009606:	2800      	cmp	r0, #0
 8009608:	d004      	beq.n	8009614 <_puts_r+0x14>
 800960a:	6983      	ldr	r3, [r0, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <_puts_r+0x14>
 8009610:	f000 fa6e 	bl	8009af0 <__sinit>
 8009614:	69ab      	ldr	r3, [r5, #24]
 8009616:	68ac      	ldr	r4, [r5, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <_puts_r+0x22>
 800961c:	0028      	movs	r0, r5
 800961e:	f000 fa67 	bl	8009af0 <__sinit>
 8009622:	4b2d      	ldr	r3, [pc, #180]	; (80096d8 <_puts_r+0xd8>)
 8009624:	429c      	cmp	r4, r3
 8009626:	d122      	bne.n	800966e <_puts_r+0x6e>
 8009628:	686c      	ldr	r4, [r5, #4]
 800962a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800962c:	07db      	lsls	r3, r3, #31
 800962e:	d405      	bmi.n	800963c <_puts_r+0x3c>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	059b      	lsls	r3, r3, #22
 8009634:	d402      	bmi.n	800963c <_puts_r+0x3c>
 8009636:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009638:	f000 fafb 	bl	8009c32 <__retarget_lock_acquire_recursive>
 800963c:	89a3      	ldrh	r3, [r4, #12]
 800963e:	071b      	lsls	r3, r3, #28
 8009640:	d502      	bpl.n	8009648 <_puts_r+0x48>
 8009642:	6923      	ldr	r3, [r4, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d129      	bne.n	800969c <_puts_r+0x9c>
 8009648:	0021      	movs	r1, r4
 800964a:	0028      	movs	r0, r5
 800964c:	f000 f8aa 	bl	80097a4 <__swsetup_r>
 8009650:	2800      	cmp	r0, #0
 8009652:	d023      	beq.n	800969c <_puts_r+0x9c>
 8009654:	2501      	movs	r5, #1
 8009656:	426d      	negs	r5, r5
 8009658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800965a:	07db      	lsls	r3, r3, #31
 800965c:	d405      	bmi.n	800966a <_puts_r+0x6a>
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	059b      	lsls	r3, r3, #22
 8009662:	d402      	bmi.n	800966a <_puts_r+0x6a>
 8009664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009666:	f000 fae5 	bl	8009c34 <__retarget_lock_release_recursive>
 800966a:	0028      	movs	r0, r5
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	4b1b      	ldr	r3, [pc, #108]	; (80096dc <_puts_r+0xdc>)
 8009670:	429c      	cmp	r4, r3
 8009672:	d101      	bne.n	8009678 <_puts_r+0x78>
 8009674:	68ac      	ldr	r4, [r5, #8]
 8009676:	e7d8      	b.n	800962a <_puts_r+0x2a>
 8009678:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <_puts_r+0xe0>)
 800967a:	429c      	cmp	r4, r3
 800967c:	d1d5      	bne.n	800962a <_puts_r+0x2a>
 800967e:	68ec      	ldr	r4, [r5, #12]
 8009680:	e7d3      	b.n	800962a <_puts_r+0x2a>
 8009682:	3601      	adds	r6, #1
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	da04      	bge.n	8009694 <_puts_r+0x94>
 800968a:	69a2      	ldr	r2, [r4, #24]
 800968c:	429a      	cmp	r2, r3
 800968e:	dc16      	bgt.n	80096be <_puts_r+0xbe>
 8009690:	290a      	cmp	r1, #10
 8009692:	d014      	beq.n	80096be <_puts_r+0xbe>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	6022      	str	r2, [r4, #0]
 800969a:	7019      	strb	r1, [r3, #0]
 800969c:	68a3      	ldr	r3, [r4, #8]
 800969e:	7831      	ldrb	r1, [r6, #0]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	2900      	cmp	r1, #0
 80096a4:	d1ed      	bne.n	8009682 <_puts_r+0x82>
 80096a6:	60a3      	str	r3, [r4, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	da0f      	bge.n	80096cc <_puts_r+0xcc>
 80096ac:	0028      	movs	r0, r5
 80096ae:	0022      	movs	r2, r4
 80096b0:	310a      	adds	r1, #10
 80096b2:	f000 f821 	bl	80096f8 <__swbuf_r>
 80096b6:	250a      	movs	r5, #10
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d1cd      	bne.n	8009658 <_puts_r+0x58>
 80096bc:	e7ca      	b.n	8009654 <_puts_r+0x54>
 80096be:	0022      	movs	r2, r4
 80096c0:	0028      	movs	r0, r5
 80096c2:	f000 f819 	bl	80096f8 <__swbuf_r>
 80096c6:	1c43      	adds	r3, r0, #1
 80096c8:	d1e8      	bne.n	800969c <_puts_r+0x9c>
 80096ca:	e7c3      	b.n	8009654 <_puts_r+0x54>
 80096cc:	250a      	movs	r5, #10
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	6022      	str	r2, [r4, #0]
 80096d4:	701d      	strb	r5, [r3, #0]
 80096d6:	e7bf      	b.n	8009658 <_puts_r+0x58>
 80096d8:	0800a2bc 	.word	0x0800a2bc
 80096dc:	0800a2dc 	.word	0x0800a2dc
 80096e0:	0800a29c 	.word	0x0800a29c

080096e4 <puts>:
 80096e4:	b510      	push	{r4, lr}
 80096e6:	4b03      	ldr	r3, [pc, #12]	; (80096f4 <puts+0x10>)
 80096e8:	0001      	movs	r1, r0
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	f7ff ff88 	bl	8009600 <_puts_r>
 80096f0:	bd10      	pop	{r4, pc}
 80096f2:	46c0      	nop			; (mov r8, r8)
 80096f4:	20000184 	.word	0x20000184

080096f8 <__swbuf_r>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	0005      	movs	r5, r0
 80096fc:	000e      	movs	r6, r1
 80096fe:	0014      	movs	r4, r2
 8009700:	2800      	cmp	r0, #0
 8009702:	d004      	beq.n	800970e <__swbuf_r+0x16>
 8009704:	6983      	ldr	r3, [r0, #24]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <__swbuf_r+0x16>
 800970a:	f000 f9f1 	bl	8009af0 <__sinit>
 800970e:	4b22      	ldr	r3, [pc, #136]	; (8009798 <__swbuf_r+0xa0>)
 8009710:	429c      	cmp	r4, r3
 8009712:	d12e      	bne.n	8009772 <__swbuf_r+0x7a>
 8009714:	686c      	ldr	r4, [r5, #4]
 8009716:	69a3      	ldr	r3, [r4, #24]
 8009718:	60a3      	str	r3, [r4, #8]
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	071b      	lsls	r3, r3, #28
 800971e:	d532      	bpl.n	8009786 <__swbuf_r+0x8e>
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d02f      	beq.n	8009786 <__swbuf_r+0x8e>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	6922      	ldr	r2, [r4, #16]
 800972a:	b2f7      	uxtb	r7, r6
 800972c:	1a98      	subs	r0, r3, r2
 800972e:	6963      	ldr	r3, [r4, #20]
 8009730:	b2f6      	uxtb	r6, r6
 8009732:	4283      	cmp	r3, r0
 8009734:	dc05      	bgt.n	8009742 <__swbuf_r+0x4a>
 8009736:	0021      	movs	r1, r4
 8009738:	0028      	movs	r0, r5
 800973a:	f000 f937 	bl	80099ac <_fflush_r>
 800973e:	2800      	cmp	r0, #0
 8009740:	d127      	bne.n	8009792 <__swbuf_r+0x9a>
 8009742:	68a3      	ldr	r3, [r4, #8]
 8009744:	3001      	adds	r0, #1
 8009746:	3b01      	subs	r3, #1
 8009748:	60a3      	str	r3, [r4, #8]
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	6022      	str	r2, [r4, #0]
 8009750:	701f      	strb	r7, [r3, #0]
 8009752:	6963      	ldr	r3, [r4, #20]
 8009754:	4283      	cmp	r3, r0
 8009756:	d004      	beq.n	8009762 <__swbuf_r+0x6a>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	07db      	lsls	r3, r3, #31
 800975c:	d507      	bpl.n	800976e <__swbuf_r+0x76>
 800975e:	2e0a      	cmp	r6, #10
 8009760:	d105      	bne.n	800976e <__swbuf_r+0x76>
 8009762:	0021      	movs	r1, r4
 8009764:	0028      	movs	r0, r5
 8009766:	f000 f921 	bl	80099ac <_fflush_r>
 800976a:	2800      	cmp	r0, #0
 800976c:	d111      	bne.n	8009792 <__swbuf_r+0x9a>
 800976e:	0030      	movs	r0, r6
 8009770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009772:	4b0a      	ldr	r3, [pc, #40]	; (800979c <__swbuf_r+0xa4>)
 8009774:	429c      	cmp	r4, r3
 8009776:	d101      	bne.n	800977c <__swbuf_r+0x84>
 8009778:	68ac      	ldr	r4, [r5, #8]
 800977a:	e7cc      	b.n	8009716 <__swbuf_r+0x1e>
 800977c:	4b08      	ldr	r3, [pc, #32]	; (80097a0 <__swbuf_r+0xa8>)
 800977e:	429c      	cmp	r4, r3
 8009780:	d1c9      	bne.n	8009716 <__swbuf_r+0x1e>
 8009782:	68ec      	ldr	r4, [r5, #12]
 8009784:	e7c7      	b.n	8009716 <__swbuf_r+0x1e>
 8009786:	0021      	movs	r1, r4
 8009788:	0028      	movs	r0, r5
 800978a:	f000 f80b 	bl	80097a4 <__swsetup_r>
 800978e:	2800      	cmp	r0, #0
 8009790:	d0c9      	beq.n	8009726 <__swbuf_r+0x2e>
 8009792:	2601      	movs	r6, #1
 8009794:	4276      	negs	r6, r6
 8009796:	e7ea      	b.n	800976e <__swbuf_r+0x76>
 8009798:	0800a2bc 	.word	0x0800a2bc
 800979c:	0800a2dc 	.word	0x0800a2dc
 80097a0:	0800a29c 	.word	0x0800a29c

080097a4 <__swsetup_r>:
 80097a4:	4b37      	ldr	r3, [pc, #220]	; (8009884 <__swsetup_r+0xe0>)
 80097a6:	b570      	push	{r4, r5, r6, lr}
 80097a8:	681d      	ldr	r5, [r3, #0]
 80097aa:	0006      	movs	r6, r0
 80097ac:	000c      	movs	r4, r1
 80097ae:	2d00      	cmp	r5, #0
 80097b0:	d005      	beq.n	80097be <__swsetup_r+0x1a>
 80097b2:	69ab      	ldr	r3, [r5, #24]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <__swsetup_r+0x1a>
 80097b8:	0028      	movs	r0, r5
 80097ba:	f000 f999 	bl	8009af0 <__sinit>
 80097be:	4b32      	ldr	r3, [pc, #200]	; (8009888 <__swsetup_r+0xe4>)
 80097c0:	429c      	cmp	r4, r3
 80097c2:	d10f      	bne.n	80097e4 <__swsetup_r+0x40>
 80097c4:	686c      	ldr	r4, [r5, #4]
 80097c6:	230c      	movs	r3, #12
 80097c8:	5ee2      	ldrsh	r2, [r4, r3]
 80097ca:	b293      	uxth	r3, r2
 80097cc:	0711      	lsls	r1, r2, #28
 80097ce:	d42d      	bmi.n	800982c <__swsetup_r+0x88>
 80097d0:	06d9      	lsls	r1, r3, #27
 80097d2:	d411      	bmi.n	80097f8 <__swsetup_r+0x54>
 80097d4:	2309      	movs	r3, #9
 80097d6:	2001      	movs	r0, #1
 80097d8:	6033      	str	r3, [r6, #0]
 80097da:	3337      	adds	r3, #55	; 0x37
 80097dc:	4313      	orrs	r3, r2
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	4240      	negs	r0, r0
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	4b29      	ldr	r3, [pc, #164]	; (800988c <__swsetup_r+0xe8>)
 80097e6:	429c      	cmp	r4, r3
 80097e8:	d101      	bne.n	80097ee <__swsetup_r+0x4a>
 80097ea:	68ac      	ldr	r4, [r5, #8]
 80097ec:	e7eb      	b.n	80097c6 <__swsetup_r+0x22>
 80097ee:	4b28      	ldr	r3, [pc, #160]	; (8009890 <__swsetup_r+0xec>)
 80097f0:	429c      	cmp	r4, r3
 80097f2:	d1e8      	bne.n	80097c6 <__swsetup_r+0x22>
 80097f4:	68ec      	ldr	r4, [r5, #12]
 80097f6:	e7e6      	b.n	80097c6 <__swsetup_r+0x22>
 80097f8:	075b      	lsls	r3, r3, #29
 80097fa:	d513      	bpl.n	8009824 <__swsetup_r+0x80>
 80097fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097fe:	2900      	cmp	r1, #0
 8009800:	d008      	beq.n	8009814 <__swsetup_r+0x70>
 8009802:	0023      	movs	r3, r4
 8009804:	3344      	adds	r3, #68	; 0x44
 8009806:	4299      	cmp	r1, r3
 8009808:	d002      	beq.n	8009810 <__swsetup_r+0x6c>
 800980a:	0030      	movs	r0, r6
 800980c:	f000 fa80 	bl	8009d10 <_free_r>
 8009810:	2300      	movs	r3, #0
 8009812:	6363      	str	r3, [r4, #52]	; 0x34
 8009814:	2224      	movs	r2, #36	; 0x24
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	4393      	bics	r3, r2
 800981a:	81a3      	strh	r3, [r4, #12]
 800981c:	2300      	movs	r3, #0
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	2308      	movs	r3, #8
 8009826:	89a2      	ldrh	r2, [r4, #12]
 8009828:	4313      	orrs	r3, r2
 800982a:	81a3      	strh	r3, [r4, #12]
 800982c:	6923      	ldr	r3, [r4, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10b      	bne.n	800984a <__swsetup_r+0xa6>
 8009832:	21a0      	movs	r1, #160	; 0xa0
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	0089      	lsls	r1, r1, #2
 800983a:	0092      	lsls	r2, r2, #2
 800983c:	400b      	ands	r3, r1
 800983e:	4293      	cmp	r3, r2
 8009840:	d003      	beq.n	800984a <__swsetup_r+0xa6>
 8009842:	0021      	movs	r1, r4
 8009844:	0030      	movs	r0, r6
 8009846:	f000 fa1f 	bl	8009c88 <__smakebuf_r>
 800984a:	220c      	movs	r2, #12
 800984c:	5ea3      	ldrsh	r3, [r4, r2]
 800984e:	2001      	movs	r0, #1
 8009850:	001a      	movs	r2, r3
 8009852:	b299      	uxth	r1, r3
 8009854:	4002      	ands	r2, r0
 8009856:	4203      	tst	r3, r0
 8009858:	d00f      	beq.n	800987a <__swsetup_r+0xd6>
 800985a:	2200      	movs	r2, #0
 800985c:	60a2      	str	r2, [r4, #8]
 800985e:	6962      	ldr	r2, [r4, #20]
 8009860:	4252      	negs	r2, r2
 8009862:	61a2      	str	r2, [r4, #24]
 8009864:	2000      	movs	r0, #0
 8009866:	6922      	ldr	r2, [r4, #16]
 8009868:	4282      	cmp	r2, r0
 800986a:	d1ba      	bne.n	80097e2 <__swsetup_r+0x3e>
 800986c:	060a      	lsls	r2, r1, #24
 800986e:	d5b8      	bpl.n	80097e2 <__swsetup_r+0x3e>
 8009870:	2240      	movs	r2, #64	; 0x40
 8009872:	4313      	orrs	r3, r2
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	3801      	subs	r0, #1
 8009878:	e7b3      	b.n	80097e2 <__swsetup_r+0x3e>
 800987a:	0788      	lsls	r0, r1, #30
 800987c:	d400      	bmi.n	8009880 <__swsetup_r+0xdc>
 800987e:	6962      	ldr	r2, [r4, #20]
 8009880:	60a2      	str	r2, [r4, #8]
 8009882:	e7ef      	b.n	8009864 <__swsetup_r+0xc0>
 8009884:	20000184 	.word	0x20000184
 8009888:	0800a2bc 	.word	0x0800a2bc
 800988c:	0800a2dc 	.word	0x0800a2dc
 8009890:	0800a29c 	.word	0x0800a29c

08009894 <__sflush_r>:
 8009894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009896:	898b      	ldrh	r3, [r1, #12]
 8009898:	0005      	movs	r5, r0
 800989a:	000c      	movs	r4, r1
 800989c:	071a      	lsls	r2, r3, #28
 800989e:	d45f      	bmi.n	8009960 <__sflush_r+0xcc>
 80098a0:	684a      	ldr	r2, [r1, #4]
 80098a2:	2a00      	cmp	r2, #0
 80098a4:	dc04      	bgt.n	80098b0 <__sflush_r+0x1c>
 80098a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	dc01      	bgt.n	80098b0 <__sflush_r+0x1c>
 80098ac:	2000      	movs	r0, #0
 80098ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098b0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80098b2:	2f00      	cmp	r7, #0
 80098b4:	d0fa      	beq.n	80098ac <__sflush_r+0x18>
 80098b6:	2200      	movs	r2, #0
 80098b8:	2180      	movs	r1, #128	; 0x80
 80098ba:	682e      	ldr	r6, [r5, #0]
 80098bc:	602a      	str	r2, [r5, #0]
 80098be:	001a      	movs	r2, r3
 80098c0:	0149      	lsls	r1, r1, #5
 80098c2:	400a      	ands	r2, r1
 80098c4:	420b      	tst	r3, r1
 80098c6:	d034      	beq.n	8009932 <__sflush_r+0x9e>
 80098c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	075b      	lsls	r3, r3, #29
 80098ce:	d506      	bpl.n	80098de <__sflush_r+0x4a>
 80098d0:	6863      	ldr	r3, [r4, #4]
 80098d2:	1ac0      	subs	r0, r0, r3
 80098d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <__sflush_r+0x4a>
 80098da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098dc:	1ac0      	subs	r0, r0, r3
 80098de:	0002      	movs	r2, r0
 80098e0:	6a21      	ldr	r1, [r4, #32]
 80098e2:	2300      	movs	r3, #0
 80098e4:	0028      	movs	r0, r5
 80098e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80098e8:	47b8      	blx	r7
 80098ea:	89a1      	ldrh	r1, [r4, #12]
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d106      	bne.n	80098fe <__sflush_r+0x6a>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	2b1d      	cmp	r3, #29
 80098f4:	d831      	bhi.n	800995a <__sflush_r+0xc6>
 80098f6:	4a2c      	ldr	r2, [pc, #176]	; (80099a8 <__sflush_r+0x114>)
 80098f8:	40da      	lsrs	r2, r3
 80098fa:	07d3      	lsls	r3, r2, #31
 80098fc:	d52d      	bpl.n	800995a <__sflush_r+0xc6>
 80098fe:	2300      	movs	r3, #0
 8009900:	6063      	str	r3, [r4, #4]
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	04cb      	lsls	r3, r1, #19
 8009908:	d505      	bpl.n	8009916 <__sflush_r+0x82>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d102      	bne.n	8009914 <__sflush_r+0x80>
 800990e:	682b      	ldr	r3, [r5, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d100      	bne.n	8009916 <__sflush_r+0x82>
 8009914:	6560      	str	r0, [r4, #84]	; 0x54
 8009916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009918:	602e      	str	r6, [r5, #0]
 800991a:	2900      	cmp	r1, #0
 800991c:	d0c6      	beq.n	80098ac <__sflush_r+0x18>
 800991e:	0023      	movs	r3, r4
 8009920:	3344      	adds	r3, #68	; 0x44
 8009922:	4299      	cmp	r1, r3
 8009924:	d002      	beq.n	800992c <__sflush_r+0x98>
 8009926:	0028      	movs	r0, r5
 8009928:	f000 f9f2 	bl	8009d10 <_free_r>
 800992c:	2000      	movs	r0, #0
 800992e:	6360      	str	r0, [r4, #52]	; 0x34
 8009930:	e7bd      	b.n	80098ae <__sflush_r+0x1a>
 8009932:	2301      	movs	r3, #1
 8009934:	0028      	movs	r0, r5
 8009936:	6a21      	ldr	r1, [r4, #32]
 8009938:	47b8      	blx	r7
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d1c5      	bne.n	80098ca <__sflush_r+0x36>
 800993e:	682b      	ldr	r3, [r5, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d0c2      	beq.n	80098ca <__sflush_r+0x36>
 8009944:	2b1d      	cmp	r3, #29
 8009946:	d001      	beq.n	800994c <__sflush_r+0xb8>
 8009948:	2b16      	cmp	r3, #22
 800994a:	d101      	bne.n	8009950 <__sflush_r+0xbc>
 800994c:	602e      	str	r6, [r5, #0]
 800994e:	e7ad      	b.n	80098ac <__sflush_r+0x18>
 8009950:	2340      	movs	r3, #64	; 0x40
 8009952:	89a2      	ldrh	r2, [r4, #12]
 8009954:	4313      	orrs	r3, r2
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	e7a9      	b.n	80098ae <__sflush_r+0x1a>
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	430b      	orrs	r3, r1
 800995e:	e7fa      	b.n	8009956 <__sflush_r+0xc2>
 8009960:	690f      	ldr	r7, [r1, #16]
 8009962:	2f00      	cmp	r7, #0
 8009964:	d0a2      	beq.n	80098ac <__sflush_r+0x18>
 8009966:	680a      	ldr	r2, [r1, #0]
 8009968:	600f      	str	r7, [r1, #0]
 800996a:	1bd2      	subs	r2, r2, r7
 800996c:	9201      	str	r2, [sp, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	079b      	lsls	r3, r3, #30
 8009972:	d100      	bne.n	8009976 <__sflush_r+0xe2>
 8009974:	694a      	ldr	r2, [r1, #20]
 8009976:	60a2      	str	r2, [r4, #8]
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	dc00      	bgt.n	8009980 <__sflush_r+0xec>
 800997e:	e795      	b.n	80098ac <__sflush_r+0x18>
 8009980:	003a      	movs	r2, r7
 8009982:	0028      	movs	r0, r5
 8009984:	9b01      	ldr	r3, [sp, #4]
 8009986:	6a21      	ldr	r1, [r4, #32]
 8009988:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800998a:	47b0      	blx	r6
 800998c:	2800      	cmp	r0, #0
 800998e:	dc06      	bgt.n	800999e <__sflush_r+0x10a>
 8009990:	2340      	movs	r3, #64	; 0x40
 8009992:	2001      	movs	r0, #1
 8009994:	89a2      	ldrh	r2, [r4, #12]
 8009996:	4240      	negs	r0, r0
 8009998:	4313      	orrs	r3, r2
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	e787      	b.n	80098ae <__sflush_r+0x1a>
 800999e:	9b01      	ldr	r3, [sp, #4]
 80099a0:	183f      	adds	r7, r7, r0
 80099a2:	1a1b      	subs	r3, r3, r0
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	e7e7      	b.n	8009978 <__sflush_r+0xe4>
 80099a8:	20400001 	.word	0x20400001

080099ac <_fflush_r>:
 80099ac:	690b      	ldr	r3, [r1, #16]
 80099ae:	b570      	push	{r4, r5, r6, lr}
 80099b0:	0005      	movs	r5, r0
 80099b2:	000c      	movs	r4, r1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d102      	bne.n	80099be <_fflush_r+0x12>
 80099b8:	2500      	movs	r5, #0
 80099ba:	0028      	movs	r0, r5
 80099bc:	bd70      	pop	{r4, r5, r6, pc}
 80099be:	2800      	cmp	r0, #0
 80099c0:	d004      	beq.n	80099cc <_fflush_r+0x20>
 80099c2:	6983      	ldr	r3, [r0, #24]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <_fflush_r+0x20>
 80099c8:	f000 f892 	bl	8009af0 <__sinit>
 80099cc:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <_fflush_r+0x74>)
 80099ce:	429c      	cmp	r4, r3
 80099d0:	d11b      	bne.n	8009a0a <_fflush_r+0x5e>
 80099d2:	686c      	ldr	r4, [r5, #4]
 80099d4:	220c      	movs	r2, #12
 80099d6:	5ea3      	ldrsh	r3, [r4, r2]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d0ed      	beq.n	80099b8 <_fflush_r+0xc>
 80099dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099de:	07d2      	lsls	r2, r2, #31
 80099e0:	d404      	bmi.n	80099ec <_fflush_r+0x40>
 80099e2:	059b      	lsls	r3, r3, #22
 80099e4:	d402      	bmi.n	80099ec <_fflush_r+0x40>
 80099e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099e8:	f000 f923 	bl	8009c32 <__retarget_lock_acquire_recursive>
 80099ec:	0028      	movs	r0, r5
 80099ee:	0021      	movs	r1, r4
 80099f0:	f7ff ff50 	bl	8009894 <__sflush_r>
 80099f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099f6:	0005      	movs	r5, r0
 80099f8:	07db      	lsls	r3, r3, #31
 80099fa:	d4de      	bmi.n	80099ba <_fflush_r+0xe>
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	059b      	lsls	r3, r3, #22
 8009a00:	d4db      	bmi.n	80099ba <_fflush_r+0xe>
 8009a02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a04:	f000 f916 	bl	8009c34 <__retarget_lock_release_recursive>
 8009a08:	e7d7      	b.n	80099ba <_fflush_r+0xe>
 8009a0a:	4b06      	ldr	r3, [pc, #24]	; (8009a24 <_fflush_r+0x78>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	d101      	bne.n	8009a14 <_fflush_r+0x68>
 8009a10:	68ac      	ldr	r4, [r5, #8]
 8009a12:	e7df      	b.n	80099d4 <_fflush_r+0x28>
 8009a14:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <_fflush_r+0x7c>)
 8009a16:	429c      	cmp	r4, r3
 8009a18:	d1dc      	bne.n	80099d4 <_fflush_r+0x28>
 8009a1a:	68ec      	ldr	r4, [r5, #12]
 8009a1c:	e7da      	b.n	80099d4 <_fflush_r+0x28>
 8009a1e:	46c0      	nop			; (mov r8, r8)
 8009a20:	0800a2bc 	.word	0x0800a2bc
 8009a24:	0800a2dc 	.word	0x0800a2dc
 8009a28:	0800a29c 	.word	0x0800a29c

08009a2c <std>:
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	b510      	push	{r4, lr}
 8009a30:	0004      	movs	r4, r0
 8009a32:	6003      	str	r3, [r0, #0]
 8009a34:	6043      	str	r3, [r0, #4]
 8009a36:	6083      	str	r3, [r0, #8]
 8009a38:	8181      	strh	r1, [r0, #12]
 8009a3a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a3c:	0019      	movs	r1, r3
 8009a3e:	81c2      	strh	r2, [r0, #14]
 8009a40:	6103      	str	r3, [r0, #16]
 8009a42:	6143      	str	r3, [r0, #20]
 8009a44:	6183      	str	r3, [r0, #24]
 8009a46:	2208      	movs	r2, #8
 8009a48:	305c      	adds	r0, #92	; 0x5c
 8009a4a:	f7ff fdd1 	bl	80095f0 <memset>
 8009a4e:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <std+0x38>)
 8009a50:	6224      	str	r4, [r4, #32]
 8009a52:	6263      	str	r3, [r4, #36]	; 0x24
 8009a54:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <std+0x3c>)
 8009a56:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a58:	4b04      	ldr	r3, [pc, #16]	; (8009a6c <std+0x40>)
 8009a5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a5c:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <std+0x44>)
 8009a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	46c0      	nop			; (mov r8, r8)
 8009a64:	08009ef9 	.word	0x08009ef9
 8009a68:	08009f21 	.word	0x08009f21
 8009a6c:	08009f59 	.word	0x08009f59
 8009a70:	08009f85 	.word	0x08009f85

08009a74 <_cleanup_r>:
 8009a74:	b510      	push	{r4, lr}
 8009a76:	4902      	ldr	r1, [pc, #8]	; (8009a80 <_cleanup_r+0xc>)
 8009a78:	f000 f8ba 	bl	8009bf0 <_fwalk_reent>
 8009a7c:	bd10      	pop	{r4, pc}
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	080099ad 	.word	0x080099ad

08009a84 <__sfmoreglue>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	2568      	movs	r5, #104	; 0x68
 8009a88:	1e4a      	subs	r2, r1, #1
 8009a8a:	4355      	muls	r5, r2
 8009a8c:	000e      	movs	r6, r1
 8009a8e:	0029      	movs	r1, r5
 8009a90:	3174      	adds	r1, #116	; 0x74
 8009a92:	f000 f9a9 	bl	8009de8 <_malloc_r>
 8009a96:	1e04      	subs	r4, r0, #0
 8009a98:	d008      	beq.n	8009aac <__sfmoreglue+0x28>
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	002a      	movs	r2, r5
 8009a9e:	6001      	str	r1, [r0, #0]
 8009aa0:	6046      	str	r6, [r0, #4]
 8009aa2:	300c      	adds	r0, #12
 8009aa4:	60a0      	str	r0, [r4, #8]
 8009aa6:	3268      	adds	r2, #104	; 0x68
 8009aa8:	f7ff fda2 	bl	80095f0 <memset>
 8009aac:	0020      	movs	r0, r4
 8009aae:	bd70      	pop	{r4, r5, r6, pc}

08009ab0 <__sfp_lock_acquire>:
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	4802      	ldr	r0, [pc, #8]	; (8009abc <__sfp_lock_acquire+0xc>)
 8009ab4:	f000 f8bd 	bl	8009c32 <__retarget_lock_acquire_recursive>
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	46c0      	nop			; (mov r8, r8)
 8009abc:	20001cba 	.word	0x20001cba

08009ac0 <__sfp_lock_release>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	4802      	ldr	r0, [pc, #8]	; (8009acc <__sfp_lock_release+0xc>)
 8009ac4:	f000 f8b6 	bl	8009c34 <__retarget_lock_release_recursive>
 8009ac8:	bd10      	pop	{r4, pc}
 8009aca:	46c0      	nop			; (mov r8, r8)
 8009acc:	20001cba 	.word	0x20001cba

08009ad0 <__sinit_lock_acquire>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	4802      	ldr	r0, [pc, #8]	; (8009adc <__sinit_lock_acquire+0xc>)
 8009ad4:	f000 f8ad 	bl	8009c32 <__retarget_lock_acquire_recursive>
 8009ad8:	bd10      	pop	{r4, pc}
 8009ada:	46c0      	nop			; (mov r8, r8)
 8009adc:	20001cbb 	.word	0x20001cbb

08009ae0 <__sinit_lock_release>:
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	4802      	ldr	r0, [pc, #8]	; (8009aec <__sinit_lock_release+0xc>)
 8009ae4:	f000 f8a6 	bl	8009c34 <__retarget_lock_release_recursive>
 8009ae8:	bd10      	pop	{r4, pc}
 8009aea:	46c0      	nop			; (mov r8, r8)
 8009aec:	20001cbb 	.word	0x20001cbb

08009af0 <__sinit>:
 8009af0:	b513      	push	{r0, r1, r4, lr}
 8009af2:	0004      	movs	r4, r0
 8009af4:	f7ff ffec 	bl	8009ad0 <__sinit_lock_acquire>
 8009af8:	69a3      	ldr	r3, [r4, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <__sinit+0x14>
 8009afe:	f7ff ffef 	bl	8009ae0 <__sinit_lock_release>
 8009b02:	bd13      	pop	{r0, r1, r4, pc}
 8009b04:	64a3      	str	r3, [r4, #72]	; 0x48
 8009b06:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009b08:	6523      	str	r3, [r4, #80]	; 0x50
 8009b0a:	4b13      	ldr	r3, [pc, #76]	; (8009b58 <__sinit+0x68>)
 8009b0c:	4a13      	ldr	r2, [pc, #76]	; (8009b5c <__sinit+0x6c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	42a3      	cmp	r3, r4
 8009b16:	d101      	bne.n	8009b1c <__sinit+0x2c>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	61a3      	str	r3, [r4, #24]
 8009b1c:	0020      	movs	r0, r4
 8009b1e:	f000 f81f 	bl	8009b60 <__sfp>
 8009b22:	6060      	str	r0, [r4, #4]
 8009b24:	0020      	movs	r0, r4
 8009b26:	f000 f81b 	bl	8009b60 <__sfp>
 8009b2a:	60a0      	str	r0, [r4, #8]
 8009b2c:	0020      	movs	r0, r4
 8009b2e:	f000 f817 	bl	8009b60 <__sfp>
 8009b32:	2200      	movs	r2, #0
 8009b34:	2104      	movs	r1, #4
 8009b36:	60e0      	str	r0, [r4, #12]
 8009b38:	6860      	ldr	r0, [r4, #4]
 8009b3a:	f7ff ff77 	bl	8009a2c <std>
 8009b3e:	2201      	movs	r2, #1
 8009b40:	2109      	movs	r1, #9
 8009b42:	68a0      	ldr	r0, [r4, #8]
 8009b44:	f7ff ff72 	bl	8009a2c <std>
 8009b48:	2202      	movs	r2, #2
 8009b4a:	2112      	movs	r1, #18
 8009b4c:	68e0      	ldr	r0, [r4, #12]
 8009b4e:	f7ff ff6d 	bl	8009a2c <std>
 8009b52:	2301      	movs	r3, #1
 8009b54:	61a3      	str	r3, [r4, #24]
 8009b56:	e7d2      	b.n	8009afe <__sinit+0xe>
 8009b58:	0800a298 	.word	0x0800a298
 8009b5c:	08009a75 	.word	0x08009a75

08009b60 <__sfp>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	0007      	movs	r7, r0
 8009b64:	f7ff ffa4 	bl	8009ab0 <__sfp_lock_acquire>
 8009b68:	4b1f      	ldr	r3, [pc, #124]	; (8009be8 <__sfp+0x88>)
 8009b6a:	681e      	ldr	r6, [r3, #0]
 8009b6c:	69b3      	ldr	r3, [r6, #24]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d102      	bne.n	8009b78 <__sfp+0x18>
 8009b72:	0030      	movs	r0, r6
 8009b74:	f7ff ffbc 	bl	8009af0 <__sinit>
 8009b78:	3648      	adds	r6, #72	; 0x48
 8009b7a:	68b4      	ldr	r4, [r6, #8]
 8009b7c:	6873      	ldr	r3, [r6, #4]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	d504      	bpl.n	8009b8c <__sfp+0x2c>
 8009b82:	6833      	ldr	r3, [r6, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d022      	beq.n	8009bce <__sfp+0x6e>
 8009b88:	6836      	ldr	r6, [r6, #0]
 8009b8a:	e7f6      	b.n	8009b7a <__sfp+0x1a>
 8009b8c:	220c      	movs	r2, #12
 8009b8e:	5ea5      	ldrsh	r5, [r4, r2]
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	d11a      	bne.n	8009bca <__sfp+0x6a>
 8009b94:	0020      	movs	r0, r4
 8009b96:	4b15      	ldr	r3, [pc, #84]	; (8009bec <__sfp+0x8c>)
 8009b98:	3058      	adds	r0, #88	; 0x58
 8009b9a:	60e3      	str	r3, [r4, #12]
 8009b9c:	6665      	str	r5, [r4, #100]	; 0x64
 8009b9e:	f000 f847 	bl	8009c30 <__retarget_lock_init_recursive>
 8009ba2:	f7ff ff8d 	bl	8009ac0 <__sfp_lock_release>
 8009ba6:	0020      	movs	r0, r4
 8009ba8:	2208      	movs	r2, #8
 8009baa:	0029      	movs	r1, r5
 8009bac:	6025      	str	r5, [r4, #0]
 8009bae:	60a5      	str	r5, [r4, #8]
 8009bb0:	6065      	str	r5, [r4, #4]
 8009bb2:	6125      	str	r5, [r4, #16]
 8009bb4:	6165      	str	r5, [r4, #20]
 8009bb6:	61a5      	str	r5, [r4, #24]
 8009bb8:	305c      	adds	r0, #92	; 0x5c
 8009bba:	f7ff fd19 	bl	80095f0 <memset>
 8009bbe:	6365      	str	r5, [r4, #52]	; 0x34
 8009bc0:	63a5      	str	r5, [r4, #56]	; 0x38
 8009bc2:	64a5      	str	r5, [r4, #72]	; 0x48
 8009bc4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009bc6:	0020      	movs	r0, r4
 8009bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bca:	3468      	adds	r4, #104	; 0x68
 8009bcc:	e7d7      	b.n	8009b7e <__sfp+0x1e>
 8009bce:	2104      	movs	r1, #4
 8009bd0:	0038      	movs	r0, r7
 8009bd2:	f7ff ff57 	bl	8009a84 <__sfmoreglue>
 8009bd6:	1e04      	subs	r4, r0, #0
 8009bd8:	6030      	str	r0, [r6, #0]
 8009bda:	d1d5      	bne.n	8009b88 <__sfp+0x28>
 8009bdc:	f7ff ff70 	bl	8009ac0 <__sfp_lock_release>
 8009be0:	230c      	movs	r3, #12
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	e7ef      	b.n	8009bc6 <__sfp+0x66>
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	0800a298 	.word	0x0800a298
 8009bec:	ffff0001 	.word	0xffff0001

08009bf0 <_fwalk_reent>:
 8009bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bf2:	0004      	movs	r4, r0
 8009bf4:	0006      	movs	r6, r0
 8009bf6:	2700      	movs	r7, #0
 8009bf8:	9101      	str	r1, [sp, #4]
 8009bfa:	3448      	adds	r4, #72	; 0x48
 8009bfc:	6863      	ldr	r3, [r4, #4]
 8009bfe:	68a5      	ldr	r5, [r4, #8]
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	9b00      	ldr	r3, [sp, #0]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	d504      	bpl.n	8009c14 <_fwalk_reent+0x24>
 8009c0a:	6824      	ldr	r4, [r4, #0]
 8009c0c:	2c00      	cmp	r4, #0
 8009c0e:	d1f5      	bne.n	8009bfc <_fwalk_reent+0xc>
 8009c10:	0038      	movs	r0, r7
 8009c12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c14:	89ab      	ldrh	r3, [r5, #12]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d908      	bls.n	8009c2c <_fwalk_reent+0x3c>
 8009c1a:	220e      	movs	r2, #14
 8009c1c:	5eab      	ldrsh	r3, [r5, r2]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	d004      	beq.n	8009c2c <_fwalk_reent+0x3c>
 8009c22:	0029      	movs	r1, r5
 8009c24:	0030      	movs	r0, r6
 8009c26:	9b01      	ldr	r3, [sp, #4]
 8009c28:	4798      	blx	r3
 8009c2a:	4307      	orrs	r7, r0
 8009c2c:	3568      	adds	r5, #104	; 0x68
 8009c2e:	e7e8      	b.n	8009c02 <_fwalk_reent+0x12>

08009c30 <__retarget_lock_init_recursive>:
 8009c30:	4770      	bx	lr

08009c32 <__retarget_lock_acquire_recursive>:
 8009c32:	4770      	bx	lr

08009c34 <__retarget_lock_release_recursive>:
 8009c34:	4770      	bx	lr
	...

08009c38 <__swhatbuf_r>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	000e      	movs	r6, r1
 8009c3c:	001d      	movs	r5, r3
 8009c3e:	230e      	movs	r3, #14
 8009c40:	5ec9      	ldrsh	r1, [r1, r3]
 8009c42:	0014      	movs	r4, r2
 8009c44:	b096      	sub	sp, #88	; 0x58
 8009c46:	2900      	cmp	r1, #0
 8009c48:	da08      	bge.n	8009c5c <__swhatbuf_r+0x24>
 8009c4a:	220c      	movs	r2, #12
 8009c4c:	5eb3      	ldrsh	r3, [r6, r2]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	602a      	str	r2, [r5, #0]
 8009c52:	061b      	lsls	r3, r3, #24
 8009c54:	d411      	bmi.n	8009c7a <__swhatbuf_r+0x42>
 8009c56:	2380      	movs	r3, #128	; 0x80
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	e00f      	b.n	8009c7c <__swhatbuf_r+0x44>
 8009c5c:	466a      	mov	r2, sp
 8009c5e:	f000 f9bd 	bl	8009fdc <_fstat_r>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	dbf1      	blt.n	8009c4a <__swhatbuf_r+0x12>
 8009c66:	23f0      	movs	r3, #240	; 0xf0
 8009c68:	9901      	ldr	r1, [sp, #4]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	4019      	ands	r1, r3
 8009c6e:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <__swhatbuf_r+0x4c>)
 8009c70:	18c9      	adds	r1, r1, r3
 8009c72:	424b      	negs	r3, r1
 8009c74:	4159      	adcs	r1, r3
 8009c76:	6029      	str	r1, [r5, #0]
 8009c78:	e7ed      	b.n	8009c56 <__swhatbuf_r+0x1e>
 8009c7a:	2340      	movs	r3, #64	; 0x40
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	6023      	str	r3, [r4, #0]
 8009c80:	b016      	add	sp, #88	; 0x58
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	ffffe000 	.word	0xffffe000

08009c88 <__smakebuf_r>:
 8009c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8a:	2602      	movs	r6, #2
 8009c8c:	898b      	ldrh	r3, [r1, #12]
 8009c8e:	0005      	movs	r5, r0
 8009c90:	000c      	movs	r4, r1
 8009c92:	4233      	tst	r3, r6
 8009c94:	d006      	beq.n	8009ca4 <__smakebuf_r+0x1c>
 8009c96:	0023      	movs	r3, r4
 8009c98:	3347      	adds	r3, #71	; 0x47
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	6163      	str	r3, [r4, #20]
 8009ca2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009ca4:	466a      	mov	r2, sp
 8009ca6:	ab01      	add	r3, sp, #4
 8009ca8:	f7ff ffc6 	bl	8009c38 <__swhatbuf_r>
 8009cac:	9900      	ldr	r1, [sp, #0]
 8009cae:	0007      	movs	r7, r0
 8009cb0:	0028      	movs	r0, r5
 8009cb2:	f000 f899 	bl	8009de8 <_malloc_r>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d108      	bne.n	8009ccc <__smakebuf_r+0x44>
 8009cba:	220c      	movs	r2, #12
 8009cbc:	5ea3      	ldrsh	r3, [r4, r2]
 8009cbe:	059a      	lsls	r2, r3, #22
 8009cc0:	d4ef      	bmi.n	8009ca2 <__smakebuf_r+0x1a>
 8009cc2:	2203      	movs	r2, #3
 8009cc4:	4393      	bics	r3, r2
 8009cc6:	431e      	orrs	r6, r3
 8009cc8:	81a6      	strh	r6, [r4, #12]
 8009cca:	e7e4      	b.n	8009c96 <__smakebuf_r+0xe>
 8009ccc:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <__smakebuf_r+0x84>)
 8009cce:	62ab      	str	r3, [r5, #40]	; 0x28
 8009cd0:	2380      	movs	r3, #128	; 0x80
 8009cd2:	89a2      	ldrh	r2, [r4, #12]
 8009cd4:	6020      	str	r0, [r4, #0]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	9b00      	ldr	r3, [sp, #0]
 8009cdc:	6120      	str	r0, [r4, #16]
 8009cde:	6163      	str	r3, [r4, #20]
 8009ce0:	9b01      	ldr	r3, [sp, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00d      	beq.n	8009d02 <__smakebuf_r+0x7a>
 8009ce6:	0028      	movs	r0, r5
 8009ce8:	230e      	movs	r3, #14
 8009cea:	5ee1      	ldrsh	r1, [r4, r3]
 8009cec:	f000 f988 	bl	800a000 <_isatty_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d006      	beq.n	8009d02 <__smakebuf_r+0x7a>
 8009cf4:	2203      	movs	r2, #3
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	4393      	bics	r3, r2
 8009cfa:	001a      	movs	r2, r3
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	89a0      	ldrh	r0, [r4, #12]
 8009d04:	4307      	orrs	r7, r0
 8009d06:	81a7      	strh	r7, [r4, #12]
 8009d08:	e7cb      	b.n	8009ca2 <__smakebuf_r+0x1a>
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	08009a75 	.word	0x08009a75

08009d10 <_free_r>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	0005      	movs	r5, r0
 8009d14:	2900      	cmp	r1, #0
 8009d16:	d010      	beq.n	8009d3a <_free_r+0x2a>
 8009d18:	1f0c      	subs	r4, r1, #4
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	da00      	bge.n	8009d22 <_free_r+0x12>
 8009d20:	18e4      	adds	r4, r4, r3
 8009d22:	0028      	movs	r0, r5
 8009d24:	f000 f992 	bl	800a04c <__malloc_lock>
 8009d28:	4a1d      	ldr	r2, [pc, #116]	; (8009da0 <_free_r+0x90>)
 8009d2a:	6813      	ldr	r3, [r2, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d105      	bne.n	8009d3c <_free_r+0x2c>
 8009d30:	6063      	str	r3, [r4, #4]
 8009d32:	6014      	str	r4, [r2, #0]
 8009d34:	0028      	movs	r0, r5
 8009d36:	f000 f991 	bl	800a05c <__malloc_unlock>
 8009d3a:	bd70      	pop	{r4, r5, r6, pc}
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	d908      	bls.n	8009d52 <_free_r+0x42>
 8009d40:	6821      	ldr	r1, [r4, #0]
 8009d42:	1860      	adds	r0, r4, r1
 8009d44:	4283      	cmp	r3, r0
 8009d46:	d1f3      	bne.n	8009d30 <_free_r+0x20>
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	1841      	adds	r1, r0, r1
 8009d4e:	6021      	str	r1, [r4, #0]
 8009d50:	e7ee      	b.n	8009d30 <_free_r+0x20>
 8009d52:	001a      	movs	r2, r3
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <_free_r+0x4e>
 8009d5a:	42a3      	cmp	r3, r4
 8009d5c:	d9f9      	bls.n	8009d52 <_free_r+0x42>
 8009d5e:	6811      	ldr	r1, [r2, #0]
 8009d60:	1850      	adds	r0, r2, r1
 8009d62:	42a0      	cmp	r0, r4
 8009d64:	d10b      	bne.n	8009d7e <_free_r+0x6e>
 8009d66:	6820      	ldr	r0, [r4, #0]
 8009d68:	1809      	adds	r1, r1, r0
 8009d6a:	1850      	adds	r0, r2, r1
 8009d6c:	6011      	str	r1, [r2, #0]
 8009d6e:	4283      	cmp	r3, r0
 8009d70:	d1e0      	bne.n	8009d34 <_free_r+0x24>
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	1841      	adds	r1, r0, r1
 8009d78:	6011      	str	r1, [r2, #0]
 8009d7a:	6053      	str	r3, [r2, #4]
 8009d7c:	e7da      	b.n	8009d34 <_free_r+0x24>
 8009d7e:	42a0      	cmp	r0, r4
 8009d80:	d902      	bls.n	8009d88 <_free_r+0x78>
 8009d82:	230c      	movs	r3, #12
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	e7d5      	b.n	8009d34 <_free_r+0x24>
 8009d88:	6821      	ldr	r1, [r4, #0]
 8009d8a:	1860      	adds	r0, r4, r1
 8009d8c:	4283      	cmp	r3, r0
 8009d8e:	d103      	bne.n	8009d98 <_free_r+0x88>
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	1841      	adds	r1, r0, r1
 8009d96:	6021      	str	r1, [r4, #0]
 8009d98:	6063      	str	r3, [r4, #4]
 8009d9a:	6054      	str	r4, [r2, #4]
 8009d9c:	e7ca      	b.n	8009d34 <_free_r+0x24>
 8009d9e:	46c0      	nop			; (mov r8, r8)
 8009da0:	20001cbc 	.word	0x20001cbc

08009da4 <sbrk_aligned>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	4e0f      	ldr	r6, [pc, #60]	; (8009de4 <sbrk_aligned+0x40>)
 8009da8:	000d      	movs	r5, r1
 8009daa:	6831      	ldr	r1, [r6, #0]
 8009dac:	0004      	movs	r4, r0
 8009dae:	2900      	cmp	r1, #0
 8009db0:	d102      	bne.n	8009db8 <sbrk_aligned+0x14>
 8009db2:	f000 f88f 	bl	8009ed4 <_sbrk_r>
 8009db6:	6030      	str	r0, [r6, #0]
 8009db8:	0029      	movs	r1, r5
 8009dba:	0020      	movs	r0, r4
 8009dbc:	f000 f88a 	bl	8009ed4 <_sbrk_r>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d00a      	beq.n	8009dda <sbrk_aligned+0x36>
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	1cc5      	adds	r5, r0, #3
 8009dc8:	439d      	bics	r5, r3
 8009dca:	42a8      	cmp	r0, r5
 8009dcc:	d007      	beq.n	8009dde <sbrk_aligned+0x3a>
 8009dce:	1a29      	subs	r1, r5, r0
 8009dd0:	0020      	movs	r0, r4
 8009dd2:	f000 f87f 	bl	8009ed4 <_sbrk_r>
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	d101      	bne.n	8009dde <sbrk_aligned+0x3a>
 8009dda:	2501      	movs	r5, #1
 8009ddc:	426d      	negs	r5, r5
 8009dde:	0028      	movs	r0, r5
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
 8009de2:	46c0      	nop			; (mov r8, r8)
 8009de4:	20001cc0 	.word	0x20001cc0

08009de8 <_malloc_r>:
 8009de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dea:	2203      	movs	r2, #3
 8009dec:	1ccb      	adds	r3, r1, #3
 8009dee:	4393      	bics	r3, r2
 8009df0:	3308      	adds	r3, #8
 8009df2:	0006      	movs	r6, r0
 8009df4:	001f      	movs	r7, r3
 8009df6:	2b0c      	cmp	r3, #12
 8009df8:	d232      	bcs.n	8009e60 <_malloc_r+0x78>
 8009dfa:	270c      	movs	r7, #12
 8009dfc:	42b9      	cmp	r1, r7
 8009dfe:	d831      	bhi.n	8009e64 <_malloc_r+0x7c>
 8009e00:	0030      	movs	r0, r6
 8009e02:	f000 f923 	bl	800a04c <__malloc_lock>
 8009e06:	4d32      	ldr	r5, [pc, #200]	; (8009ed0 <_malloc_r+0xe8>)
 8009e08:	682b      	ldr	r3, [r5, #0]
 8009e0a:	001c      	movs	r4, r3
 8009e0c:	2c00      	cmp	r4, #0
 8009e0e:	d12e      	bne.n	8009e6e <_malloc_r+0x86>
 8009e10:	0039      	movs	r1, r7
 8009e12:	0030      	movs	r0, r6
 8009e14:	f7ff ffc6 	bl	8009da4 <sbrk_aligned>
 8009e18:	0004      	movs	r4, r0
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	d11e      	bne.n	8009e5c <_malloc_r+0x74>
 8009e1e:	682c      	ldr	r4, [r5, #0]
 8009e20:	0025      	movs	r5, r4
 8009e22:	2d00      	cmp	r5, #0
 8009e24:	d14a      	bne.n	8009ebc <_malloc_r+0xd4>
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	0029      	movs	r1, r5
 8009e2a:	18e3      	adds	r3, r4, r3
 8009e2c:	0030      	movs	r0, r6
 8009e2e:	9301      	str	r3, [sp, #4]
 8009e30:	f000 f850 	bl	8009ed4 <_sbrk_r>
 8009e34:	9b01      	ldr	r3, [sp, #4]
 8009e36:	4283      	cmp	r3, r0
 8009e38:	d143      	bne.n	8009ec2 <_malloc_r+0xda>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	3703      	adds	r7, #3
 8009e3e:	1aff      	subs	r7, r7, r3
 8009e40:	2303      	movs	r3, #3
 8009e42:	439f      	bics	r7, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	2f0c      	cmp	r7, #12
 8009e48:	d200      	bcs.n	8009e4c <_malloc_r+0x64>
 8009e4a:	270c      	movs	r7, #12
 8009e4c:	0039      	movs	r1, r7
 8009e4e:	0030      	movs	r0, r6
 8009e50:	f7ff ffa8 	bl	8009da4 <sbrk_aligned>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d034      	beq.n	8009ec2 <_malloc_r+0xda>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	19df      	adds	r7, r3, r7
 8009e5c:	6027      	str	r7, [r4, #0]
 8009e5e:	e013      	b.n	8009e88 <_malloc_r+0xa0>
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	dacb      	bge.n	8009dfc <_malloc_r+0x14>
 8009e64:	230c      	movs	r3, #12
 8009e66:	2500      	movs	r5, #0
 8009e68:	6033      	str	r3, [r6, #0]
 8009e6a:	0028      	movs	r0, r5
 8009e6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	1bd1      	subs	r1, r2, r7
 8009e72:	d420      	bmi.n	8009eb6 <_malloc_r+0xce>
 8009e74:	290b      	cmp	r1, #11
 8009e76:	d917      	bls.n	8009ea8 <_malloc_r+0xc0>
 8009e78:	19e2      	adds	r2, r4, r7
 8009e7a:	6027      	str	r7, [r4, #0]
 8009e7c:	42a3      	cmp	r3, r4
 8009e7e:	d111      	bne.n	8009ea4 <_malloc_r+0xbc>
 8009e80:	602a      	str	r2, [r5, #0]
 8009e82:	6863      	ldr	r3, [r4, #4]
 8009e84:	6011      	str	r1, [r2, #0]
 8009e86:	6053      	str	r3, [r2, #4]
 8009e88:	0030      	movs	r0, r6
 8009e8a:	0025      	movs	r5, r4
 8009e8c:	f000 f8e6 	bl	800a05c <__malloc_unlock>
 8009e90:	2207      	movs	r2, #7
 8009e92:	350b      	adds	r5, #11
 8009e94:	1d23      	adds	r3, r4, #4
 8009e96:	4395      	bics	r5, r2
 8009e98:	1aea      	subs	r2, r5, r3
 8009e9a:	429d      	cmp	r5, r3
 8009e9c:	d0e5      	beq.n	8009e6a <_malloc_r+0x82>
 8009e9e:	1b5b      	subs	r3, r3, r5
 8009ea0:	50a3      	str	r3, [r4, r2]
 8009ea2:	e7e2      	b.n	8009e6a <_malloc_r+0x82>
 8009ea4:	605a      	str	r2, [r3, #4]
 8009ea6:	e7ec      	b.n	8009e82 <_malloc_r+0x9a>
 8009ea8:	6862      	ldr	r2, [r4, #4]
 8009eaa:	42a3      	cmp	r3, r4
 8009eac:	d101      	bne.n	8009eb2 <_malloc_r+0xca>
 8009eae:	602a      	str	r2, [r5, #0]
 8009eb0:	e7ea      	b.n	8009e88 <_malloc_r+0xa0>
 8009eb2:	605a      	str	r2, [r3, #4]
 8009eb4:	e7e8      	b.n	8009e88 <_malloc_r+0xa0>
 8009eb6:	0023      	movs	r3, r4
 8009eb8:	6864      	ldr	r4, [r4, #4]
 8009eba:	e7a7      	b.n	8009e0c <_malloc_r+0x24>
 8009ebc:	002c      	movs	r4, r5
 8009ebe:	686d      	ldr	r5, [r5, #4]
 8009ec0:	e7af      	b.n	8009e22 <_malloc_r+0x3a>
 8009ec2:	230c      	movs	r3, #12
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	6033      	str	r3, [r6, #0]
 8009ec8:	f000 f8c8 	bl	800a05c <__malloc_unlock>
 8009ecc:	e7cd      	b.n	8009e6a <_malloc_r+0x82>
 8009ece:	46c0      	nop			; (mov r8, r8)
 8009ed0:	20001cbc 	.word	0x20001cbc

08009ed4 <_sbrk_r>:
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	b570      	push	{r4, r5, r6, lr}
 8009ed8:	4d06      	ldr	r5, [pc, #24]	; (8009ef4 <_sbrk_r+0x20>)
 8009eda:	0004      	movs	r4, r0
 8009edc:	0008      	movs	r0, r1
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	f7f6 fe56 	bl	8000b90 <_sbrk>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d103      	bne.n	8009ef0 <_sbrk_r+0x1c>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d000      	beq.n	8009ef0 <_sbrk_r+0x1c>
 8009eee:	6023      	str	r3, [r4, #0]
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	46c0      	nop			; (mov r8, r8)
 8009ef4:	20001cc4 	.word	0x20001cc4

08009ef8 <__sread>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	000c      	movs	r4, r1
 8009efc:	250e      	movs	r5, #14
 8009efe:	5f49      	ldrsh	r1, [r1, r5]
 8009f00:	f000 f8b4 	bl	800a06c <_read_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	db03      	blt.n	8009f10 <__sread+0x18>
 8009f08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009f0a:	181b      	adds	r3, r3, r0
 8009f0c:	6563      	str	r3, [r4, #84]	; 0x54
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	89a3      	ldrh	r3, [r4, #12]
 8009f12:	4a02      	ldr	r2, [pc, #8]	; (8009f1c <__sread+0x24>)
 8009f14:	4013      	ands	r3, r2
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	e7f9      	b.n	8009f0e <__sread+0x16>
 8009f1a:	46c0      	nop			; (mov r8, r8)
 8009f1c:	ffffefff 	.word	0xffffefff

08009f20 <__swrite>:
 8009f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f22:	001f      	movs	r7, r3
 8009f24:	898b      	ldrh	r3, [r1, #12]
 8009f26:	0005      	movs	r5, r0
 8009f28:	000c      	movs	r4, r1
 8009f2a:	0016      	movs	r6, r2
 8009f2c:	05db      	lsls	r3, r3, #23
 8009f2e:	d505      	bpl.n	8009f3c <__swrite+0x1c>
 8009f30:	230e      	movs	r3, #14
 8009f32:	5ec9      	ldrsh	r1, [r1, r3]
 8009f34:	2200      	movs	r2, #0
 8009f36:	2302      	movs	r3, #2
 8009f38:	f000 f874 	bl	800a024 <_lseek_r>
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	4a05      	ldr	r2, [pc, #20]	; (8009f54 <__swrite+0x34>)
 8009f40:	0028      	movs	r0, r5
 8009f42:	4013      	ands	r3, r2
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	0032      	movs	r2, r6
 8009f48:	230e      	movs	r3, #14
 8009f4a:	5ee1      	ldrsh	r1, [r4, r3]
 8009f4c:	003b      	movs	r3, r7
 8009f4e:	f000 f81f 	bl	8009f90 <_write_r>
 8009f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f54:	ffffefff 	.word	0xffffefff

08009f58 <__sseek>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	000c      	movs	r4, r1
 8009f5c:	250e      	movs	r5, #14
 8009f5e:	5f49      	ldrsh	r1, [r1, r5]
 8009f60:	f000 f860 	bl	800a024 <_lseek_r>
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	1c42      	adds	r2, r0, #1
 8009f68:	d103      	bne.n	8009f72 <__sseek+0x1a>
 8009f6a:	4a05      	ldr	r2, [pc, #20]	; (8009f80 <__sseek+0x28>)
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	81a3      	strh	r3, [r4, #12]
 8009f70:	bd70      	pop	{r4, r5, r6, pc}
 8009f72:	2280      	movs	r2, #128	; 0x80
 8009f74:	0152      	lsls	r2, r2, #5
 8009f76:	4313      	orrs	r3, r2
 8009f78:	81a3      	strh	r3, [r4, #12]
 8009f7a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f7c:	e7f8      	b.n	8009f70 <__sseek+0x18>
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	ffffefff 	.word	0xffffefff

08009f84 <__sclose>:
 8009f84:	b510      	push	{r4, lr}
 8009f86:	230e      	movs	r3, #14
 8009f88:	5ec9      	ldrsh	r1, [r1, r3]
 8009f8a:	f000 f815 	bl	8009fb8 <_close_r>
 8009f8e:	bd10      	pop	{r4, pc}

08009f90 <_write_r>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	0004      	movs	r4, r0
 8009f94:	0008      	movs	r0, r1
 8009f96:	0011      	movs	r1, r2
 8009f98:	001a      	movs	r2, r3
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	4d05      	ldr	r5, [pc, #20]	; (8009fb4 <_write_r+0x24>)
 8009f9e:	602b      	str	r3, [r5, #0]
 8009fa0:	f7f6 fdad 	bl	8000afe <_write>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d103      	bne.n	8009fb0 <_write_r+0x20>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d000      	beq.n	8009fb0 <_write_r+0x20>
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	20001cc4 	.word	0x20001cc4

08009fb8 <_close_r>:
 8009fb8:	2300      	movs	r3, #0
 8009fba:	b570      	push	{r4, r5, r6, lr}
 8009fbc:	4d06      	ldr	r5, [pc, #24]	; (8009fd8 <_close_r+0x20>)
 8009fbe:	0004      	movs	r4, r0
 8009fc0:	0008      	movs	r0, r1
 8009fc2:	602b      	str	r3, [r5, #0]
 8009fc4:	f7f6 fdb7 	bl	8000b36 <_close>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d103      	bne.n	8009fd4 <_close_r+0x1c>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d000      	beq.n	8009fd4 <_close_r+0x1c>
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	bd70      	pop	{r4, r5, r6, pc}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	20001cc4 	.word	0x20001cc4

08009fdc <_fstat_r>:
 8009fdc:	2300      	movs	r3, #0
 8009fde:	b570      	push	{r4, r5, r6, lr}
 8009fe0:	4d06      	ldr	r5, [pc, #24]	; (8009ffc <_fstat_r+0x20>)
 8009fe2:	0004      	movs	r4, r0
 8009fe4:	0008      	movs	r0, r1
 8009fe6:	0011      	movs	r1, r2
 8009fe8:	602b      	str	r3, [r5, #0]
 8009fea:	f7f6 fdae 	bl	8000b4a <_fstat>
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	d103      	bne.n	8009ffa <_fstat_r+0x1e>
 8009ff2:	682b      	ldr	r3, [r5, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d000      	beq.n	8009ffa <_fstat_r+0x1e>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	20001cc4 	.word	0x20001cc4

0800a000 <_isatty_r>:
 800a000:	2300      	movs	r3, #0
 800a002:	b570      	push	{r4, r5, r6, lr}
 800a004:	4d06      	ldr	r5, [pc, #24]	; (800a020 <_isatty_r+0x20>)
 800a006:	0004      	movs	r4, r0
 800a008:	0008      	movs	r0, r1
 800a00a:	602b      	str	r3, [r5, #0]
 800a00c:	f7f6 fdab 	bl	8000b66 <_isatty>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d103      	bne.n	800a01c <_isatty_r+0x1c>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d000      	beq.n	800a01c <_isatty_r+0x1c>
 800a01a:	6023      	str	r3, [r4, #0]
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
 800a01e:	46c0      	nop			; (mov r8, r8)
 800a020:	20001cc4 	.word	0x20001cc4

0800a024 <_lseek_r>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	0004      	movs	r4, r0
 800a028:	0008      	movs	r0, r1
 800a02a:	0011      	movs	r1, r2
 800a02c:	001a      	movs	r2, r3
 800a02e:	2300      	movs	r3, #0
 800a030:	4d05      	ldr	r5, [pc, #20]	; (800a048 <_lseek_r+0x24>)
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	f7f6 fda0 	bl	8000b78 <_lseek>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d103      	bne.n	800a044 <_lseek_r+0x20>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d000      	beq.n	800a044 <_lseek_r+0x20>
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	bd70      	pop	{r4, r5, r6, pc}
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	20001cc4 	.word	0x20001cc4

0800a04c <__malloc_lock>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	4802      	ldr	r0, [pc, #8]	; (800a058 <__malloc_lock+0xc>)
 800a050:	f7ff fdef 	bl	8009c32 <__retarget_lock_acquire_recursive>
 800a054:	bd10      	pop	{r4, pc}
 800a056:	46c0      	nop			; (mov r8, r8)
 800a058:	20001cb9 	.word	0x20001cb9

0800a05c <__malloc_unlock>:
 800a05c:	b510      	push	{r4, lr}
 800a05e:	4802      	ldr	r0, [pc, #8]	; (800a068 <__malloc_unlock+0xc>)
 800a060:	f7ff fde8 	bl	8009c34 <__retarget_lock_release_recursive>
 800a064:	bd10      	pop	{r4, pc}
 800a066:	46c0      	nop			; (mov r8, r8)
 800a068:	20001cb9 	.word	0x20001cb9

0800a06c <_read_r>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	0004      	movs	r4, r0
 800a070:	0008      	movs	r0, r1
 800a072:	0011      	movs	r1, r2
 800a074:	001a      	movs	r2, r3
 800a076:	2300      	movs	r3, #0
 800a078:	4d05      	ldr	r5, [pc, #20]	; (800a090 <_read_r+0x24>)
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	f7f6 fd22 	bl	8000ac4 <_read>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d103      	bne.n	800a08c <_read_r+0x20>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d000      	beq.n	800a08c <_read_r+0x20>
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
 800a08e:	46c0      	nop			; (mov r8, r8)
 800a090:	20001cc4 	.word	0x20001cc4

0800a094 <_init>:
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a096:	46c0      	nop			; (mov r8, r8)
 800a098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09a:	bc08      	pop	{r3}
 800a09c:	469e      	mov	lr, r3
 800a09e:	4770      	bx	lr

0800a0a0 <_fini>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a6:	bc08      	pop	{r3}
 800a0a8:	469e      	mov	lr, r3
 800a0aa:	4770      	bx	lr
