
NiamaGO-G0B1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d98  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f54  08003f54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f5c  08003f5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000070  08003fd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08003fd4  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc34  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e1  00000000  00000000  0002fccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000320b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00032cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccca  00000000  00000000  00033818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f80c  00000000  00000000  000504e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b550c  00000000  00000000  0005fcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001151fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000316c  00000000  00000000  0011524c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003e3c 	.word	0x08003e3c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003e3c 	.word	0x08003e3c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fb64 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f832 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f910 	bl	800084c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800062c:	f000 f88a 	bl	8000744 <MX_USART3_UART_Init>
  MX_USB_DRD_FS_HCD_Init();
 8000630:	f000 f8d6 	bl	80007e0 <MX_USB_DRD_FS_HCD_Init>
  /* USER CODE BEGIN 2 */

  printf("NiamaGO: Init done!\n");
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <main+0x68>)
 8000636:	0018      	movs	r0, r3
 8000638:	f002 ff28 	bl	800348c <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // LED2 on, LED3 off
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <main+0x6c>)
 800063e:	2201      	movs	r2, #1
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fe32 	bl	80012ac <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <main+0x6c>)
 800064a:	2200      	movs	r2, #0
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fe2c 	bl	80012ac <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000654:	23fa      	movs	r3, #250	; 0xfa
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fbcd 	bl	8000df8 <HAL_Delay>
    // LED2 off, LED3 on
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <main+0x6c>)
 8000660:	2200      	movs	r2, #0
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fe21 	bl	80012ac <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <main+0x6c>)
 800066c:	2201      	movs	r2, #1
 800066e:	2140      	movs	r1, #64	; 0x40
 8000670:	0018      	movs	r0, r3
 8000672:	f000 fe1b 	bl	80012ac <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000676:	23fa      	movs	r3, #250	; 0xfa
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fbbc 	bl	8000df8 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000680:	e7dc      	b.n	800063c <main+0x20>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	08003e54 	.word	0x08003e54
 8000688:	50000800 	.word	0x50000800

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b095      	sub	sp, #84	; 0x54
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	2414      	movs	r4, #20
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	233c      	movs	r3, #60	; 0x3c
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fe7b 	bl	8003398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2310      	movs	r3, #16
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f002 fe74 	bl	8003398 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fedf 	bl	8001478 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI48;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2221      	movs	r2, #33	; 0x21
 80006be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	0252      	lsls	r2, r2, #9
 80006c6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	03d2      	lsls	r2, r2, #15
 80006ce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	0021      	movs	r1, r4
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2203      	movs	r2, #3
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2210      	movs	r2, #16
 80006e8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0292      	lsls	r2, r2, #10
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0492      	lsls	r2, r2, #18
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0592      	lsls	r2, r2, #22
 8000700:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	187b      	adds	r3, r7, r1
 8000704:	0018      	movs	r0, r3
 8000706:	f000 ff03 	bl	8001510 <HAL_RCC_OscConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800070e:	f000 f913 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2202      	movs	r2, #2
 800071c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2102      	movs	r1, #2
 800072e:	0018      	movs	r0, r3
 8000730:	f001 fa4e 	bl	8001bd0 <HAL_RCC_ClockConfig>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000738:	f000 f8fe 	bl	8000938 <Error_Handler>
  }
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b015      	add	sp, #84	; 0x54
 8000742:	bd90      	pop	{r4, r7, pc}

08000744 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <MX_USART3_UART_Init+0x98>)
 800074c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 8000750:	22e1      	movs	r2, #225	; 0xe1
 8000752:	0252      	lsls	r2, r2, #9
 8000754:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 800078e:	0018      	movs	r0, r3
 8000790:	f001 fe04 	bl	800239c <HAL_UART_Init>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000798:	f000 f8ce 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 800079e:	2100      	movs	r1, #0
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fc53 	bl	800304c <HAL_UARTEx_SetTxFifoThreshold>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007aa:	f000 f8c5 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fc8a 	bl	80030cc <HAL_UARTEx_SetRxFifoThreshold>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007bc:	f000 f8bc 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <MX_USART3_UART_Init+0x94>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 fc08 	bl	8002fd8 <HAL_UARTEx_DisableFifoMode>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007cc:	f000 f8b4 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	40004800 	.word	0x40004800

080007e0 <MX_USB_DRD_FS_HCD_Init>:
  * @brief USB_DRD_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_DRD_FS_HCD_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hhcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_USB_DRD_FS_HCD_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 80007ec:	2208      	movs	r2, #8
 80007ee:	605a      	str	r2, [r3, #4]
  hhcd_USB_DRD_FS.Init.Host_channels = 8;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	609a      	str	r2, [r3, #8]
  hhcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	60da      	str	r2, [r3, #12]
  hhcd_USB_DRD_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 80007fe:	2202      	movs	r2, #2
 8000800:	619a      	str	r2, [r3, #24]
  hhcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hhcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  hhcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
  hhcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hhcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	; 0x30
  hhcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_DRD_FS) != HAL_OK)
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_USB_DRD_FS_HCD_Init+0x64>)
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fd5a 	bl	80012e8 <HAL_HCD_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_USB_DRD_FS_HCD_Init+0x5c>
  {
    Error_Handler();
 8000838:	f000 f87e 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	2000011c 	.word	0x2000011c
 8000848:	40005c00 	.word	0x40005c00

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	2414      	movs	r4, #20
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f002 fd9b 	bl	8003398 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000862:	4b32      	ldr	r3, [pc, #200]	; (800092c <MX_GPIO_Init+0xe0>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <MX_GPIO_Init+0xe0>)
 8000868:	2120      	movs	r1, #32
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_GPIO_Init+0xe0>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	2220      	movs	r2, #32
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_GPIO_Init+0xe0>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xe0>)
 8000880:	2102      	movs	r1, #2
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_GPIO_Init+0xe0>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088a:	2202      	movs	r2, #2
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_GPIO_Init+0xe0>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_GPIO_Init+0xe0>)
 8000898:	2104      	movs	r1, #4
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_GPIO_Init+0xe0>)
 80008a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a2:	2204      	movs	r2, #4
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_GPIO_Init+0xe0>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_GPIO_Init+0xe0>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_GPIO_Init+0xe0>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VBUS_Drive_GPIO_Port, VBUS_Drive_Pin, GPIO_PIN_RESET);
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_GPIO_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2102      	movs	r1, #2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fcef 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	21c0      	movs	r1, #192	; 0xc0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 fce9 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_Drive_Pin */
  GPIO_InitStruct.Pin = VBUS_Drive_Pin;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2201      	movs	r2, #1
 80008e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(VBUS_Drive_GPIO_Port, &GPIO_InitStruct);
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <MX_GPIO_Init+0xe4>)
 80008f6:	0019      	movs	r1, r3
 80008f8:	0010      	movs	r0, r2
 80008fa:	f000 fb6b 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2201      	movs	r2, #1
 800090a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000918:	187b      	adds	r3, r7, r1
 800091a:	4a06      	ldr	r2, [pc, #24]	; (8000934 <MX_GPIO_Init+0xe8>)
 800091c:	0019      	movs	r1, r3
 800091e:	0010      	movs	r0, r2
 8000920:	f000 fb58 	bl	8000fd4 <HAL_GPIO_Init>

}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b00b      	add	sp, #44	; 0x2c
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	50000400 	.word	0x50000400
 8000934:	50000800 	.word	0x50000800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_MspInit+0x4c>)
 800094c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	2101      	movs	r1, #1
 8000952:	430a      	orrs	r2, r1
 8000954:	641a      	str	r2, [r3, #64]	; 0x40
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	2201      	movs	r2, #1
 800095c:	4013      	ands	r3, r2
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_MspInit+0x4c>)
 8000964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_MspInit+0x4c>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0549      	lsls	r1, r1, #21
 800096c:	430a      	orrs	r2, r1
 800096e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <HAL_MspInit+0x4c>)
 8000972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	055b      	lsls	r3, r3, #21
 8000978:	4013      	ands	r3, r2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800097e:	23c0      	movs	r3, #192	; 0xc0
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fa5c 	bl	8000e40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b09d      	sub	sp, #116	; 0x74
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	235c      	movs	r3, #92	; 0x5c
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	0018      	movs	r0, r3
 80009a2:	2314      	movs	r3, #20
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f002 fcf6 	bl	8003398 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	2410      	movs	r4, #16
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	0018      	movs	r0, r3
 80009b2:	234c      	movs	r3, #76	; 0x4c
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f002 fcee 	bl	8003398 <memset>
  if(huart->Instance==USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_UART_MspInit+0xb8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d13e      	bne.n	8000a44 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2204      	movs	r2, #4
 80009ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 faa5 	bl	8001f24 <HAL_RCCEx_PeriphCLKConfig>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009de:	f7ff ffab 	bl	8000938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_UART_MspInit+0xbc>)
 80009e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_UART_MspInit+0xbc>)
 80009e8:	2180      	movs	r1, #128	; 0x80
 80009ea:	02c9      	lsls	r1, r1, #11
 80009ec:	430a      	orrs	r2, r1
 80009ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0xbc>)
 80009f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	02db      	lsls	r3, r3, #11
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_UART_MspInit+0xbc>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_UART_MspInit+0xbc>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0xbc>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB8     ------> USART3_TX
    PB9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a16:	215c      	movs	r1, #92	; 0x5c
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	22c0      	movs	r2, #192	; 0xc0
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2202      	movs	r2, #2
 8000a24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2204      	movs	r2, #4
 8000a36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_UART_MspInit+0xc0>)
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	0010      	movs	r0, r2
 8000a40:	f000 fac8 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a44:	46c0      	nop			; (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b01d      	add	sp, #116	; 0x74
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	40004800 	.word	0x40004800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	50000400 	.word	0x50000400

08000a58 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b099      	sub	sp, #100	; 0x64
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	2414      	movs	r4, #20
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	234c      	movs	r3, #76	; 0x4c
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f002 fc94 	bl	8003398 <memset>
  if(hhcd->Instance==USB_DRD_FS)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <HAL_HCD_MspInit+0xa4>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d13b      	bne.n	8000af2 <HAL_HCD_MspInit+0x9a>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0452      	lsls	r2, r2, #17
 8000a80:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fa4a 	bl	8001f24 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_HCD_MspInit+0x40>
    {
      Error_Handler();
 8000a94:	f7ff ff50 	bl	8000938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	0189      	lsls	r1, r1, #6
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	055b      	lsls	r3, r3, #21
 8000abc:	4013      	ands	r3, r2
 8000abe:	d116      	bne.n	8000aee <HAL_HCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0549      	lsls	r1, r1, #21
 8000aca:	430a      	orrs	r2, r1
 8000acc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	055b      	lsls	r3, r3, #21
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000adc:	f000 fcbe 	bl	800145c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_HCD_MspInit+0xa8>)
 8000ae6:	4907      	ldr	r1, [pc, #28]	; (8000b04 <HAL_HCD_MspInit+0xac>)
 8000ae8:	400a      	ands	r2, r1
 8000aea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8000aec:	e001      	b.n	8000af2 <HAL_HCD_MspInit+0x9a>
      HAL_PWREx_EnableVddUSB();
 8000aee:	f000 fcb5 	bl	800145c <HAL_PWREx_EnableVddUSB>
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b019      	add	sp, #100	; 0x64
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40005c00 	.word	0x40005c00
 8000b00:	40021000 	.word	0x40021000
 8000b04:	efffffff 	.word	0xefffffff

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f948 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e00a      	b.n	8000b5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b48:	e000      	b.n	8000b4c <_read+0x16>
 8000b4a:	bf00      	nop
 8000b4c:	0001      	movs	r1, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	60ba      	str	r2, [r7, #8]
 8000b54:	b2ca      	uxtb	r2, r1
 8000b56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbf0      	blt.n	8000b48 <_read+0x12>
	}

return len;
 8000b66:	687b      	ldr	r3, [r7, #4]
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b006      	add	sp, #24
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e009      	b.n	8000b96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	60ba      	str	r2, [r7, #8]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f86e 	bl	8000c6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dbf1      	blt.n	8000b82 <_write+0x12>
	}
	return len;
 8000b9e:	687b      	ldr	r3, [r7, #4]
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	b006      	add	sp, #24
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_close>:

int _close(int file)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	return -1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	425b      	negs	r3, r3
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	0192      	lsls	r2, r2, #6
 8000bcc:	605a      	str	r2, [r3, #4]
	return 0;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_isatty>:

int _isatty(int file)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	return 1;
 8000be0:	2301      	movs	r3, #1
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b004      	add	sp, #16
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 fb88 	bl	8003344 <__errno>
 8000c34:	0003      	movs	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	18d2      	adds	r2, r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b006      	add	sp, #24
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20024000 	.word	0x20024000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200004a4 	.word	0x200004a4
 8000c68:	200004c0 	.word	0x200004c0

08000c6c <__io_putchar>:
static char dtx_buffer[64];
extern UART_HandleTypeDef huart3;

#ifdef DBG_ENABLE_PRINTF
PUTCHAR_PROTOTYPE
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c74:	2301      	movs	r3, #1
 8000c76:	425b      	negs	r3, r3
 8000c78:	1d39      	adds	r1, r7, #4
 8000c7a:	4804      	ldr	r0, [pc, #16]	; (8000c8c <__io_putchar+0x20>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f001 fbe3 	bl	8002448 <HAL_UART_Transmit>
  return ch;
 8000c82:	687b      	ldr	r3, [r7, #4]
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000008c 	.word	0x2000008c

08000c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c94:	f000 f825 	bl	8000ce2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cbe:	f002 fb47 	bl	8003350 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cc2:	f7ff fcab 	bl	800061c <main>

08000cc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   r0, =_estack
 8000cc8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd4:	08003f64 	.word	0x08003f64
  ldr r2, =_sbss
 8000cd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cdc:	200004bc 	.word	0x200004bc

08000ce0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_COMP_IRQHandler>

08000ce2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_Init+0x3c>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_Init+0x3c>)
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	0049      	lsls	r1, r1, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d06:	2003      	movs	r0, #3
 8000d08:	f000 f810 	bl	8000d2c <HAL_InitTick>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	2201      	movs	r2, #1
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e001      	b.n	8000d1c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fe14 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	781b      	ldrb	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <HAL_InitTick+0x88>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d02b      	beq.n	8000d9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <HAL_InitTick+0x8c>)
 8000d46:	681c      	ldr	r4, [r3, #0]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_InitTick+0x88>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	23fa      	movs	r3, #250	; 0xfa
 8000d50:	0098      	lsls	r0, r3, #2
 8000d52:	f7ff f9d7 	bl	8000104 <__udivsi3>
 8000d56:	0003      	movs	r3, r0
 8000d58:	0019      	movs	r1, r3
 8000d5a:	0020      	movs	r0, r4
 8000d5c:	f7ff f9d2 	bl	8000104 <__udivsi3>
 8000d60:	0003      	movs	r3, r0
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 f929 	bl	8000fba <HAL_SYSTICK_Config>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d112      	bne.n	8000d92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d80a      	bhi.n	8000d88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	2301      	movs	r3, #1
 8000d76:	425b      	negs	r3, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f000 f908 	bl	8000f90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_InitTick+0x90>)
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e00d      	b.n	8000da4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d88:	230f      	movs	r3, #15
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e008      	b.n	8000da4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d92:	230f      	movs	r3, #15
 8000d94:	18fb      	adds	r3, r7, r3
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e003      	b.n	8000da4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000da4:	230f      	movs	r3, #15
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	781b      	ldrb	r3, [r3, #0]
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b005      	add	sp, #20
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	001a      	movs	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	18d2      	adds	r2, r2, r3
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	601a      	str	r2, [r3, #0]
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	200004a8 	.word	0x200004a8

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	200004a8 	.word	0x200004a8

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff fff0 	bl	8000de4 <HAL_GetTick>
 8000e04:	0003      	movs	r3, r0
 8000e06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	001a      	movs	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	189b      	adds	r3, r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	f7ff ffe0 	bl	8000de4 <HAL_GetTick>
 8000e24:	0002      	movs	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b004      	add	sp, #16
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	20000008 	.word	0x20000008

08000e40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	0019      	movs	r1, r3
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40010000 	.word	0x40010000
 8000e68:	fffff9ff 	.word	0xfffff9ff

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0002      	movs	r2, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e80:	d828      	bhi.n	8000ed4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e82:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <__NVIC_SetPriority+0xd4>)
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	33c0      	adds	r3, #192	; 0xc0
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	589b      	ldr	r3, [r3, r2]
 8000e92:	1dfa      	adds	r2, r7, #7
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	0011      	movs	r1, r2
 8000e98:	2203      	movs	r2, #3
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	00d2      	lsls	r2, r2, #3
 8000e9e:	21ff      	movs	r1, #255	; 0xff
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	000a      	movs	r2, r1
 8000ea4:	43d2      	mvns	r2, r2
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	019b      	lsls	r3, r3, #6
 8000eae:	22ff      	movs	r2, #255	; 0xff
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	2303      	movs	r3, #3
 8000eba:	4003      	ands	r3, r0
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec0:	481f      	ldr	r0, [pc, #124]	; (8000f40 <__NVIC_SetPriority+0xd4>)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	33c0      	adds	r3, #192	; 0xc0
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ed2:	e031      	b.n	8000f38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <__NVIC_SetPriority+0xd8>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	0019      	movs	r1, r3
 8000edc:	230f      	movs	r3, #15
 8000ede:	400b      	ands	r3, r1
 8000ee0:	3b08      	subs	r3, #8
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3306      	adds	r3, #6
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	3304      	adds	r3, #4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1dfa      	adds	r2, r7, #7
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	21ff      	movs	r1, #255	; 0xff
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	401a      	ands	r2, r3
 8000f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	0018      	movs	r0, r3
 8000f14:	2303      	movs	r3, #3
 8000f16:	4003      	ands	r3, r0
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <__NVIC_SetPriority+0xd8>)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	001c      	movs	r4, r3
 8000f24:	230f      	movs	r3, #15
 8000f26:	4023      	ands	r3, r4
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	3306      	adds	r3, #6
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	18c3      	adds	r3, r0, r3
 8000f34:	3304      	adds	r3, #4
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b003      	add	sp, #12
 8000f3e:	bd90      	pop	{r4, r7, pc}
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	1e5a      	subs	r2, r3, #1
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	045b      	lsls	r3, r3, #17
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d301      	bcc.n	8000f60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e010      	b.n	8000f82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <SysTick_Config+0x44>)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	3a01      	subs	r2, #1
 8000f66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f68:	2301      	movs	r3, #1
 8000f6a:	425b      	negs	r3, r3
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f7ff ff7c 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x44>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x44>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	1c02      	adds	r2, r0, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ffbf 	bl	8000f48 <SysTick_Config>
 8000fca:	0003      	movs	r3, r0
}
 8000fcc:	0018      	movs	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	e14d      	b.n	8001280 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4091      	lsls	r1, r2
 8000fee:	000a      	movs	r2, r1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d100      	bne.n	8000ffc <HAL_GPIO_Init+0x28>
 8000ffa:	e13e      	b.n	800127a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2203      	movs	r2, #3
 8001002:	4013      	ands	r3, r2
 8001004:	2b01      	cmp	r3, #1
 8001006:	d005      	beq.n	8001014 <HAL_GPIO_Init+0x40>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
 8001010:	2b02      	cmp	r3, #2
 8001012:	d130      	bne.n	8001076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	43da      	mvns	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800104a:	2201      	movs	r2, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	2201      	movs	r2, #1
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2203      	movs	r2, #3
 800107c:	4013      	ands	r3, r2
 800107e:	2b03      	cmp	r3, #3
 8001080:	d017      	beq.n	80010b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	43da      	mvns	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2203      	movs	r2, #3
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d123      	bne.n	8001106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	58d3      	ldr	r3, [r2, r3]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2207      	movs	r2, #7
 80010d0:	4013      	ands	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2107      	movs	r1, #7
 80010ea:	400b      	ands	r3, r1
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	6939      	ldr	r1, [r7, #16]
 8001104:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2203      	movs	r2, #3
 8001124:	401a      	ands	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	409a      	lsls	r2, r3
 800112c:	0013      	movs	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	23c0      	movs	r3, #192	; 0xc0
 8001140:	029b      	lsls	r3, r3, #10
 8001142:	4013      	ands	r3, r2
 8001144:	d100      	bne.n	8001148 <HAL_GPIO_Init+0x174>
 8001146:	e098      	b.n	800127a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001148:	4a53      	ldr	r2, [pc, #332]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3318      	adds	r3, #24
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	589b      	ldr	r3, [r3, r2]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	220f      	movs	r2, #15
 8001160:	409a      	lsls	r2, r3
 8001162:	0013      	movs	r3, r2
 8001164:	43da      	mvns	r2, r3
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	05db      	lsls	r3, r3, #23
 8001172:	429a      	cmp	r2, r3
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x1d6>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a48      	ldr	r2, [pc, #288]	; (800129c <HAL_GPIO_Init+0x2c8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x1d2>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_GPIO_Init+0x2cc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x1ce>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <HAL_GPIO_Init+0x2d0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x1ca>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a45      	ldr	r2, [pc, #276]	; (80012a8 <HAL_GPIO_Init+0x2d4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x1c6>
 8001196:	2304      	movs	r3, #4
 8001198:	e008      	b.n	80011ac <HAL_GPIO_Init+0x1d8>
 800119a:	2305      	movs	r3, #5
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x1d8>
 800119e:	2303      	movs	r3, #3
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x1d8>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x1d8>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x1d8>
 80011aa:	2300      	movs	r3, #0
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	2103      	movs	r1, #3
 80011b0:	400a      	ands	r2, r1
 80011b2:	00d2      	lsls	r2, r2, #3
 80011b4:	4093      	lsls	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011bc:	4936      	ldr	r1, [pc, #216]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3318      	adds	r3, #24
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	035b      	lsls	r3, r3, #13
 80011e2:	4013      	ands	r3, r2
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	039b      	lsls	r3, r3, #14
 800120c:	4013      	ands	r3, r2
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 8001220:	2384      	movs	r3, #132	; 0x84
 8001222:	58d3      	ldr	r3, [r2, r3]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43da      	mvns	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	029b      	lsls	r3, r3, #10
 8001238:	4013      	ands	r3, r2
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001244:	4914      	ldr	r1, [pc, #80]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 8001246:	2284      	movs	r2, #132	; 0x84
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	58d3      	ldr	r3, [r2, r3]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	4013      	ands	r3, r2
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001272:	4909      	ldr	r1, [pc, #36]	; (8001298 <HAL_GPIO_Init+0x2c4>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	40da      	lsrs	r2, r3
 8001288:	1e13      	subs	r3, r2, #0
 800128a:	d000      	beq.n	800128e <HAL_GPIO_Init+0x2ba>
 800128c:	e6aa      	b.n	8000fe4 <HAL_GPIO_Init+0x10>
  }
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b006      	add	sp, #24
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021800 	.word	0x40021800
 800129c:	50000400 	.word	0x50000400
 80012a0:	50000800 	.word	0x50000800
 80012a4:	50000c00 	.word	0x50000c00
 80012a8:	50001000 	.word	0x50001000

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	0008      	movs	r0, r1
 80012b6:	0011      	movs	r1, r2
 80012b8:	1cbb      	adds	r3, r7, #2
 80012ba:	1c02      	adds	r2, r0, #0
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	1c7b      	adds	r3, r7, #1
 80012c0:	1c0a      	adds	r2, r1, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c4:	1c7b      	adds	r3, r7, #1
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012cc:	1cbb      	adds	r3, r7, #2
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d4:	e003      	b.n	80012de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d6:	1cbb      	adds	r3, r7, #2
 80012d8:	881a      	ldrh	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	b08d      	sub	sp, #52	; 0x34
 80012ec:	af0a      	add	r7, sp, #40	; 0x28
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e063      	b.n	80013c2 <HAL_HCD_Init+0xda>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a33      	ldr	r2, [pc, #204]	; (80013cc <HAL_HCD_Init+0xe4>)
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d107      	bne.n	8001316 <HAL_HCD_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <HAL_HCD_Init+0xe8>)
 800130a:	2100      	movs	r1, #0
 800130c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff fba1 	bl	8000a58 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <HAL_HCD_Init+0xe4>)
 800131a:	2103      	movs	r1, #3
 800131c:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  (void)__HAL_HCD_DISABLE(hhcd);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	0018      	movs	r0, r3
 8001324:	f001 ffa8 	bl	8003278 <USB_DisableGlobalInt>

  /* Dma not supported, force to zero */
  hhcd->Init.dma_enable = 0U;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681c      	ldr	r4, [r3, #0]
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	466b      	mov	r3, sp
 8001336:	001a      	movs	r2, r3
 8001338:	0003      	movs	r3, r0
 800133a:	3310      	adds	r3, #16
 800133c:	cb62      	ldmia	r3!, {r1, r5, r6}
 800133e:	c262      	stmia	r2!, {r1, r5, r6}
 8001340:	cb62      	ldmia	r3!, {r1, r5, r6}
 8001342:	c262      	stmia	r2!, {r1, r5, r6}
 8001344:	cb62      	ldmia	r3!, {r1, r5, r6}
 8001346:	c262      	stmia	r2!, {r1, r5, r6}
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	6841      	ldr	r1, [r0, #4]
 800134e:	6882      	ldr	r2, [r0, #8]
 8001350:	68c3      	ldr	r3, [r0, #12]
 8001352:	0020      	movs	r0, r4
 8001354:	f001 ff6f 	bl	8003236 <USB_CoreInit>

  /* Force Host Mode */
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	0018      	movs	r0, r3
 8001360:	f001 ff9e 	bl	80032a0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681c      	ldr	r4, [r3, #0]
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	466b      	mov	r3, sp
 800136c:	001a      	movs	r2, r3
 800136e:	0003      	movs	r3, r0
 8001370:	3310      	adds	r3, #16
 8001372:	cb62      	ldmia	r3!, {r1, r5, r6}
 8001374:	c262      	stmia	r2!, {r1, r5, r6}
 8001376:	cb62      	ldmia	r3!, {r1, r5, r6}
 8001378:	c262      	stmia	r2!, {r1, r5, r6}
 800137a:	cb62      	ldmia	r3!, {r1, r5, r6}
 800137c:	c262      	stmia	r2!, {r1, r5, r6}
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	6841      	ldr	r1, [r0, #4]
 8001384:	6882      	ldr	r2, [r0, #8]
 8001386:	68c3      	ldr	r3, [r0, #12]
 8001388:	0020      	movs	r0, r4
 800138a:	f001 ffa7 	bl	80032dc <USB_HostInit>

  /* Deactivate the power down */
  hhcd->Instance->CNTR  &= ~USB_CNTR_PDWN;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2102      	movs	r1, #2
 800139a:	438a      	bics	r2, r1
 800139c:	641a      	str	r2, [r3, #64]	; 0x40

  hhcd->State = HAL_HCD_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_HCD_Init+0xe4>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	5499      	strb	r1, [r3, r2]

  /* Host Port State */
  hhcd->HostState = HCD_HCD_STATE_DISCONNECTED;
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	23df      	movs	r3, #223	; 0xdf
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	2100      	movs	r1, #0
 80013ae:	54d1      	strb	r1, [r2, r3]

  /* Init PMA Address */
  (void)HAL_HCD_PMAReset(hhcd);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 f80e 	bl	80013d4 <HAL_HCD_PMAReset>

  hhcd->State = HAL_HCD_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_HCD_Init+0xe4>)
 80013bc:	2101      	movs	r1, #1
 80013be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b003      	add	sp, #12
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	0000037e 	.word	0x0000037e
 80013d0:	0000037d 	.word	0x0000037d

080013d4 <HAL_HCD_PMAReset>:
  * @brief  PMA Reset
  * @param  hhcd  Host instance
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HCD_PMAReset(HCD_HandleTypeDef *hhcd)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Reset All PMA Entry */
  for (uint8_t i = 0U; i < PMA_BLOCKS; i++)
 80013dc:	230f      	movs	r3, #15
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	e00e      	b.n	8001404 <HAL_HCD_PMAReset+0x30>
  {
    hhcd->PMALookupTable[i] = 0U;
 80013e6:	210f      	movs	r1, #15
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	33d6      	adds	r3, #214	; 0xd6
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	18d3      	adds	r3, r2, r3
 80013f4:	3304      	adds	r3, #4
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0U; i < PMA_BLOCKS; i++)
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	3201      	adds	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	230f      	movs	r3, #15
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b07      	cmp	r3, #7
 800140c:	d9eb      	bls.n	80013e6 <HAL_HCD_PMAReset+0x12>
  }

  /* Allocate a Space for buffer descriptor table depending on the Host channel number */
  for (uint8_t i = 0U; i < hhcd->Init.Host_channels; i++)
 800140e:	230e      	movs	r3, #14
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	e014      	b.n	8001442 <HAL_HCD_PMAReset+0x6e>
  {
    hhcd->PMALookupTable[0] |= ((uint32_t)1U << i);
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	23d7      	movs	r3, #215	; 0xd7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	58d2      	ldr	r2, [r2, r3]
 8001420:	200e      	movs	r0, #14
 8001422:	183b      	adds	r3, r7, r0
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2101      	movs	r1, #1
 8001428:	4099      	lsls	r1, r3
 800142a:	000b      	movs	r3, r1
 800142c:	431a      	orrs	r2, r3
 800142e:	0011      	movs	r1, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	23d7      	movs	r3, #215	; 0xd7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	50d1      	str	r1, [r2, r3]
  for (uint8_t i = 0U; i < hhcd->Init.Host_channels; i++)
 8001438:	183b      	adds	r3, r7, r0
 800143a:	781a      	ldrb	r2, [r3, #0]
 800143c:	183b      	adds	r3, r7, r0
 800143e:	3201      	adds	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	230e      	movs	r3, #14
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3e3      	bcc.n	8001418 <HAL_HCD_PMAReset+0x44>
  }

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b004      	add	sp, #16
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_PWREx_EnableVddUSB+0x18>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_PWREx_EnableVddUSB+0x18>)
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	00c9      	lsls	r1, r1, #3
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40007000 	.word	0x40007000

08001478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	429a      	cmp	r2, r3
 800149a:	d11f      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	0013      	movs	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	189b      	adds	r3, r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4912      	ldr	r1, [pc, #72]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f7fe fe2a 	bl	8000104 <__udivsi3>
 80014b0:	0003      	movs	r3, r0
 80014b2:	3301      	adds	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014b6:	e008      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e001      	b.n	80014ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e009      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	401a      	ands	r2, r3
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	429a      	cmp	r2, r3
 80014da:	d0ed      	beq.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	0018      	movs	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	b004      	add	sp, #16
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40007000 	.word	0x40007000
 80014ec:	fffff9ff 	.word	0xfffff9ff
 80014f0:	20000000 	.word	0x20000000
 80014f4:	000f4240 	.word	0x000f4240

080014f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <LL_RCC_GetAPB1Prescaler+0x14>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	23e0      	movs	r3, #224	; 0xe0
 8001502:	01db      	lsls	r3, r3, #7
 8001504:	4013      	ands	r3, r2
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	f000 fb50 	bl	8001bc4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	d100      	bne.n	8001530 <HAL_RCC_OscConfig+0x20>
 800152e:	e07c      	b.n	800162a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001530:	4bc3      	ldr	r3, [pc, #780]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2238      	movs	r2, #56	; 0x38
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800153a:	4bc1      	ldr	r3, [pc, #772]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2203      	movs	r2, #3
 8001540:	4013      	ands	r3, r2
 8001542:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2b10      	cmp	r3, #16
 8001548:	d102      	bne.n	8001550 <HAL_RCC_OscConfig+0x40>
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d002      	beq.n	8001556 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d10b      	bne.n	800156e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001556:	4bba      	ldr	r3, [pc, #744]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	029b      	lsls	r3, r3, #10
 800155e:	4013      	ands	r3, r2
 8001560:	d062      	beq.n	8001628 <HAL_RCC_OscConfig+0x118>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d15e      	bne.n	8001628 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e32a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	429a      	cmp	r2, r3
 8001578:	d107      	bne.n	800158a <HAL_RCC_OscConfig+0x7a>
 800157a:	4bb1      	ldr	r3, [pc, #708]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4bb0      	ldr	r3, [pc, #704]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0249      	lsls	r1, r1, #9
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e020      	b.n	80015cc <HAL_RCC_OscConfig+0xbc>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	23a0      	movs	r3, #160	; 0xa0
 8001590:	02db      	lsls	r3, r3, #11
 8001592:	429a      	cmp	r2, r3
 8001594:	d10e      	bne.n	80015b4 <HAL_RCC_OscConfig+0xa4>
 8001596:	4baa      	ldr	r3, [pc, #680]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4ba9      	ldr	r3, [pc, #676]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	02c9      	lsls	r1, r1, #11
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4ba6      	ldr	r3, [pc, #664]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4ba5      	ldr	r3, [pc, #660]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0249      	lsls	r1, r1, #9
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xbc>
 80015b4:	4ba2      	ldr	r3, [pc, #648]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4ba1      	ldr	r3, [pc, #644]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015ba:	49a2      	ldr	r1, [pc, #648]	; (8001844 <HAL_RCC_OscConfig+0x334>)
 80015bc:	400a      	ands	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4b9f      	ldr	r3, [pc, #636]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b9e      	ldr	r3, [pc, #632]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015c6:	49a0      	ldr	r1, [pc, #640]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d014      	beq.n	80015fe <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc06 	bl	8000de4 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015de:	f7ff fc01 	bl	8000de4 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	; 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e2e9      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015f0:	4b93      	ldr	r3, [pc, #588]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	029b      	lsls	r3, r3, #10
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0xce>
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fe:	f7ff fbf1 	bl	8000de4 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fbec 	bl	8000de4 <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e2d4      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800161a:	4b89      	ldr	r3, [pc, #548]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	029b      	lsls	r3, r3, #10
 8001622:	4013      	ands	r3, r2
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0xf8>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x126>
 8001634:	e099      	b.n	800176a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001636:	4b82      	ldr	r3, [pc, #520]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2238      	movs	r2, #56	; 0x38
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001640:	4b7f      	ldr	r3, [pc, #508]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2203      	movs	r2, #3
 8001646:	4013      	ands	r3, r2
 8001648:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b10      	cmp	r3, #16
 800164e:	d102      	bne.n	8001656 <HAL_RCC_OscConfig+0x146>
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d002      	beq.n	800165c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d135      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800165c:	4b78      	ldr	r3, [pc, #480]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4013      	ands	r3, r2
 8001666:	d005      	beq.n	8001674 <HAL_RCC_OscConfig+0x164>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e2a7      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b72      	ldr	r3, [pc, #456]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a74      	ldr	r2, [pc, #464]	; (800184c <HAL_RCC_OscConfig+0x33c>)
 800167a:	4013      	ands	r3, r2
 800167c:	0019      	movs	r1, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	021a      	lsls	r2, r3, #8
 8001684:	4b6e      	ldr	r3, [pc, #440]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001686:	430a      	orrs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d112      	bne.n	80016b6 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001690:	4b6b      	ldr	r3, [pc, #428]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6e      	ldr	r2, [pc, #440]	; (8001850 <HAL_RCC_OscConfig+0x340>)
 8001696:	4013      	ands	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	4b68      	ldr	r3, [pc, #416]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016a4:	4b66      	ldr	r3, [pc, #408]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0adb      	lsrs	r3, r3, #11
 80016aa:	2207      	movs	r2, #7
 80016ac:	4013      	ands	r3, r2
 80016ae:	4a69      	ldr	r2, [pc, #420]	; (8001854 <HAL_RCC_OscConfig+0x344>)
 80016b0:	40da      	lsrs	r2, r3
 80016b2:	4b69      	ldr	r3, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x348>)
 80016b4:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016b6:	4b69      	ldr	r3, [pc, #420]	; (800185c <HAL_RCC_OscConfig+0x34c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff fb36 	bl	8000d2c <HAL_InitTick>
 80016c0:	1e03      	subs	r3, r0, #0
 80016c2:	d051      	beq.n	8001768 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e27d      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d030      	beq.n	8001732 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016d0:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a5e      	ldr	r2, [pc, #376]	; (8001850 <HAL_RCC_OscConfig+0x340>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016e4:	4b56      	ldr	r3, [pc, #344]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0049      	lsls	r1, r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7ff fb77 	bl	8000de4 <HAL_GetTick>
 80016f6:	0003      	movs	r3, r0
 80016f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fb72 	bl	8000de4 <HAL_GetTick>
 8001700:	0002      	movs	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e25a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170e:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	4013      	ands	r3, r2
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b49      	ldr	r3, [pc, #292]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a4b      	ldr	r2, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x33c>)
 8001720:	4013      	ands	r3, r2
 8001722:	0019      	movs	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	021a      	lsls	r2, r3, #8
 800172a:	4b45      	ldr	r3, [pc, #276]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800172c:	430a      	orrs	r2, r1
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	e01b      	b.n	800176a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001732:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b42      	ldr	r3, [pc, #264]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001738:	4949      	ldr	r1, [pc, #292]	; (8001860 <HAL_RCC_OscConfig+0x350>)
 800173a:	400a      	ands	r2, r1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173e:	f7ff fb51 	bl	8000de4 <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff fb4c 	bl	8000de4 <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e234      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800175a:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4013      	ands	r3, r2
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x238>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001768:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2208      	movs	r2, #8
 8001770:	4013      	ands	r3, r2
 8001772:	d047      	beq.n	8001804 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001774:	4b32      	ldr	r3, [pc, #200]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2238      	movs	r2, #56	; 0x38
 800177a:	4013      	ands	r3, r2
 800177c:	2b18      	cmp	r3, #24
 800177e:	d10a      	bne.n	8001796 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001780:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d03c      	beq.n	8001804 <HAL_RCC_OscConfig+0x2f4>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d138      	bne.n	8001804 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e216      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800179e:	4b28      	ldr	r3, [pc, #160]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80017a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb1b 	bl	8000de4 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fb16 	bl	8000de4 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1fe      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c6:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f1      	beq.n	80017b4 <HAL_RCC_OscConfig+0x2a4>
 80017d0:	e018      	b.n	8001804 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80017d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80017d8:	2101      	movs	r1, #1
 80017da:	438a      	bics	r2, r1
 80017dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fb01 	bl	8000de4 <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fafc 	bl	8000de4 <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1e4      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d1f1      	bne.n	80017e8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d100      	bne.n	8001810 <HAL_RCC_OscConfig+0x300>
 800180e:	e0c7      	b.n	80019a0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001810:	231f      	movs	r3, #31
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2238      	movs	r2, #56	; 0x38
 800181e:	4013      	ands	r3, r2
 8001820:	2b20      	cmp	r3, #32
 8001822:	d11f      	bne.n	8001864 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x330>)
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d100      	bne.n	8001830 <HAL_RCC_OscConfig+0x320>
 800182e:	e0b7      	b.n	80019a0 <HAL_RCC_OscConfig+0x490>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d000      	beq.n	800183a <HAL_RCC_OscConfig+0x32a>
 8001838:	e0b2      	b.n	80019a0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1c2      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000
 8001844:	fffeffff 	.word	0xfffeffff
 8001848:	fffbffff 	.word	0xfffbffff
 800184c:	ffff80ff 	.word	0xffff80ff
 8001850:	ffffc7ff 	.word	0xffffc7ff
 8001854:	00f42400 	.word	0x00f42400
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004
 8001860:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001864:	4bb5      	ldr	r3, [pc, #724]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	055b      	lsls	r3, r3, #21
 800186c:	4013      	ands	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x364>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <HAL_RCC_OscConfig+0x366>
 8001874:	2300      	movs	r3, #0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d011      	beq.n	800189e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4bb0      	ldr	r3, [pc, #704]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 800187c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800187e:	4baf      	ldr	r3, [pc, #700]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0549      	lsls	r1, r1, #21
 8001884:	430a      	orrs	r2, r1
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
 8001888:	4bac      	ldr	r3, [pc, #688]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 800188a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	055b      	lsls	r3, r3, #21
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001896:	231f      	movs	r3, #31
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800189e:	4ba8      	ldr	r3, [pc, #672]	; (8001b40 <HAL_RCC_OscConfig+0x630>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	d11a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018aa:	4ba5      	ldr	r3, [pc, #660]	; (8001b40 <HAL_RCC_OscConfig+0x630>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4ba4      	ldr	r3, [pc, #656]	; (8001b40 <HAL_RCC_OscConfig+0x630>)
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	0049      	lsls	r1, r1, #1
 80018b4:	430a      	orrs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa94 	bl	8000de4 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c2:	f7ff fa8f 	bl	8000de4 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e177      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d4:	4b9a      	ldr	r3, [pc, #616]	; (8001b40 <HAL_RCC_OscConfig+0x630>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4013      	ands	r3, r2
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3e6>
 80018e8:	4b94      	ldr	r3, [pc, #592]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80018ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018ec:	4b93      	ldr	r3, [pc, #588]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80018f4:	e01c      	b.n	8001930 <HAL_RCC_OscConfig+0x420>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x408>
 80018fe:	4b8f      	ldr	r3, [pc, #572]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001902:	4b8e      	ldr	r3, [pc, #568]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001904:	2104      	movs	r1, #4
 8001906:	430a      	orrs	r2, r1
 8001908:	65da      	str	r2, [r3, #92]	; 0x5c
 800190a:	4b8c      	ldr	r3, [pc, #560]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 800190c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001910:	2101      	movs	r1, #1
 8001912:	430a      	orrs	r2, r1
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0x420>
 8001918:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 800191a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800191c:	4b87      	ldr	r3, [pc, #540]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	65da      	str	r2, [r3, #92]	; 0x5c
 8001924:	4b85      	ldr	r3, [pc, #532]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 800192a:	2104      	movs	r1, #4
 800192c:	438a      	bics	r2, r1
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d014      	beq.n	8001962 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fa54 	bl	8000de4 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff fa4f 	bl	8000de4 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a7d      	ldr	r2, [pc, #500]	; (8001b44 <HAL_RCC_OscConfig+0x634>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e136      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001956:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x432>
 8001960:	e013      	b.n	800198a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001962:	f7ff fa3f 	bl	8000de4 <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196a:	e009      	b.n	8001980 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196c:	f7ff fa3a 	bl	8000de4 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4a73      	ldr	r2, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x634>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e121      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001980:	4b6e      	ldr	r3, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	2202      	movs	r2, #2
 8001986:	4013      	ands	r3, r2
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800198a:	231f      	movs	r3, #31
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b69      	ldr	r3, [pc, #420]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001998:	4b68      	ldr	r3, [pc, #416]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 800199a:	496b      	ldr	r1, [pc, #428]	; (8001b48 <HAL_RCC_OscConfig+0x638>)
 800199c:	400a      	ands	r2, r1
 800199e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2220      	movs	r2, #32
 80019a6:	4013      	ands	r3, r2
 80019a8:	d039      	beq.n	8001a1e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01b      	beq.n	80019ea <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	03c9      	lsls	r1, r1, #15
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fa10 	bl	8000de4 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ca:	f7ff fa0b 	bl	8000de4 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0f3      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019dc:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	041b      	lsls	r3, r3, #16
 80019e4:	4013      	ands	r3, r2
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x4ba>
 80019e8:	e019      	b.n	8001a1e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ea:	4b54      	ldr	r3, [pc, #336]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 80019f0:	4956      	ldr	r1, [pc, #344]	; (8001b4c <HAL_RCC_OscConfig+0x63c>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff f9f5 	bl	8000de4 <HAL_GetTick>
 80019fa:	0003      	movs	r3, r0
 80019fc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a00:	f7ff f9f0 	bl	8000de4 <HAL_GetTick>
 8001a04:	0002      	movs	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e0d8      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d100      	bne.n	8001a28 <HAL_RCC_OscConfig+0x518>
 8001a26:	e0cc      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a28:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2238      	movs	r2, #56	; 0x38
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d100      	bne.n	8001a36 <HAL_RCC_OscConfig+0x526>
 8001a34:	e07b      	b.n	8001b2e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d156      	bne.n	8001aec <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001a44:	4942      	ldr	r1, [pc, #264]	; (8001b50 <HAL_RCC_OscConfig+0x640>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f9cb 	bl	8000de4 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f9c6 	bl	8000de4 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0ae      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <HAL_RCC_OscConfig+0x644>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0449      	lsls	r1, r1, #17
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	0549      	lsls	r1, r1, #21
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f98f 	bl	8000de4 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff f98a 	bl	8000de4 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e072      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	049b      	lsls	r3, r3, #18
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x5bc>
 8001aea:	e06a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001af2:	4917      	ldr	r1, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x640>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f974 	bl	8000de4 <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff f96f 	bl	8000de4 <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e057      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	049b      	lsls	r3, r3, #18
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_OscConfig+0x62c>)
 8001b26:	490c      	ldr	r1, [pc, #48]	; (8001b58 <HAL_RCC_OscConfig+0x648>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	e049      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d112      	bne.n	8001b5c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e044      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40007000 	.word	0x40007000
 8001b44:	00001388 	.word	0x00001388
 8001b48:	efffffff 	.word	0xefffffff
 8001b4c:	ffbfffff 	.word	0xffbfffff
 8001b50:	feffffff 	.word	0xfeffffff
 8001b54:	11c1808c 	.word	0x11c1808c
 8001b58:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_RCC_OscConfig+0x6bc>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2203      	movs	r2, #3
 8001b66:	401a      	ands	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d126      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2270      	movs	r2, #112	; 0x70
 8001b74:	401a      	ands	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d11f      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	23fe      	movs	r3, #254	; 0xfe
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d116      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	23f8      	movs	r3, #248	; 0xf8
 8001b94:	039b      	lsls	r3, r3, #14
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d10e      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	23e0      	movs	r3, #224	; 0xe0
 8001ba4:	051b      	lsls	r3, r3, #20
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	0f5b      	lsrs	r3, r3, #29
 8001bb4:	075a      	lsls	r2, r3, #29
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b008      	add	sp, #32
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0e9      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be4:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2207      	movs	r2, #7
 8001bea:	4013      	ands	r3, r2
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d91e      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2207      	movs	r2, #7
 8001bf8:	4393      	bics	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	4b70      	ldr	r3, [pc, #448]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f8ee 	bl	8000de4 <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c0c:	e009      	b.n	8001c22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0e:	f7ff f8e9 	bl	8000de4 <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4a6a      	ldr	r2, [pc, #424]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0ca      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c22:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2207      	movs	r2, #7
 8001c28:	4013      	ands	r3, r2
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d1ee      	bne.n	8001c0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d015      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d006      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c44:	4b60      	ldr	r3, [pc, #384]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4a:	21e0      	movs	r1, #224	; 0xe0
 8001c4c:	01c9      	lsls	r1, r1, #7
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	4a5d      	ldr	r2, [pc, #372]	; (8001dcc <HAL_RCC_ClockConfig+0x1fc>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	430a      	orrs	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d057      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	d12b      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e097      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c90:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	049b      	lsls	r3, r3, #18
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d11f      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e08b      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca8:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d113      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e07f      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc0:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d108      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e074      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e06d      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cdc:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	4393      	bics	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f878 	bl	8000de4 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf8:	e009      	b.n	8001d0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfa:	f7ff f873 	bl	8000de4 <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e054      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2238      	movs	r2, #56	; 0x38
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1ec      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b27      	ldr	r3, [pc, #156]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2207      	movs	r2, #7
 8001d26:	4013      	ands	r3, r2
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d21e      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2207      	movs	r2, #7
 8001d34:	4393      	bics	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d40:	f7ff f850 	bl	8000de4 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4a:	f7ff f84b 	bl	8000de4 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e02c      	b.n	8001db8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2207      	movs	r2, #7
 8001d64:	4013      	ands	r3, r2
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2204      	movs	r2, #4
 8001d72:	4013      	ands	r3, r2
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <HAL_RCC_ClockConfig+0x200>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d8a:	f000 f829 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	0001      	movs	r1, r0
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	220f      	movs	r2, #15
 8001d98:	401a      	ands	r2, r3
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_RCC_ClockConfig+0x204>)
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	58d3      	ldr	r3, [r2, r3]
 8001da0:	221f      	movs	r2, #31
 8001da2:	4013      	ands	r3, r2
 8001da4:	000a      	movs	r2, r1
 8001da6:	40da      	lsrs	r2, r3
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_ClockConfig+0x208>)
 8001daa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_ClockConfig+0x20c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7fe ffbb 	bl	8000d2c <HAL_InitTick>
 8001db6:	0003      	movs	r3, r0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b004      	add	sp, #16
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	00001388 	.word	0x00001388
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	fffff0ff 	.word	0xfffff0ff
 8001dd0:	ffff8fff 	.word	0xffff8fff
 8001dd4:	08003e68 	.word	0x08003e68
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de6:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2238      	movs	r2, #56	; 0x38
 8001dec:	4013      	ands	r3, r2
 8001dee:	d10f      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001df0:	4b39      	ldr	r3, [pc, #228]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	0adb      	lsrs	r3, r3, #11
 8001df6:	2207      	movs	r2, #7
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	0013      	movs	r3, r2
 8001e00:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e02:	6839      	ldr	r1, [r7, #0]
 8001e04:	4835      	ldr	r0, [pc, #212]	; (8001edc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e06:	f7fe f97d 	bl	8000104 <__udivsi3>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	e05d      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e10:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2238      	movs	r2, #56	; 0x38
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	e054      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e22:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2238      	movs	r2, #56	; 0x38
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d138      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2203      	movs	r2, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e38:	4b27      	ldr	r3, [pc, #156]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	3301      	adds	r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d10d      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4824      	ldr	r0, [pc, #144]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e50:	f7fe f958 	bl	8000104 <__udivsi3>
 8001e54:	0003      	movs	r3, r0
 8001e56:	0019      	movs	r1, r3
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	227f      	movs	r2, #127	; 0x7f
 8001e60:	4013      	ands	r3, r2
 8001e62:	434b      	muls	r3, r1
 8001e64:	617b      	str	r3, [r7, #20]
        break;
 8001e66:	e00d      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	481c      	ldr	r0, [pc, #112]	; (8001edc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e6c:	f7fe f94a 	bl	8000104 <__udivsi3>
 8001e70:	0003      	movs	r3, r0
 8001e72:	0019      	movs	r1, r3
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	227f      	movs	r2, #127	; 0x7f
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	434b      	muls	r3, r1
 8001e80:	617b      	str	r3, [r7, #20]
        break;
 8001e82:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0f5b      	lsrs	r3, r3, #29
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	3301      	adds	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	6978      	ldr	r0, [r7, #20]
 8001e96:	f7fe f935 	bl	8000104 <__udivsi3>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	e015      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2238      	movs	r2, #56	; 0x38
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	d103      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	021b      	lsls	r3, r3, #8
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2238      	movs	r2, #56	; 0x38
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b18      	cmp	r3, #24
 8001ebe:	d103      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ec0:	23fa      	movs	r3, #250	; 0xfa
 8001ec2:	01db      	lsls	r3, r3, #7
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	e001      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ecc:	693b      	ldr	r3, [r7, #16]
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b006      	add	sp, #24
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	00f42400 	.word	0x00f42400
 8001ee0:	007a1200 	.word	0x007a1200

08001ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001efc:	f7ff fff2 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f00:	0004      	movs	r4, r0
 8001f02:	f7ff faf9 	bl	80014f8 <LL_RCC_GetAPB1Prescaler>
 8001f06:	0003      	movs	r3, r0
 8001f08:	0b1a      	lsrs	r2, r3, #12
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	58d3      	ldr	r3, [r2, r3]
 8001f10:	221f      	movs	r2, #31
 8001f12:	4013      	ands	r3, r2
 8001f14:	40dc      	lsrs	r4, r3
 8001f16:	0023      	movs	r3, r4
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	08003ea8 	.word	0x08003ea8

08001f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f2c:	2313      	movs	r3, #19
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f34:	2312      	movs	r3, #18
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	4013      	ands	r3, r2
 8001f46:	d100      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f48:	e0ad      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2011      	movs	r0, #17
 8001f4c:	183b      	adds	r3, r7, r0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	055b      	lsls	r3, r3, #21
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d110      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b44      	ldr	r3, [pc, #272]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f62:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	0549      	lsls	r1, r1, #21
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f6c:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	055b      	lsls	r3, r3, #21
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7a:	183b      	adds	r3, r7, r0
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f80:	4b3c      	ldr	r3, [pc, #240]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	0049      	lsls	r1, r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f8e:	f7fe ff29 	bl	8000de4 <HAL_GetTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f98:	f7fe ff24 	bl	8000de4 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d904      	bls.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fa6:	2313      	movs	r3, #19
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2203      	movs	r2, #3
 8001fac:	701a      	strb	r2, [r3, #0]
        break;
 8001fae:	e005      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fb0:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0ed      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001fbc:	2313      	movs	r3, #19
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d15e      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fca:	23c0      	movs	r3, #192	; 0xc0
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d019      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d014      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fe2:	4b23      	ldr	r3, [pc, #140]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	0249      	lsls	r1, r1, #9
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ffc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002000:	491e      	ldr	r1, [pc, #120]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002002:	400a      	ands	r2, r1
 8002004:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2201      	movs	r2, #1
 8002010:	4013      	ands	r3, r2
 8002012:	d016      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7fe fee6 	bl	8000de4 <HAL_GetTick>
 8002018:	0003      	movs	r3, r0
 800201a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800201c:	e00c      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7fe fee1 	bl	8000de4 <HAL_GetTick>
 8002022:	0002      	movs	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	4a15      	ldr	r2, [pc, #84]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d904      	bls.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800202e:	2313      	movs	r3, #19
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2203      	movs	r2, #3
 8002034:	701a      	strb	r2, [r3, #0]
            break;
 8002036:	e004      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2202      	movs	r2, #2
 800203e:	4013      	ands	r3, r2
 8002040:	d0ed      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002042:	2313      	movs	r3, #19
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002052:	4013      	ands	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800205c:	430a      	orrs	r2, r1
 800205e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002060:	e016      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002062:	2312      	movs	r3, #18
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2213      	movs	r2, #19
 8002068:	18ba      	adds	r2, r7, r2
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e00f      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002070:	40021000 	.word	0x40021000
 8002074:	40007000 	.word	0x40007000
 8002078:	fffffcff 	.word	0xfffffcff
 800207c:	fffeffff 	.word	0xfffeffff
 8002080:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002084:	2312      	movs	r3, #18
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2213      	movs	r2, #19
 800208a:	18ba      	adds	r2, r7, r2
 800208c:	7812      	ldrb	r2, [r2, #0]
 800208e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002090:	2311      	movs	r3, #17
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4bb6      	ldr	r3, [pc, #728]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800209c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800209e:	4bb5      	ldr	r3, [pc, #724]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020a0:	49b5      	ldr	r1, [pc, #724]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2201      	movs	r2, #1
 80020ac:	4013      	ands	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b0:	4bb0      	ldr	r3, [pc, #704]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	2203      	movs	r2, #3
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4bad      	ldr	r3, [pc, #692]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020c0:	430a      	orrs	r2, r1
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020ce:	4ba9      	ldr	r3, [pc, #676]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	220c      	movs	r2, #12
 80020d4:	4393      	bics	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4ba5      	ldr	r3, [pc, #660]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2204      	movs	r2, #4
 80020e8:	4013      	ands	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ec:	4ba1      	ldr	r3, [pc, #644]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	2230      	movs	r2, #48	; 0x30
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4b9e      	ldr	r3, [pc, #632]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2210      	movs	r2, #16
 8002106:	4013      	ands	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800210a:	4b9a      	ldr	r3, [pc, #616]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	4a9b      	ldr	r2, [pc, #620]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	4b96      	ldr	r3, [pc, #600]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800211a:	430a      	orrs	r2, r1
 800211c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	4013      	ands	r3, r2
 8002128:	d009      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800212a:	4b92      	ldr	r3, [pc, #584]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	4a94      	ldr	r2, [pc, #592]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	4b8e      	ldr	r3, [pc, #568]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800213a:	430a      	orrs	r2, r1
 800213c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	; 0x80
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d009      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800214a:	4b8a      	ldr	r3, [pc, #552]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	4a8d      	ldr	r2, [pc, #564]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002158:	4b86      	ldr	r3, [pc, #536]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800215a:	430a      	orrs	r2, r1
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4013      	ands	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800216a:	4b82      	ldr	r3, [pc, #520]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	4a86      	ldr	r2, [pc, #536]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002170:	4013      	ands	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002178:	4b7e      	ldr	r3, [pc, #504]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800217a:	430a      	orrs	r2, r1
 800217c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2220      	movs	r2, #32
 8002184:	4013      	ands	r3, r2
 8002186:	d009      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002188:	4b7a      	ldr	r3, [pc, #488]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	4a7f      	ldr	r2, [pc, #508]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	4b77      	ldr	r3, [pc, #476]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002198:	430a      	orrs	r2, r1
 800219a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	4013      	ands	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a6:	4b73      	ldr	r3, [pc, #460]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	4a79      	ldr	r2, [pc, #484]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021b6:	430a      	orrs	r2, r1
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	4013      	ands	r3, r2
 80021c4:	d015      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c6:	4b6b      	ldr	r3, [pc, #428]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	0899      	lsrs	r1, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d2:	4b68      	ldr	r3, [pc, #416]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	05db      	lsls	r3, r3, #23
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d106      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021e4:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	4b62      	ldr	r3, [pc, #392]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	0249      	lsls	r1, r1, #9
 80021ee:	430a      	orrs	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	031b      	lsls	r3, r3, #12
 80021fa:	4013      	ands	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800220c:	4b59      	ldr	r3, [pc, #356]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800220e:	430a      	orrs	r2, r1
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	039b      	lsls	r3, r3, #14
 800221a:	4013      	ands	r3, r2
 800221c:	d016      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800221e:	4b55      	ldr	r3, [pc, #340]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002224:	4013      	ands	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800222c:	4b51      	ldr	r3, [pc, #324]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800222e:	430a      	orrs	r2, r1
 8002230:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	03db      	lsls	r3, r3, #15
 800223a:	429a      	cmp	r2, r3
 800223c:	d106      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800223e:	4b4d      	ldr	r3, [pc, #308]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	0449      	lsls	r1, r1, #17
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2380      	movs	r3, #128	; 0x80
 8002252:	03db      	lsls	r3, r3, #15
 8002254:	4013      	ands	r3, r2
 8002256:	d016      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	4a4e      	ldr	r2, [pc, #312]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002268:	430a      	orrs	r2, r1
 800226a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	045b      	lsls	r3, r3, #17
 8002274:	429a      	cmp	r2, r3
 8002276:	d106      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002278:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0449      	lsls	r1, r1, #17
 8002282:	430a      	orrs	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	4013      	ands	r3, r2
 8002290:	d014      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002292:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	2203      	movs	r2, #3
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0249      	lsls	r1, r1, #9
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	019b      	lsls	r3, r3, #6
 80022c4:	4013      	ands	r3, r2
 80022c6:	d014      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	220c      	movs	r2, #12
 80022ce:	4393      	bics	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d106      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0249      	lsls	r1, r1, #9
 80022ee:	430a      	orrs	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	045b      	lsls	r3, r3, #17
 80022fa:	4013      	ands	r3, r2
 80022fc:	d016      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	4a22      	ldr	r2, [pc, #136]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002304:	4013      	ands	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800230e:	430a      	orrs	r2, r1
 8002310:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	019b      	lsls	r3, r3, #6
 800231a:	429a      	cmp	r2, r3
 800231c:	d106      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	0449      	lsls	r1, r1, #17
 8002328:	430a      	orrs	r2, r1
 800232a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	049b      	lsls	r3, r3, #18
 8002334:	4013      	ands	r3, r2
 8002336:	d016      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	4a10      	ldr	r2, [pc, #64]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002348:	430a      	orrs	r2, r1
 800234a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	429a      	cmp	r2, r3
 8002356:	d106      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800235e:	2180      	movs	r1, #128	; 0x80
 8002360:	0449      	lsls	r1, r1, #17
 8002362:	430a      	orrs	r2, r1
 8002364:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002366:	2312      	movs	r3, #18
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	781b      	ldrb	r3, [r3, #0]
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b006      	add	sp, #24
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	efffffff 	.word	0xefffffff
 800237c:	fffff3ff 	.word	0xfffff3ff
 8002380:	fffffcff 	.word	0xfffffcff
 8002384:	fff3ffff 	.word	0xfff3ffff
 8002388:	ffcfffff 	.word	0xffcfffff
 800238c:	ffffcfff 	.word	0xffffcfff
 8002390:	ffff3fff 	.word	0xffff3fff
 8002394:	ffbfffff 	.word	0xffbfffff
 8002398:	feffffff 	.word	0xfeffffff

0800239c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e046      	b.n	800243c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2284      	movs	r2, #132	; 0x84
 80023b2:	589b      	ldr	r3, [r3, r2]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d107      	bne.n	80023c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7fe fae6 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2284      	movs	r2, #132	; 0x84
 80023cc:	2124      	movs	r1, #36	; 0x24
 80023ce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	438a      	bics	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 f8dc 	bl	80025a0 <UART_SetConfig>
 80023e8:	0003      	movs	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e024      	b.n	800243c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 fc25 	bl	8002c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	490d      	ldr	r1, [pc, #52]	; (8002444 <HAL_UART_Init+0xa8>)
 800240e:	400a      	ands	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	212a      	movs	r1, #42	; 0x2a
 800241e:	438a      	bics	r2, r1
 8002420:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f000 fcbd 	bl	8002db4 <UART_CheckIdleState>
 800243a:	0003      	movs	r3, r0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}
 8002444:	ffffb7ff 	.word	0xffffb7ff

08002448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	1dbb      	adds	r3, r7, #6
 8002456:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2284      	movs	r2, #132	; 0x84
 800245c:	589b      	ldr	r3, [r3, r2]
 800245e:	2b20      	cmp	r3, #32
 8002460:	d000      	beq.n	8002464 <HAL_UART_Transmit+0x1c>
 8002462:	e097      	b.n	8002594 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_UART_Transmit+0x2a>
 800246a:	1dbb      	adds	r3, r7, #6
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e08f      	b.n	8002596 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	015b      	lsls	r3, r3, #5
 800247e:	429a      	cmp	r2, r3
 8002480:	d109      	bne.n	8002496 <HAL_UART_Transmit+0x4e>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2201      	movs	r2, #1
 800248e:	4013      	ands	r3, r2
 8002490:	d001      	beq.n	8002496 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e07f      	b.n	8002596 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	5c9b      	ldrb	r3, [r3, r2]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_UART_Transmit+0x5c>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e078      	b.n	8002596 <HAL_UART_Transmit+0x14e>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	2101      	movs	r1, #1
 80024aa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	228c      	movs	r2, #140	; 0x8c
 80024b0:	2100      	movs	r1, #0
 80024b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2284      	movs	r2, #132	; 0x84
 80024b8:	2121      	movs	r1, #33	; 0x21
 80024ba:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024bc:	f7fe fc92 	bl	8000de4 <HAL_GetTick>
 80024c0:	0003      	movs	r3, r0
 80024c2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1dba      	adds	r2, r7, #6
 80024c8:	2154      	movs	r1, #84	; 0x54
 80024ca:	8812      	ldrh	r2, [r2, #0]
 80024cc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1dba      	adds	r2, r7, #6
 80024d2:	2156      	movs	r1, #86	; 0x56
 80024d4:	8812      	ldrh	r2, [r2, #0]
 80024d6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	015b      	lsls	r3, r3, #5
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d108      	bne.n	80024f6 <HAL_UART_Transmit+0xae>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d104      	bne.n	80024f6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e003      	b.n	80024fe <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002506:	e02c      	b.n	8002562 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	0013      	movs	r3, r2
 8002512:	2200      	movs	r2, #0
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	f000 fc97 	bl	8002e48 <UART_WaitOnFlagUntilTimeout>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d001      	beq.n	8002522 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e039      	b.n	8002596 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	001a      	movs	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	05d2      	lsls	r2, r2, #23
 8002534:	0dd2      	lsrs	r2, r2, #23
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	3302      	adds	r3, #2
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e007      	b.n	8002550 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2256      	movs	r2, #86	; 0x56
 8002554:	5a9b      	ldrh	r3, [r3, r2]
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	b299      	uxth	r1, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2256      	movs	r2, #86	; 0x56
 8002560:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2256      	movs	r2, #86	; 0x56
 8002566:	5a9b      	ldrh	r3, [r3, r2]
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1cc      	bne.n	8002508 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	0013      	movs	r3, r2
 8002578:	2200      	movs	r2, #0
 800257a:	2140      	movs	r1, #64	; 0x40
 800257c:	f000 fc64 	bl	8002e48 <UART_WaitOnFlagUntilTimeout>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d001      	beq.n	8002588 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e006      	b.n	8002596 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2284      	movs	r2, #132	; 0x84
 800258c:	2120      	movs	r1, #32
 800258e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
  }
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b008      	add	sp, #32
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b090      	sub	sp, #64	; 0x40
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025a8:	231a      	movs	r3, #26
 80025aa:	2220      	movs	r2, #32
 80025ac:	189b      	adds	r3, r3, r2
 80025ae:	19db      	adds	r3, r3, r7
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	431a      	orrs	r2, r3
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4ac1      	ldr	r2, [pc, #772]	; (80028d8 <UART_SetConfig+0x338>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025de:	430b      	orrs	r3, r1
 80025e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4abc      	ldr	r2, [pc, #752]	; (80028dc <UART_SetConfig+0x33c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	68d9      	ldr	r1, [r3, #12]
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	0003      	movs	r3, r0
 80025f8:	430b      	orrs	r3, r1
 80025fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4ab6      	ldr	r2, [pc, #728]	; (80028e0 <UART_SetConfig+0x340>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d009      	beq.n	8002620 <UART_SetConfig+0x80>
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4ab4      	ldr	r2, [pc, #720]	; (80028e4 <UART_SetConfig+0x344>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800261c:	4313      	orrs	r3, r2
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4ab0      	ldr	r2, [pc, #704]	; (80028e8 <UART_SetConfig+0x348>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002632:	430b      	orrs	r3, r1
 8002634:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	220f      	movs	r2, #15
 800263e:	4393      	bics	r3, r2
 8002640:	0018      	movs	r0, r3
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	0003      	movs	r3, r0
 800264c:	430b      	orrs	r3, r1
 800264e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4aa5      	ldr	r2, [pc, #660]	; (80028ec <UART_SetConfig+0x34c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d131      	bne.n	80026be <UART_SetConfig+0x11e>
 800265a:	4ba5      	ldr	r3, [pc, #660]	; (80028f0 <UART_SetConfig+0x350>)
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	2203      	movs	r2, #3
 8002660:	4013      	ands	r3, r2
 8002662:	2b03      	cmp	r3, #3
 8002664:	d01d      	beq.n	80026a2 <UART_SetConfig+0x102>
 8002666:	d823      	bhi.n	80026b0 <UART_SetConfig+0x110>
 8002668:	2b02      	cmp	r3, #2
 800266a:	d00c      	beq.n	8002686 <UART_SetConfig+0xe6>
 800266c:	d820      	bhi.n	80026b0 <UART_SetConfig+0x110>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <UART_SetConfig+0xd8>
 8002672:	2b01      	cmp	r3, #1
 8002674:	d00e      	beq.n	8002694 <UART_SetConfig+0xf4>
 8002676:	e01b      	b.n	80026b0 <UART_SetConfig+0x110>
 8002678:	231b      	movs	r3, #27
 800267a:	2220      	movs	r2, #32
 800267c:	189b      	adds	r3, r3, r2
 800267e:	19db      	adds	r3, r3, r7
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	e154      	b.n	8002930 <UART_SetConfig+0x390>
 8002686:	231b      	movs	r3, #27
 8002688:	2220      	movs	r2, #32
 800268a:	189b      	adds	r3, r3, r2
 800268c:	19db      	adds	r3, r3, r7
 800268e:	2202      	movs	r2, #2
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e14d      	b.n	8002930 <UART_SetConfig+0x390>
 8002694:	231b      	movs	r3, #27
 8002696:	2220      	movs	r2, #32
 8002698:	189b      	adds	r3, r3, r2
 800269a:	19db      	adds	r3, r3, r7
 800269c:	2204      	movs	r2, #4
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e146      	b.n	8002930 <UART_SetConfig+0x390>
 80026a2:	231b      	movs	r3, #27
 80026a4:	2220      	movs	r2, #32
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	19db      	adds	r3, r3, r7
 80026aa:	2208      	movs	r2, #8
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	e13f      	b.n	8002930 <UART_SetConfig+0x390>
 80026b0:	231b      	movs	r3, #27
 80026b2:	2220      	movs	r2, #32
 80026b4:	189b      	adds	r3, r3, r2
 80026b6:	19db      	adds	r3, r3, r7
 80026b8:	2210      	movs	r2, #16
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e138      	b.n	8002930 <UART_SetConfig+0x390>
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a8c      	ldr	r2, [pc, #560]	; (80028f4 <UART_SetConfig+0x354>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d131      	bne.n	800272c <UART_SetConfig+0x18c>
 80026c8:	4b89      	ldr	r3, [pc, #548]	; (80028f0 <UART_SetConfig+0x350>)
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	220c      	movs	r2, #12
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d01d      	beq.n	8002710 <UART_SetConfig+0x170>
 80026d4:	d823      	bhi.n	800271e <UART_SetConfig+0x17e>
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d00c      	beq.n	80026f4 <UART_SetConfig+0x154>
 80026da:	d820      	bhi.n	800271e <UART_SetConfig+0x17e>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <UART_SetConfig+0x146>
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d00e      	beq.n	8002702 <UART_SetConfig+0x162>
 80026e4:	e01b      	b.n	800271e <UART_SetConfig+0x17e>
 80026e6:	231b      	movs	r3, #27
 80026e8:	2220      	movs	r2, #32
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	19db      	adds	r3, r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e11d      	b.n	8002930 <UART_SetConfig+0x390>
 80026f4:	231b      	movs	r3, #27
 80026f6:	2220      	movs	r2, #32
 80026f8:	189b      	adds	r3, r3, r2
 80026fa:	19db      	adds	r3, r3, r7
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e116      	b.n	8002930 <UART_SetConfig+0x390>
 8002702:	231b      	movs	r3, #27
 8002704:	2220      	movs	r2, #32
 8002706:	189b      	adds	r3, r3, r2
 8002708:	19db      	adds	r3, r3, r7
 800270a:	2204      	movs	r2, #4
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e10f      	b.n	8002930 <UART_SetConfig+0x390>
 8002710:	231b      	movs	r3, #27
 8002712:	2220      	movs	r2, #32
 8002714:	189b      	adds	r3, r3, r2
 8002716:	19db      	adds	r3, r3, r7
 8002718:	2208      	movs	r2, #8
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e108      	b.n	8002930 <UART_SetConfig+0x390>
 800271e:	231b      	movs	r3, #27
 8002720:	2220      	movs	r2, #32
 8002722:	189b      	adds	r3, r3, r2
 8002724:	19db      	adds	r3, r3, r7
 8002726:	2210      	movs	r2, #16
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e101      	b.n	8002930 <UART_SetConfig+0x390>
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a71      	ldr	r2, [pc, #452]	; (80028f8 <UART_SetConfig+0x358>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d131      	bne.n	800279a <UART_SetConfig+0x1fa>
 8002736:	4b6e      	ldr	r3, [pc, #440]	; (80028f0 <UART_SetConfig+0x350>)
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	2230      	movs	r2, #48	; 0x30
 800273c:	4013      	ands	r3, r2
 800273e:	2b30      	cmp	r3, #48	; 0x30
 8002740:	d01d      	beq.n	800277e <UART_SetConfig+0x1de>
 8002742:	d823      	bhi.n	800278c <UART_SetConfig+0x1ec>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d00c      	beq.n	8002762 <UART_SetConfig+0x1c2>
 8002748:	d820      	bhi.n	800278c <UART_SetConfig+0x1ec>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <UART_SetConfig+0x1b4>
 800274e:	2b10      	cmp	r3, #16
 8002750:	d00e      	beq.n	8002770 <UART_SetConfig+0x1d0>
 8002752:	e01b      	b.n	800278c <UART_SetConfig+0x1ec>
 8002754:	231b      	movs	r3, #27
 8002756:	2220      	movs	r2, #32
 8002758:	189b      	adds	r3, r3, r2
 800275a:	19db      	adds	r3, r3, r7
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e0e6      	b.n	8002930 <UART_SetConfig+0x390>
 8002762:	231b      	movs	r3, #27
 8002764:	2220      	movs	r2, #32
 8002766:	189b      	adds	r3, r3, r2
 8002768:	19db      	adds	r3, r3, r7
 800276a:	2202      	movs	r2, #2
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e0df      	b.n	8002930 <UART_SetConfig+0x390>
 8002770:	231b      	movs	r3, #27
 8002772:	2220      	movs	r2, #32
 8002774:	189b      	adds	r3, r3, r2
 8002776:	19db      	adds	r3, r3, r7
 8002778:	2204      	movs	r2, #4
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e0d8      	b.n	8002930 <UART_SetConfig+0x390>
 800277e:	231b      	movs	r3, #27
 8002780:	2220      	movs	r2, #32
 8002782:	189b      	adds	r3, r3, r2
 8002784:	19db      	adds	r3, r3, r7
 8002786:	2208      	movs	r2, #8
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e0d1      	b.n	8002930 <UART_SetConfig+0x390>
 800278c:	231b      	movs	r3, #27
 800278e:	2220      	movs	r2, #32
 8002790:	189b      	adds	r3, r3, r2
 8002792:	19db      	adds	r3, r3, r7
 8002794:	2210      	movs	r2, #16
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	e0ca      	b.n	8002930 <UART_SetConfig+0x390>
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a57      	ldr	r2, [pc, #348]	; (80028fc <UART_SetConfig+0x35c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d106      	bne.n	80027b2 <UART_SetConfig+0x212>
 80027a4:	231b      	movs	r3, #27
 80027a6:	2220      	movs	r2, #32
 80027a8:	189b      	adds	r3, r3, r2
 80027aa:	19db      	adds	r3, r3, r7
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	e0be      	b.n	8002930 <UART_SetConfig+0x390>
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a52      	ldr	r2, [pc, #328]	; (8002900 <UART_SetConfig+0x360>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d106      	bne.n	80027ca <UART_SetConfig+0x22a>
 80027bc:	231b      	movs	r3, #27
 80027be:	2220      	movs	r2, #32
 80027c0:	189b      	adds	r3, r3, r2
 80027c2:	19db      	adds	r3, r3, r7
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	e0b2      	b.n	8002930 <UART_SetConfig+0x390>
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a4d      	ldr	r2, [pc, #308]	; (8002904 <UART_SetConfig+0x364>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d106      	bne.n	80027e2 <UART_SetConfig+0x242>
 80027d4:	231b      	movs	r3, #27
 80027d6:	2220      	movs	r2, #32
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	19db      	adds	r3, r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e0a6      	b.n	8002930 <UART_SetConfig+0x390>
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a3e      	ldr	r2, [pc, #248]	; (80028e0 <UART_SetConfig+0x340>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d13e      	bne.n	800286a <UART_SetConfig+0x2ca>
 80027ec:	4b40      	ldr	r3, [pc, #256]	; (80028f0 <UART_SetConfig+0x350>)
 80027ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027f0:	23c0      	movs	r3, #192	; 0xc0
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	22c0      	movs	r2, #192	; 0xc0
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d027      	beq.n	800284e <UART_SetConfig+0x2ae>
 80027fe:	22c0      	movs	r2, #192	; 0xc0
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	4293      	cmp	r3, r2
 8002804:	d82a      	bhi.n	800285c <UART_SetConfig+0x2bc>
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	0112      	lsls	r2, r2, #4
 800280a:	4293      	cmp	r3, r2
 800280c:	d011      	beq.n	8002832 <UART_SetConfig+0x292>
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	4293      	cmp	r3, r2
 8002814:	d822      	bhi.n	800285c <UART_SetConfig+0x2bc>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d004      	beq.n	8002824 <UART_SetConfig+0x284>
 800281a:	2280      	movs	r2, #128	; 0x80
 800281c:	00d2      	lsls	r2, r2, #3
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <UART_SetConfig+0x2a0>
 8002822:	e01b      	b.n	800285c <UART_SetConfig+0x2bc>
 8002824:	231b      	movs	r3, #27
 8002826:	2220      	movs	r2, #32
 8002828:	189b      	adds	r3, r3, r2
 800282a:	19db      	adds	r3, r3, r7
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e07e      	b.n	8002930 <UART_SetConfig+0x390>
 8002832:	231b      	movs	r3, #27
 8002834:	2220      	movs	r2, #32
 8002836:	189b      	adds	r3, r3, r2
 8002838:	19db      	adds	r3, r3, r7
 800283a:	2202      	movs	r2, #2
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e077      	b.n	8002930 <UART_SetConfig+0x390>
 8002840:	231b      	movs	r3, #27
 8002842:	2220      	movs	r2, #32
 8002844:	189b      	adds	r3, r3, r2
 8002846:	19db      	adds	r3, r3, r7
 8002848:	2204      	movs	r2, #4
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	e070      	b.n	8002930 <UART_SetConfig+0x390>
 800284e:	231b      	movs	r3, #27
 8002850:	2220      	movs	r2, #32
 8002852:	189b      	adds	r3, r3, r2
 8002854:	19db      	adds	r3, r3, r7
 8002856:	2208      	movs	r2, #8
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e069      	b.n	8002930 <UART_SetConfig+0x390>
 800285c:	231b      	movs	r3, #27
 800285e:	2220      	movs	r2, #32
 8002860:	189b      	adds	r3, r3, r2
 8002862:	19db      	adds	r3, r3, r7
 8002864:	2210      	movs	r2, #16
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e062      	b.n	8002930 <UART_SetConfig+0x390>
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <UART_SetConfig+0x344>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d157      	bne.n	8002924 <UART_SetConfig+0x384>
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <UART_SetConfig+0x350>)
 8002876:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002878:	23c0      	movs	r3, #192	; 0xc0
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4013      	ands	r3, r2
 800287e:	22c0      	movs	r2, #192	; 0xc0
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	4293      	cmp	r3, r2
 8002884:	d040      	beq.n	8002908 <UART_SetConfig+0x368>
 8002886:	22c0      	movs	r2, #192	; 0xc0
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	4293      	cmp	r3, r2
 800288c:	d843      	bhi.n	8002916 <UART_SetConfig+0x376>
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	0092      	lsls	r2, r2, #2
 8002892:	4293      	cmp	r3, r2
 8002894:	d011      	beq.n	80028ba <UART_SetConfig+0x31a>
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	0092      	lsls	r2, r2, #2
 800289a:	4293      	cmp	r3, r2
 800289c:	d83b      	bhi.n	8002916 <UART_SetConfig+0x376>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <UART_SetConfig+0x30c>
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	0052      	lsls	r2, r2, #1
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <UART_SetConfig+0x328>
 80028aa:	e034      	b.n	8002916 <UART_SetConfig+0x376>
 80028ac:	231b      	movs	r3, #27
 80028ae:	2220      	movs	r2, #32
 80028b0:	189b      	adds	r3, r3, r2
 80028b2:	19db      	adds	r3, r3, r7
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e03a      	b.n	8002930 <UART_SetConfig+0x390>
 80028ba:	231b      	movs	r3, #27
 80028bc:	2220      	movs	r2, #32
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	19db      	adds	r3, r3, r7
 80028c2:	2202      	movs	r2, #2
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e033      	b.n	8002930 <UART_SetConfig+0x390>
 80028c8:	231b      	movs	r3, #27
 80028ca:	2220      	movs	r2, #32
 80028cc:	189b      	adds	r3, r3, r2
 80028ce:	19db      	adds	r3, r3, r7
 80028d0:	2204      	movs	r2, #4
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	e02c      	b.n	8002930 <UART_SetConfig+0x390>
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	cfff69f3 	.word	0xcfff69f3
 80028dc:	ffffcfff 	.word	0xffffcfff
 80028e0:	40008000 	.word	0x40008000
 80028e4:	40008400 	.word	0x40008400
 80028e8:	11fff4ff 	.word	0x11fff4ff
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40004800 	.word	0x40004800
 80028fc:	40004c00 	.word	0x40004c00
 8002900:	40005000 	.word	0x40005000
 8002904:	40013c00 	.word	0x40013c00
 8002908:	231b      	movs	r3, #27
 800290a:	2220      	movs	r2, #32
 800290c:	189b      	adds	r3, r3, r2
 800290e:	19db      	adds	r3, r3, r7
 8002910:	2208      	movs	r2, #8
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e00c      	b.n	8002930 <UART_SetConfig+0x390>
 8002916:	231b      	movs	r3, #27
 8002918:	2220      	movs	r2, #32
 800291a:	189b      	adds	r3, r3, r2
 800291c:	19db      	adds	r3, r3, r7
 800291e:	2210      	movs	r2, #16
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	e005      	b.n	8002930 <UART_SetConfig+0x390>
 8002924:	231b      	movs	r3, #27
 8002926:	2220      	movs	r2, #32
 8002928:	189b      	adds	r3, r3, r2
 800292a:	19db      	adds	r3, r3, r7
 800292c:	2210      	movs	r2, #16
 800292e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4ac1      	ldr	r2, [pc, #772]	; (8002c3c <UART_SetConfig+0x69c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d005      	beq.n	8002946 <UART_SetConfig+0x3a6>
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4ac0      	ldr	r2, [pc, #768]	; (8002c40 <UART_SetConfig+0x6a0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d000      	beq.n	8002946 <UART_SetConfig+0x3a6>
 8002944:	e093      	b.n	8002a6e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002946:	231b      	movs	r3, #27
 8002948:	2220      	movs	r2, #32
 800294a:	189b      	adds	r3, r3, r2
 800294c:	19db      	adds	r3, r3, r7
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d015      	beq.n	8002980 <UART_SetConfig+0x3e0>
 8002954:	dc18      	bgt.n	8002988 <UART_SetConfig+0x3e8>
 8002956:	2b04      	cmp	r3, #4
 8002958:	d00d      	beq.n	8002976 <UART_SetConfig+0x3d6>
 800295a:	dc15      	bgt.n	8002988 <UART_SetConfig+0x3e8>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <UART_SetConfig+0x3c6>
 8002960:	2b02      	cmp	r3, #2
 8002962:	d005      	beq.n	8002970 <UART_SetConfig+0x3d0>
 8002964:	e010      	b.n	8002988 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002966:	f7ff fac7 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 800296a:	0003      	movs	r3, r0
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800296e:	e014      	b.n	800299a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002970:	4bb4      	ldr	r3, [pc, #720]	; (8002c44 <UART_SetConfig+0x6a4>)
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002974:	e011      	b.n	800299a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002976:	f7ff fa33 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800297a:	0003      	movs	r3, r0
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800297e:	e00c      	b.n	800299a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	021b      	lsls	r3, r3, #8
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002986:	e008      	b.n	800299a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800298c:	231a      	movs	r3, #26
 800298e:	2220      	movs	r2, #32
 8002990:	189b      	adds	r3, r3, r2
 8002992:	19db      	adds	r3, r3, r7
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
        break;
 8002998:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	2b00      	cmp	r3, #0
 800299e:	d100      	bne.n	80029a2 <UART_SetConfig+0x402>
 80029a0:	e135      	b.n	8002c0e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a6:	4ba8      	ldr	r3, [pc, #672]	; (8002c48 <UART_SetConfig+0x6a8>)
 80029a8:	0052      	lsls	r2, r2, #1
 80029aa:	5ad3      	ldrh	r3, [r2, r3]
 80029ac:	0019      	movs	r1, r3
 80029ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029b0:	f7fd fba8 	bl	8000104 <__udivsi3>
 80029b4:	0003      	movs	r3, r0
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	0013      	movs	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d305      	bcc.n	80029d4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80029ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d906      	bls.n	80029e2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80029d4:	231a      	movs	r3, #26
 80029d6:	2220      	movs	r2, #32
 80029d8:	189b      	adds	r3, r3, r2
 80029da:	19db      	adds	r3, r3, r7
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e044      	b.n	8002a6c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ee:	4b96      	ldr	r3, [pc, #600]	; (8002c48 <UART_SetConfig+0x6a8>)
 80029f0:	0052      	lsls	r2, r2, #1
 80029f2:	5ad3      	ldrh	r3, [r2, r3]
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	69b8      	ldr	r0, [r7, #24]
 8002a00:	69f9      	ldr	r1, [r7, #28]
 8002a02:	f7fd fcf5 	bl	80003f0 <__aeabi_uldivmod>
 8002a06:	0002      	movs	r2, r0
 8002a08:	000b      	movs	r3, r1
 8002a0a:	0e11      	lsrs	r1, r2, #24
 8002a0c:	021d      	lsls	r5, r3, #8
 8002a0e:	430d      	orrs	r5, r1
 8002a10:	0214      	lsls	r4, r2, #8
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68b8      	ldr	r0, [r7, #8]
 8002a20:	68f9      	ldr	r1, [r7, #12]
 8002a22:	1900      	adds	r0, r0, r4
 8002a24:	4169      	adcs	r1, r5
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f7fd fcdc 	bl	80003f0 <__aeabi_uldivmod>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	000b      	movs	r3, r1
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a42:	23c0      	movs	r3, #192	; 0xc0
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d309      	bcc.n	8002a5e <UART_SetConfig+0x4be>
 8002a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	035b      	lsls	r3, r3, #13
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d204      	bcs.n	8002a5e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	e006      	b.n	8002a6c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002a5e:	231a      	movs	r3, #26
 8002a60:	2220      	movs	r2, #32
 8002a62:	189b      	adds	r3, r3, r2
 8002a64:	19db      	adds	r3, r3, r7
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002a6a:	e0d0      	b.n	8002c0e <UART_SetConfig+0x66e>
 8002a6c:	e0cf      	b.n	8002c0e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d000      	beq.n	8002a7c <UART_SetConfig+0x4dc>
 8002a7a:	e070      	b.n	8002b5e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002a7c:	231b      	movs	r3, #27
 8002a7e:	2220      	movs	r2, #32
 8002a80:	189b      	adds	r3, r3, r2
 8002a82:	19db      	adds	r3, r3, r7
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d015      	beq.n	8002ab6 <UART_SetConfig+0x516>
 8002a8a:	dc18      	bgt.n	8002abe <UART_SetConfig+0x51e>
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d00d      	beq.n	8002aac <UART_SetConfig+0x50c>
 8002a90:	dc15      	bgt.n	8002abe <UART_SetConfig+0x51e>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <UART_SetConfig+0x4fc>
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d005      	beq.n	8002aa6 <UART_SetConfig+0x506>
 8002a9a:	e010      	b.n	8002abe <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f7ff fa2c 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aa4:	e014      	b.n	8002ad0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <UART_SetConfig+0x6a4>)
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aaa:	e011      	b.n	8002ad0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aac:	f7ff f998 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ab4:	e00c      	b.n	8002ad0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002abc:	e008      	b.n	8002ad0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ac2:	231a      	movs	r3, #26
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	19db      	adds	r3, r3, r7
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
        break;
 8002ace:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d100      	bne.n	8002ad8 <UART_SetConfig+0x538>
 8002ad6:	e09a      	b.n	8002c0e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002adc:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <UART_SetConfig+0x6a8>)
 8002ade:	0052      	lsls	r2, r2, #1
 8002ae0:	5ad3      	ldrh	r3, [r2, r3]
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ae6:	f7fd fb0d 	bl	8000104 <__udivsi3>
 8002aea:	0003      	movs	r3, r0
 8002aec:	005a      	lsls	r2, r3, #1
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	18d2      	adds	r2, r2, r3
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0019      	movs	r1, r3
 8002afc:	0010      	movs	r0, r2
 8002afe:	f7fd fb01 	bl	8000104 <__udivsi3>
 8002b02:	0003      	movs	r3, r0
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d921      	bls.n	8002b50 <UART_SetConfig+0x5b0>
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	025b      	lsls	r3, r3, #9
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d21c      	bcs.n	8002b50 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	200e      	movs	r0, #14
 8002b1c:	2420      	movs	r4, #32
 8002b1e:	1903      	adds	r3, r0, r4
 8002b20:	19db      	adds	r3, r3, r7
 8002b22:	210f      	movs	r1, #15
 8002b24:	438a      	bics	r2, r1
 8002b26:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	2207      	movs	r2, #7
 8002b30:	4013      	ands	r3, r2
 8002b32:	b299      	uxth	r1, r3
 8002b34:	1903      	adds	r3, r0, r4
 8002b36:	19db      	adds	r3, r3, r7
 8002b38:	1902      	adds	r2, r0, r4
 8002b3a:	19d2      	adds	r2, r2, r7
 8002b3c:	8812      	ldrh	r2, [r2, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1902      	adds	r2, r0, r4
 8002b48:	19d2      	adds	r2, r2, r7
 8002b4a:	8812      	ldrh	r2, [r2, #0]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	e05e      	b.n	8002c0e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002b50:	231a      	movs	r3, #26
 8002b52:	2220      	movs	r2, #32
 8002b54:	189b      	adds	r3, r3, r2
 8002b56:	19db      	adds	r3, r3, r7
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e057      	b.n	8002c0e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b5e:	231b      	movs	r3, #27
 8002b60:	2220      	movs	r2, #32
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	19db      	adds	r3, r3, r7
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d015      	beq.n	8002b98 <UART_SetConfig+0x5f8>
 8002b6c:	dc18      	bgt.n	8002ba0 <UART_SetConfig+0x600>
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d00d      	beq.n	8002b8e <UART_SetConfig+0x5ee>
 8002b72:	dc15      	bgt.n	8002ba0 <UART_SetConfig+0x600>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <UART_SetConfig+0x5de>
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d005      	beq.n	8002b88 <UART_SetConfig+0x5e8>
 8002b7c:	e010      	b.n	8002ba0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b7e:	f7ff f9bb 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002b82:	0003      	movs	r3, r0
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b86:	e014      	b.n	8002bb2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <UART_SetConfig+0x6a4>)
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b8c:	e011      	b.n	8002bb2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8e:	f7ff f927 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002b92:	0003      	movs	r3, r0
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b96:	e00c      	b.n	8002bb2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b9e:	e008      	b.n	8002bb2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ba4:	231a      	movs	r3, #26
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	189b      	adds	r3, r3, r2
 8002baa:	19db      	adds	r3, r3, r7
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
        break;
 8002bb0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d02a      	beq.n	8002c0e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bbc:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <UART_SetConfig+0x6a8>)
 8002bbe:	0052      	lsls	r2, r2, #1
 8002bc0:	5ad3      	ldrh	r3, [r2, r3]
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002bc6:	f7fd fa9d 	bl	8000104 <__udivsi3>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	001a      	movs	r2, r3
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	18d2      	adds	r2, r2, r3
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0019      	movs	r1, r3
 8002bdc:	0010      	movs	r0, r2
 8002bde:	f7fd fa91 	bl	8000104 <__udivsi3>
 8002be2:	0003      	movs	r3, r0
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d90a      	bls.n	8002c02 <UART_SetConfig+0x662>
 8002bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	025b      	lsls	r3, r3, #9
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d205      	bcs.n	8002c02 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	e005      	b.n	8002c0e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002c02:	231a      	movs	r3, #26
 8002c04:	2220      	movs	r2, #32
 8002c06:	189b      	adds	r3, r3, r2
 8002c08:	19db      	adds	r3, r3, r7
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	226a      	movs	r2, #106	; 0x6a
 8002c12:	2101      	movs	r1, #1
 8002c14:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	2268      	movs	r2, #104	; 0x68
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	2200      	movs	r2, #0
 8002c22:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	2200      	movs	r2, #0
 8002c28:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002c2a:	231a      	movs	r3, #26
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	189b      	adds	r3, r3, r2
 8002c30:	19db      	adds	r3, r3, r7
 8002c32:	781b      	ldrb	r3, [r3, #0]
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b010      	add	sp, #64	; 0x40
 8002c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c3c:	40008000 	.word	0x40008000
 8002c40:	40008400 	.word	0x40008400
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	08003ec8 	.word	0x08003ec8

08002c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4a4a      	ldr	r2, [pc, #296]	; (8002d90 <UART_AdvFeatureConfig+0x144>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a43      	ldr	r2, [pc, #268]	; (8002d94 <UART_AdvFeatureConfig+0x148>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d00b      	beq.n	8002cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a3b      	ldr	r2, [pc, #236]	; (8002d98 <UART_AdvFeatureConfig+0x14c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a34      	ldr	r2, [pc, #208]	; (8002d9c <UART_AdvFeatureConfig+0x150>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <UART_AdvFeatureConfig+0x154>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <UART_AdvFeatureConfig+0x158>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	4013      	ands	r3, r2
 8002d28:	d01d      	beq.n	8002d66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <UART_AdvFeatureConfig+0x15c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	035b      	lsls	r3, r3, #13
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10b      	bne.n	8002d66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a15      	ldr	r2, [pc, #84]	; (8002dac <UART_AdvFeatureConfig+0x160>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <UART_AdvFeatureConfig+0x164>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	fffdffff 	.word	0xfffdffff
 8002d94:	fffeffff 	.word	0xfffeffff
 8002d98:	fffbffff 	.word	0xfffbffff
 8002d9c:	ffff7fff 	.word	0xffff7fff
 8002da0:	ffffefff 	.word	0xffffefff
 8002da4:	ffffdfff 	.word	0xffffdfff
 8002da8:	ffefffff 	.word	0xffefffff
 8002dac:	ff9fffff 	.word	0xff9fffff
 8002db0:	fff7ffff 	.word	0xfff7ffff

08002db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	228c      	movs	r2, #140	; 0x8c
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dc4:	f7fe f80e 	bl	8000de4 <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d10c      	bne.n	8002df4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	0391      	lsls	r1, r2, #14
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <UART_CheckIdleState+0x90>)
 8002de4:	9200      	str	r2, [sp, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f000 f82e 	bl	8002e48 <UART_WaitOnFlagUntilTimeout>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d001      	beq.n	8002df4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e023      	b.n	8002e3c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d10c      	bne.n	8002e1c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2280      	movs	r2, #128	; 0x80
 8002e06:	03d1      	lsls	r1, r2, #15
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <UART_CheckIdleState+0x90>)
 8002e0c:	9200      	str	r2, [sp, #0]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f000 f81a 	bl	8002e48 <UART_WaitOnFlagUntilTimeout>
 8002e14:	1e03      	subs	r3, r0, #0
 8002e16:	d001      	beq.n	8002e1c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e00f      	b.n	8002e3c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2284      	movs	r2, #132	; 0x84
 8002e20:	2120      	movs	r1, #32
 8002e22:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2288      	movs	r2, #136	; 0x88
 8002e28:	2120      	movs	r1, #32
 8002e2a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2280      	movs	r2, #128	; 0x80
 8002e36:	2100      	movs	r1, #0
 8002e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b004      	add	sp, #16
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	01ffffff 	.word	0x01ffffff

08002e48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b094      	sub	sp, #80	; 0x50
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e58:	e0a7      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	d100      	bne.n	8002e62 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002e60:	e0a3      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	f7fd ffbf 	bl	8000de4 <HAL_GetTick>
 8002e66:	0002      	movs	r2, r0
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d13f      	bne.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e78:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e80:	647b      	str	r3, [r7, #68]	; 0x44
 8002e82:	2301      	movs	r3, #1
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	f383 8810 	msr	PRIMASK, r3
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	494e      	ldr	r1, [pc, #312]	; (8002fd4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	f383 8810 	msr	PRIMASK, r3
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	f383 8810 	msr	PRIMASK, r3
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2101      	movs	r1, #1
 8002ecc:	438a      	bics	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed6:	f383 8810 	msr	PRIMASK, r3
}
 8002eda:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2284      	movs	r2, #132	; 0x84
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2288      	movs	r2, #136	; 0x88
 8002ee8:	2120      	movs	r1, #32
 8002eea:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e069      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2204      	movs	r2, #4
 8002f00:	4013      	ands	r3, r2
 8002f02:	d052      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	401a      	ands	r2, r3
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d148      	bne.n	8002faa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	0112      	lsls	r2, r2, #4
 8002f20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f22:	f3ef 8310 	mrs	r3, PRIMASK
 8002f26:	613b      	str	r3, [r7, #16]
  return(result);
 8002f28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4924      	ldr	r1, [pc, #144]	; (8002fd4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f54:	f3ef 8310 	mrs	r3, PRIMASK
 8002f58:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f5a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f5e:	2301      	movs	r3, #1
 8002f60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f383 8810 	msr	PRIMASK, r3
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	438a      	bics	r2, r1
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	f383 8810 	msr	PRIMASK, r3
}
 8002f84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2284      	movs	r2, #132	; 0x84
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2288      	movs	r2, #136	; 0x88
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	228c      	movs	r2, #140	; 0x8c
 8002f9a:	2120      	movs	r1, #32
 8002f9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e010      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	425a      	negs	r2, r3
 8002fba:	4153      	adcs	r3, r2
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	1dfb      	adds	r3, r7, #7
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d100      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x182>
 8002fc8:	e747      	b.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b014      	add	sp, #80	; 0x50
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	fffffe5f 	.word	0xfffffe5f

08002fd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_UARTEx_DisableFifoMode+0x16>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e027      	b.n	800303e <HAL_UARTEx_DisableFifoMode+0x66>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2284      	movs	r2, #132	; 0x84
 8002ffa:	2124      	movs	r1, #36	; 0x24
 8002ffc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	438a      	bics	r2, r1
 8003014:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <HAL_UARTEx_DisableFifoMode+0x70>)
 800301a:	4013      	ands	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2284      	movs	r2, #132	; 0x84
 8003030:	2120      	movs	r1, #32
 8003032:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	2100      	movs	r1, #0
 800303a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	dfffffff 	.word	0xdfffffff

0800304c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	5c9b      	ldrb	r3, [r3, r2]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003060:	2302      	movs	r3, #2
 8003062:	e02e      	b.n	80030c2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	2101      	movs	r1, #1
 800306a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2284      	movs	r2, #132	; 0x84
 8003070:	2124      	movs	r1, #36	; 0x24
 8003072:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2101      	movs	r1, #1
 8003088:	438a      	bics	r2, r1
 800308a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	08d9      	lsrs	r1, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 f854 	bl	8003150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2284      	movs	r2, #132	; 0x84
 80030b4:	2120      	movs	r1, #32
 80030b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	0018      	movs	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	b004      	add	sp, #16
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	5c9b      	ldrb	r3, [r3, r2]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e02f      	b.n	8003144 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	2101      	movs	r1, #1
 80030ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2284      	movs	r2, #132	; 0x84
 80030f0:	2124      	movs	r1, #36	; 0x24
 80030f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	438a      	bics	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4a0e      	ldr	r2, [pc, #56]	; (800314c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003114:	4013      	ands	r3, r2
 8003116:	0019      	movs	r1, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	0018      	movs	r0, r3
 8003126:	f000 f813 	bl	8003150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2284      	movs	r2, #132	; 0x84
 8003136:	2120      	movs	r1, #32
 8003138:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	2100      	movs	r1, #0
 8003140:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b004      	add	sp, #16
 800314a:	bd80      	pop	{r7, pc}
 800314c:	f1ffffff 	.word	0xf1ffffff

08003150 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	226a      	movs	r2, #106	; 0x6a
 8003164:	2101      	movs	r1, #1
 8003166:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2268      	movs	r2, #104	; 0x68
 800316c:	2101      	movs	r1, #1
 800316e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003170:	e043      	b.n	80031fa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003172:	260f      	movs	r6, #15
 8003174:	19bb      	adds	r3, r7, r6
 8003176:	2208      	movs	r2, #8
 8003178:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800317a:	200e      	movs	r0, #14
 800317c:	183b      	adds	r3, r7, r0
 800317e:	2208      	movs	r2, #8
 8003180:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	0e5b      	lsrs	r3, r3, #25
 800318a:	b2da      	uxtb	r2, r3
 800318c:	240d      	movs	r4, #13
 800318e:	193b      	adds	r3, r7, r4
 8003190:	2107      	movs	r1, #7
 8003192:	400a      	ands	r2, r1
 8003194:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	0f5b      	lsrs	r3, r3, #29
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	250c      	movs	r5, #12
 80031a2:	197b      	adds	r3, r7, r5
 80031a4:	2107      	movs	r1, #7
 80031a6:	400a      	ands	r2, r1
 80031a8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031aa:	183b      	adds	r3, r7, r0
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	197a      	adds	r2, r7, r5
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	4914      	ldr	r1, [pc, #80]	; (8003204 <UARTEx_SetNbDataToProcess+0xb4>)
 80031b4:	5c8a      	ldrb	r2, [r1, r2]
 80031b6:	435a      	muls	r2, r3
 80031b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80031ba:	197b      	adds	r3, r7, r5
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <UARTEx_SetNbDataToProcess+0xb8>)
 80031c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031c2:	0019      	movs	r1, r3
 80031c4:	f7fd f828 	bl	8000218 <__divsi3>
 80031c8:	0003      	movs	r3, r0
 80031ca:	b299      	uxth	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	226a      	movs	r2, #106	; 0x6a
 80031d0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031d2:	19bb      	adds	r3, r7, r6
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	193a      	adds	r2, r7, r4
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	490a      	ldr	r1, [pc, #40]	; (8003204 <UARTEx_SetNbDataToProcess+0xb4>)
 80031dc:	5c8a      	ldrb	r2, [r1, r2]
 80031de:	435a      	muls	r2, r3
 80031e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4a08      	ldr	r2, [pc, #32]	; (8003208 <UARTEx_SetNbDataToProcess+0xb8>)
 80031e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031ea:	0019      	movs	r1, r3
 80031ec:	f7fd f814 	bl	8000218 <__divsi3>
 80031f0:	0003      	movs	r3, r0
 80031f2:	b299      	uxth	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2268      	movs	r2, #104	; 0x68
 80031f8:	5299      	strh	r1, [r3, r2]
}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b005      	add	sp, #20
 8003200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	08003ee0 	.word	0x08003ee0
 8003208:	08003ee8 	.word	0x08003ee8

0800320c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	085a      	lsrs	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2201      	movs	r2, #1
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b002      	add	sp, #8
 8003234:	bd80      	pop	{r7, pc}

08003236 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8003236:	b084      	sub	sp, #16
 8003238:	b5b0      	push	{r4, r5, r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	2004      	movs	r0, #4
 8003242:	2420      	movs	r4, #32
 8003244:	1900      	adds	r0, r0, r4
 8003246:	19c0      	adds	r0, r0, r7
 8003248:	6001      	str	r1, [r0, #0]
 800324a:	6042      	str	r2, [r0, #4]
 800324c:	6083      	str	r3, [r0, #8]
  UNUSED(cfg);
  HAL_StatusTypeDef state;

  /* Reset after a PHY select */
  state = USB_CoreReset(USBx);
 800324e:	250f      	movs	r5, #15
 8003250:	197c      	adds	r4, r7, r5
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff ffd9 	bl	800320c <USB_CoreReset>
 800325a:	0003      	movs	r3, r0
 800325c:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	645a      	str	r2, [r3, #68]	; 0x44

  return state;
 8003264:	197b      	adds	r3, r7, r5
 8003266:	781b      	ldrb	r3, [r3, #0]
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bcb0      	pop	{r4, r5, r7}
 8003270:	bc08      	pop	{r3}
 8003272:	b004      	add	sp, #16
 8003274:	4718      	bx	r3
	...

08003278 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <USB_DisableGlobalInt+0x24>)
 8003282:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	43d2      	mvns	r2, r2
 800328c:	401a      	ands	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b004      	add	sp, #16
 800329a:	bd80      	pop	{r7, pc}
 800329c:	0000bf80 	.word	0x0000bf80

080032a0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	000a      	movs	r2, r1
 80032aa:	1cfb      	adds	r3, r7, #3
 80032ac:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 80032ae:	1cfb      	adds	r3, r7, #3
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	085a      	lsrs	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
 80032c2:	e006      	b.n	80032d2 <USB_SetCurrentMode+0x32>
  }
  else
  {
    USBx->CNTR |= USB_CNTR_HOST;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2280      	movs	r2, #128	; 0x80
 80032ca:	0612      	lsls	r2, r2, #24
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <USB_HostInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80032dc:	b084      	sub	sp, #16
 80032de:	b590      	push	{r4, r7, lr}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	2004      	movs	r0, #4
 80032e8:	2410      	movs	r4, #16
 80032ea:	1900      	adds	r0, r0, r4
 80032ec:	2408      	movs	r4, #8
 80032ee:	46a4      	mov	ip, r4
 80032f0:	44bc      	add	ip, r7
 80032f2:	4460      	add	r0, ip
 80032f4:	6001      	str	r1, [r0, #0]
 80032f6:	6042      	str	r2, [r0, #4]
 80032f8:	6083      	str	r3, [r0, #8]
  UNUSED(cfg);

  /* Clear All Pending Interrupt */
  USBx->ISTR = 0U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable all interrupts */
  USBx->CNTR &= ~(USB_CNTR_CTRM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	4a0d      	ldr	r2, [pc, #52]	; (800333c <USB_HostInit+0x60>)
 8003306:	401a      	ands	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
                  USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_DCON |
                  USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_L1REQM);

  /* Clear All Pending Interrupt */
  USBx->ISTR = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable Global interrupt */
  USBx->CNTR |= (USB_CNTR_CTRM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM |
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <USB_HostInit+0x64>)
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
                 USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_DCON |
                 USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_L1REQM);

  /* Remove Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2201      	movs	r2, #1
 8003324:	4393      	bics	r3, r2
 8003326:	001a      	movs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b003      	add	sp, #12
 8003334:	bc90      	pop	{r4, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	b004      	add	sp, #16
 800333a:	4718      	bx	r3
 800333c:	ffff007f 	.word	0xffff007f
 8003340:	0000ff80 	.word	0x0000ff80

08003344 <__errno>:
 8003344:	4b01      	ldr	r3, [pc, #4]	; (800334c <__errno+0x8>)
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	4770      	bx	lr
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	2000000c 	.word	0x2000000c

08003350 <__libc_init_array>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	2600      	movs	r6, #0
 8003354:	4d0c      	ldr	r5, [pc, #48]	; (8003388 <__libc_init_array+0x38>)
 8003356:	4c0d      	ldr	r4, [pc, #52]	; (800338c <__libc_init_array+0x3c>)
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	42a6      	cmp	r6, r4
 800335e:	d109      	bne.n	8003374 <__libc_init_array+0x24>
 8003360:	2600      	movs	r6, #0
 8003362:	f000 fd6b 	bl	8003e3c <_init>
 8003366:	4d0a      	ldr	r5, [pc, #40]	; (8003390 <__libc_init_array+0x40>)
 8003368:	4c0a      	ldr	r4, [pc, #40]	; (8003394 <__libc_init_array+0x44>)
 800336a:	1b64      	subs	r4, r4, r5
 800336c:	10a4      	asrs	r4, r4, #2
 800336e:	42a6      	cmp	r6, r4
 8003370:	d105      	bne.n	800337e <__libc_init_array+0x2e>
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	00b3      	lsls	r3, r6, #2
 8003376:	58eb      	ldr	r3, [r5, r3]
 8003378:	4798      	blx	r3
 800337a:	3601      	adds	r6, #1
 800337c:	e7ee      	b.n	800335c <__libc_init_array+0xc>
 800337e:	00b3      	lsls	r3, r6, #2
 8003380:	58eb      	ldr	r3, [r5, r3]
 8003382:	4798      	blx	r3
 8003384:	3601      	adds	r6, #1
 8003386:	e7f2      	b.n	800336e <__libc_init_array+0x1e>
 8003388:	08003f5c 	.word	0x08003f5c
 800338c:	08003f5c 	.word	0x08003f5c
 8003390:	08003f5c 	.word	0x08003f5c
 8003394:	08003f60 	.word	0x08003f60

08003398 <memset>:
 8003398:	0003      	movs	r3, r0
 800339a:	1882      	adds	r2, r0, r2
 800339c:	4293      	cmp	r3, r2
 800339e:	d100      	bne.n	80033a2 <memset+0xa>
 80033a0:	4770      	bx	lr
 80033a2:	7019      	strb	r1, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	e7f9      	b.n	800339c <memset+0x4>

080033a8 <_puts_r>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	0005      	movs	r5, r0
 80033ac:	000e      	movs	r6, r1
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d004      	beq.n	80033bc <_puts_r+0x14>
 80033b2:	6983      	ldr	r3, [r0, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <_puts_r+0x14>
 80033b8:	f000 fa6e 	bl	8003898 <__sinit>
 80033bc:	69ab      	ldr	r3, [r5, #24]
 80033be:	68ac      	ldr	r4, [r5, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <_puts_r+0x22>
 80033c4:	0028      	movs	r0, r5
 80033c6:	f000 fa67 	bl	8003898 <__sinit>
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <_puts_r+0xd8>)
 80033cc:	429c      	cmp	r4, r3
 80033ce:	d122      	bne.n	8003416 <_puts_r+0x6e>
 80033d0:	686c      	ldr	r4, [r5, #4]
 80033d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033d4:	07db      	lsls	r3, r3, #31
 80033d6:	d405      	bmi.n	80033e4 <_puts_r+0x3c>
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	059b      	lsls	r3, r3, #22
 80033dc:	d402      	bmi.n	80033e4 <_puts_r+0x3c>
 80033de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033e0:	f000 fafb 	bl	80039da <__retarget_lock_acquire_recursive>
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	071b      	lsls	r3, r3, #28
 80033e8:	d502      	bpl.n	80033f0 <_puts_r+0x48>
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d129      	bne.n	8003444 <_puts_r+0x9c>
 80033f0:	0021      	movs	r1, r4
 80033f2:	0028      	movs	r0, r5
 80033f4:	f000 f8aa 	bl	800354c <__swsetup_r>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d023      	beq.n	8003444 <_puts_r+0x9c>
 80033fc:	2501      	movs	r5, #1
 80033fe:	426d      	negs	r5, r5
 8003400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003402:	07db      	lsls	r3, r3, #31
 8003404:	d405      	bmi.n	8003412 <_puts_r+0x6a>
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	059b      	lsls	r3, r3, #22
 800340a:	d402      	bmi.n	8003412 <_puts_r+0x6a>
 800340c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800340e:	f000 fae5 	bl	80039dc <__retarget_lock_release_recursive>
 8003412:	0028      	movs	r0, r5
 8003414:	bd70      	pop	{r4, r5, r6, pc}
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <_puts_r+0xdc>)
 8003418:	429c      	cmp	r4, r3
 800341a:	d101      	bne.n	8003420 <_puts_r+0x78>
 800341c:	68ac      	ldr	r4, [r5, #8]
 800341e:	e7d8      	b.n	80033d2 <_puts_r+0x2a>
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <_puts_r+0xe0>)
 8003422:	429c      	cmp	r4, r3
 8003424:	d1d5      	bne.n	80033d2 <_puts_r+0x2a>
 8003426:	68ec      	ldr	r4, [r5, #12]
 8003428:	e7d3      	b.n	80033d2 <_puts_r+0x2a>
 800342a:	3601      	adds	r6, #1
 800342c:	60a3      	str	r3, [r4, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	da04      	bge.n	800343c <_puts_r+0x94>
 8003432:	69a2      	ldr	r2, [r4, #24]
 8003434:	429a      	cmp	r2, r3
 8003436:	dc16      	bgt.n	8003466 <_puts_r+0xbe>
 8003438:	290a      	cmp	r1, #10
 800343a:	d014      	beq.n	8003466 <_puts_r+0xbe>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	6022      	str	r2, [r4, #0]
 8003442:	7019      	strb	r1, [r3, #0]
 8003444:	68a3      	ldr	r3, [r4, #8]
 8003446:	7831      	ldrb	r1, [r6, #0]
 8003448:	3b01      	subs	r3, #1
 800344a:	2900      	cmp	r1, #0
 800344c:	d1ed      	bne.n	800342a <_puts_r+0x82>
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	da0f      	bge.n	8003474 <_puts_r+0xcc>
 8003454:	0028      	movs	r0, r5
 8003456:	0022      	movs	r2, r4
 8003458:	310a      	adds	r1, #10
 800345a:	f000 f821 	bl	80034a0 <__swbuf_r>
 800345e:	250a      	movs	r5, #10
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d1cd      	bne.n	8003400 <_puts_r+0x58>
 8003464:	e7ca      	b.n	80033fc <_puts_r+0x54>
 8003466:	0022      	movs	r2, r4
 8003468:	0028      	movs	r0, r5
 800346a:	f000 f819 	bl	80034a0 <__swbuf_r>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	d1e8      	bne.n	8003444 <_puts_r+0x9c>
 8003472:	e7c3      	b.n	80033fc <_puts_r+0x54>
 8003474:	250a      	movs	r5, #10
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	6022      	str	r2, [r4, #0]
 800347c:	701d      	strb	r5, [r3, #0]
 800347e:	e7bf      	b.n	8003400 <_puts_r+0x58>
 8003480:	08003f14 	.word	0x08003f14
 8003484:	08003f34 	.word	0x08003f34
 8003488:	08003ef4 	.word	0x08003ef4

0800348c <puts>:
 800348c:	b510      	push	{r4, lr}
 800348e:	4b03      	ldr	r3, [pc, #12]	; (800349c <puts+0x10>)
 8003490:	0001      	movs	r1, r0
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	f7ff ff88 	bl	80033a8 <_puts_r>
 8003498:	bd10      	pop	{r4, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	2000000c 	.word	0x2000000c

080034a0 <__swbuf_r>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	0005      	movs	r5, r0
 80034a4:	000e      	movs	r6, r1
 80034a6:	0014      	movs	r4, r2
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d004      	beq.n	80034b6 <__swbuf_r+0x16>
 80034ac:	6983      	ldr	r3, [r0, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <__swbuf_r+0x16>
 80034b2:	f000 f9f1 	bl	8003898 <__sinit>
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <__swbuf_r+0xa0>)
 80034b8:	429c      	cmp	r4, r3
 80034ba:	d12e      	bne.n	800351a <__swbuf_r+0x7a>
 80034bc:	686c      	ldr	r4, [r5, #4]
 80034be:	69a3      	ldr	r3, [r4, #24]
 80034c0:	60a3      	str	r3, [r4, #8]
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	071b      	lsls	r3, r3, #28
 80034c6:	d532      	bpl.n	800352e <__swbuf_r+0x8e>
 80034c8:	6923      	ldr	r3, [r4, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d02f      	beq.n	800352e <__swbuf_r+0x8e>
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	6922      	ldr	r2, [r4, #16]
 80034d2:	b2f7      	uxtb	r7, r6
 80034d4:	1a98      	subs	r0, r3, r2
 80034d6:	6963      	ldr	r3, [r4, #20]
 80034d8:	b2f6      	uxtb	r6, r6
 80034da:	4283      	cmp	r3, r0
 80034dc:	dc05      	bgt.n	80034ea <__swbuf_r+0x4a>
 80034de:	0021      	movs	r1, r4
 80034e0:	0028      	movs	r0, r5
 80034e2:	f000 f937 	bl	8003754 <_fflush_r>
 80034e6:	2800      	cmp	r0, #0
 80034e8:	d127      	bne.n	800353a <__swbuf_r+0x9a>
 80034ea:	68a3      	ldr	r3, [r4, #8]
 80034ec:	3001      	adds	r0, #1
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	6022      	str	r2, [r4, #0]
 80034f8:	701f      	strb	r7, [r3, #0]
 80034fa:	6963      	ldr	r3, [r4, #20]
 80034fc:	4283      	cmp	r3, r0
 80034fe:	d004      	beq.n	800350a <__swbuf_r+0x6a>
 8003500:	89a3      	ldrh	r3, [r4, #12]
 8003502:	07db      	lsls	r3, r3, #31
 8003504:	d507      	bpl.n	8003516 <__swbuf_r+0x76>
 8003506:	2e0a      	cmp	r6, #10
 8003508:	d105      	bne.n	8003516 <__swbuf_r+0x76>
 800350a:	0021      	movs	r1, r4
 800350c:	0028      	movs	r0, r5
 800350e:	f000 f921 	bl	8003754 <_fflush_r>
 8003512:	2800      	cmp	r0, #0
 8003514:	d111      	bne.n	800353a <__swbuf_r+0x9a>
 8003516:	0030      	movs	r0, r6
 8003518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <__swbuf_r+0xa4>)
 800351c:	429c      	cmp	r4, r3
 800351e:	d101      	bne.n	8003524 <__swbuf_r+0x84>
 8003520:	68ac      	ldr	r4, [r5, #8]
 8003522:	e7cc      	b.n	80034be <__swbuf_r+0x1e>
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <__swbuf_r+0xa8>)
 8003526:	429c      	cmp	r4, r3
 8003528:	d1c9      	bne.n	80034be <__swbuf_r+0x1e>
 800352a:	68ec      	ldr	r4, [r5, #12]
 800352c:	e7c7      	b.n	80034be <__swbuf_r+0x1e>
 800352e:	0021      	movs	r1, r4
 8003530:	0028      	movs	r0, r5
 8003532:	f000 f80b 	bl	800354c <__swsetup_r>
 8003536:	2800      	cmp	r0, #0
 8003538:	d0c9      	beq.n	80034ce <__swbuf_r+0x2e>
 800353a:	2601      	movs	r6, #1
 800353c:	4276      	negs	r6, r6
 800353e:	e7ea      	b.n	8003516 <__swbuf_r+0x76>
 8003540:	08003f14 	.word	0x08003f14
 8003544:	08003f34 	.word	0x08003f34
 8003548:	08003ef4 	.word	0x08003ef4

0800354c <__swsetup_r>:
 800354c:	4b37      	ldr	r3, [pc, #220]	; (800362c <__swsetup_r+0xe0>)
 800354e:	b570      	push	{r4, r5, r6, lr}
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	0006      	movs	r6, r0
 8003554:	000c      	movs	r4, r1
 8003556:	2d00      	cmp	r5, #0
 8003558:	d005      	beq.n	8003566 <__swsetup_r+0x1a>
 800355a:	69ab      	ldr	r3, [r5, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <__swsetup_r+0x1a>
 8003560:	0028      	movs	r0, r5
 8003562:	f000 f999 	bl	8003898 <__sinit>
 8003566:	4b32      	ldr	r3, [pc, #200]	; (8003630 <__swsetup_r+0xe4>)
 8003568:	429c      	cmp	r4, r3
 800356a:	d10f      	bne.n	800358c <__swsetup_r+0x40>
 800356c:	686c      	ldr	r4, [r5, #4]
 800356e:	230c      	movs	r3, #12
 8003570:	5ee2      	ldrsh	r2, [r4, r3]
 8003572:	b293      	uxth	r3, r2
 8003574:	0711      	lsls	r1, r2, #28
 8003576:	d42d      	bmi.n	80035d4 <__swsetup_r+0x88>
 8003578:	06d9      	lsls	r1, r3, #27
 800357a:	d411      	bmi.n	80035a0 <__swsetup_r+0x54>
 800357c:	2309      	movs	r3, #9
 800357e:	2001      	movs	r0, #1
 8003580:	6033      	str	r3, [r6, #0]
 8003582:	3337      	adds	r3, #55	; 0x37
 8003584:	4313      	orrs	r3, r2
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	4240      	negs	r0, r0
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	4b29      	ldr	r3, [pc, #164]	; (8003634 <__swsetup_r+0xe8>)
 800358e:	429c      	cmp	r4, r3
 8003590:	d101      	bne.n	8003596 <__swsetup_r+0x4a>
 8003592:	68ac      	ldr	r4, [r5, #8]
 8003594:	e7eb      	b.n	800356e <__swsetup_r+0x22>
 8003596:	4b28      	ldr	r3, [pc, #160]	; (8003638 <__swsetup_r+0xec>)
 8003598:	429c      	cmp	r4, r3
 800359a:	d1e8      	bne.n	800356e <__swsetup_r+0x22>
 800359c:	68ec      	ldr	r4, [r5, #12]
 800359e:	e7e6      	b.n	800356e <__swsetup_r+0x22>
 80035a0:	075b      	lsls	r3, r3, #29
 80035a2:	d513      	bpl.n	80035cc <__swsetup_r+0x80>
 80035a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d008      	beq.n	80035bc <__swsetup_r+0x70>
 80035aa:	0023      	movs	r3, r4
 80035ac:	3344      	adds	r3, #68	; 0x44
 80035ae:	4299      	cmp	r1, r3
 80035b0:	d002      	beq.n	80035b8 <__swsetup_r+0x6c>
 80035b2:	0030      	movs	r0, r6
 80035b4:	f000 fa80 	bl	8003ab8 <_free_r>
 80035b8:	2300      	movs	r3, #0
 80035ba:	6363      	str	r3, [r4, #52]	; 0x34
 80035bc:	2224      	movs	r2, #36	; 0x24
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	4393      	bics	r3, r2
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	2300      	movs	r3, #0
 80035c6:	6063      	str	r3, [r4, #4]
 80035c8:	6923      	ldr	r3, [r4, #16]
 80035ca:	6023      	str	r3, [r4, #0]
 80035cc:	2308      	movs	r3, #8
 80035ce:	89a2      	ldrh	r2, [r4, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	6923      	ldr	r3, [r4, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10b      	bne.n	80035f2 <__swsetup_r+0xa6>
 80035da:	21a0      	movs	r1, #160	; 0xa0
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	0089      	lsls	r1, r1, #2
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	400b      	ands	r3, r1
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <__swsetup_r+0xa6>
 80035ea:	0021      	movs	r1, r4
 80035ec:	0030      	movs	r0, r6
 80035ee:	f000 fa1f 	bl	8003a30 <__smakebuf_r>
 80035f2:	220c      	movs	r2, #12
 80035f4:	5ea3      	ldrsh	r3, [r4, r2]
 80035f6:	2001      	movs	r0, #1
 80035f8:	001a      	movs	r2, r3
 80035fa:	b299      	uxth	r1, r3
 80035fc:	4002      	ands	r2, r0
 80035fe:	4203      	tst	r3, r0
 8003600:	d00f      	beq.n	8003622 <__swsetup_r+0xd6>
 8003602:	2200      	movs	r2, #0
 8003604:	60a2      	str	r2, [r4, #8]
 8003606:	6962      	ldr	r2, [r4, #20]
 8003608:	4252      	negs	r2, r2
 800360a:	61a2      	str	r2, [r4, #24]
 800360c:	2000      	movs	r0, #0
 800360e:	6922      	ldr	r2, [r4, #16]
 8003610:	4282      	cmp	r2, r0
 8003612:	d1ba      	bne.n	800358a <__swsetup_r+0x3e>
 8003614:	060a      	lsls	r2, r1, #24
 8003616:	d5b8      	bpl.n	800358a <__swsetup_r+0x3e>
 8003618:	2240      	movs	r2, #64	; 0x40
 800361a:	4313      	orrs	r3, r2
 800361c:	81a3      	strh	r3, [r4, #12]
 800361e:	3801      	subs	r0, #1
 8003620:	e7b3      	b.n	800358a <__swsetup_r+0x3e>
 8003622:	0788      	lsls	r0, r1, #30
 8003624:	d400      	bmi.n	8003628 <__swsetup_r+0xdc>
 8003626:	6962      	ldr	r2, [r4, #20]
 8003628:	60a2      	str	r2, [r4, #8]
 800362a:	e7ef      	b.n	800360c <__swsetup_r+0xc0>
 800362c:	2000000c 	.word	0x2000000c
 8003630:	08003f14 	.word	0x08003f14
 8003634:	08003f34 	.word	0x08003f34
 8003638:	08003ef4 	.word	0x08003ef4

0800363c <__sflush_r>:
 800363c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800363e:	898b      	ldrh	r3, [r1, #12]
 8003640:	0005      	movs	r5, r0
 8003642:	000c      	movs	r4, r1
 8003644:	071a      	lsls	r2, r3, #28
 8003646:	d45f      	bmi.n	8003708 <__sflush_r+0xcc>
 8003648:	684a      	ldr	r2, [r1, #4]
 800364a:	2a00      	cmp	r2, #0
 800364c:	dc04      	bgt.n	8003658 <__sflush_r+0x1c>
 800364e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003650:	2a00      	cmp	r2, #0
 8003652:	dc01      	bgt.n	8003658 <__sflush_r+0x1c>
 8003654:	2000      	movs	r0, #0
 8003656:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003658:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800365a:	2f00      	cmp	r7, #0
 800365c:	d0fa      	beq.n	8003654 <__sflush_r+0x18>
 800365e:	2200      	movs	r2, #0
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	682e      	ldr	r6, [r5, #0]
 8003664:	602a      	str	r2, [r5, #0]
 8003666:	001a      	movs	r2, r3
 8003668:	0149      	lsls	r1, r1, #5
 800366a:	400a      	ands	r2, r1
 800366c:	420b      	tst	r3, r1
 800366e:	d034      	beq.n	80036da <__sflush_r+0x9e>
 8003670:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	075b      	lsls	r3, r3, #29
 8003676:	d506      	bpl.n	8003686 <__sflush_r+0x4a>
 8003678:	6863      	ldr	r3, [r4, #4]
 800367a:	1ac0      	subs	r0, r0, r3
 800367c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <__sflush_r+0x4a>
 8003682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003684:	1ac0      	subs	r0, r0, r3
 8003686:	0002      	movs	r2, r0
 8003688:	6a21      	ldr	r1, [r4, #32]
 800368a:	2300      	movs	r3, #0
 800368c:	0028      	movs	r0, r5
 800368e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003690:	47b8      	blx	r7
 8003692:	89a1      	ldrh	r1, [r4, #12]
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	d106      	bne.n	80036a6 <__sflush_r+0x6a>
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	2b1d      	cmp	r3, #29
 800369c:	d831      	bhi.n	8003702 <__sflush_r+0xc6>
 800369e:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <__sflush_r+0x114>)
 80036a0:	40da      	lsrs	r2, r3
 80036a2:	07d3      	lsls	r3, r2, #31
 80036a4:	d52d      	bpl.n	8003702 <__sflush_r+0xc6>
 80036a6:	2300      	movs	r3, #0
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	04cb      	lsls	r3, r1, #19
 80036b0:	d505      	bpl.n	80036be <__sflush_r+0x82>
 80036b2:	1c43      	adds	r3, r0, #1
 80036b4:	d102      	bne.n	80036bc <__sflush_r+0x80>
 80036b6:	682b      	ldr	r3, [r5, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d100      	bne.n	80036be <__sflush_r+0x82>
 80036bc:	6560      	str	r0, [r4, #84]	; 0x54
 80036be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c0:	602e      	str	r6, [r5, #0]
 80036c2:	2900      	cmp	r1, #0
 80036c4:	d0c6      	beq.n	8003654 <__sflush_r+0x18>
 80036c6:	0023      	movs	r3, r4
 80036c8:	3344      	adds	r3, #68	; 0x44
 80036ca:	4299      	cmp	r1, r3
 80036cc:	d002      	beq.n	80036d4 <__sflush_r+0x98>
 80036ce:	0028      	movs	r0, r5
 80036d0:	f000 f9f2 	bl	8003ab8 <_free_r>
 80036d4:	2000      	movs	r0, #0
 80036d6:	6360      	str	r0, [r4, #52]	; 0x34
 80036d8:	e7bd      	b.n	8003656 <__sflush_r+0x1a>
 80036da:	2301      	movs	r3, #1
 80036dc:	0028      	movs	r0, r5
 80036de:	6a21      	ldr	r1, [r4, #32]
 80036e0:	47b8      	blx	r7
 80036e2:	1c43      	adds	r3, r0, #1
 80036e4:	d1c5      	bne.n	8003672 <__sflush_r+0x36>
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0c2      	beq.n	8003672 <__sflush_r+0x36>
 80036ec:	2b1d      	cmp	r3, #29
 80036ee:	d001      	beq.n	80036f4 <__sflush_r+0xb8>
 80036f0:	2b16      	cmp	r3, #22
 80036f2:	d101      	bne.n	80036f8 <__sflush_r+0xbc>
 80036f4:	602e      	str	r6, [r5, #0]
 80036f6:	e7ad      	b.n	8003654 <__sflush_r+0x18>
 80036f8:	2340      	movs	r3, #64	; 0x40
 80036fa:	89a2      	ldrh	r2, [r4, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	81a3      	strh	r3, [r4, #12]
 8003700:	e7a9      	b.n	8003656 <__sflush_r+0x1a>
 8003702:	2340      	movs	r3, #64	; 0x40
 8003704:	430b      	orrs	r3, r1
 8003706:	e7fa      	b.n	80036fe <__sflush_r+0xc2>
 8003708:	690f      	ldr	r7, [r1, #16]
 800370a:	2f00      	cmp	r7, #0
 800370c:	d0a2      	beq.n	8003654 <__sflush_r+0x18>
 800370e:	680a      	ldr	r2, [r1, #0]
 8003710:	600f      	str	r7, [r1, #0]
 8003712:	1bd2      	subs	r2, r2, r7
 8003714:	9201      	str	r2, [sp, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	079b      	lsls	r3, r3, #30
 800371a:	d100      	bne.n	800371e <__sflush_r+0xe2>
 800371c:	694a      	ldr	r2, [r1, #20]
 800371e:	60a2      	str	r2, [r4, #8]
 8003720:	9b01      	ldr	r3, [sp, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	dc00      	bgt.n	8003728 <__sflush_r+0xec>
 8003726:	e795      	b.n	8003654 <__sflush_r+0x18>
 8003728:	003a      	movs	r2, r7
 800372a:	0028      	movs	r0, r5
 800372c:	9b01      	ldr	r3, [sp, #4]
 800372e:	6a21      	ldr	r1, [r4, #32]
 8003730:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003732:	47b0      	blx	r6
 8003734:	2800      	cmp	r0, #0
 8003736:	dc06      	bgt.n	8003746 <__sflush_r+0x10a>
 8003738:	2340      	movs	r3, #64	; 0x40
 800373a:	2001      	movs	r0, #1
 800373c:	89a2      	ldrh	r2, [r4, #12]
 800373e:	4240      	negs	r0, r0
 8003740:	4313      	orrs	r3, r2
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	e787      	b.n	8003656 <__sflush_r+0x1a>
 8003746:	9b01      	ldr	r3, [sp, #4]
 8003748:	183f      	adds	r7, r7, r0
 800374a:	1a1b      	subs	r3, r3, r0
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	e7e7      	b.n	8003720 <__sflush_r+0xe4>
 8003750:	20400001 	.word	0x20400001

08003754 <_fflush_r>:
 8003754:	690b      	ldr	r3, [r1, #16]
 8003756:	b570      	push	{r4, r5, r6, lr}
 8003758:	0005      	movs	r5, r0
 800375a:	000c      	movs	r4, r1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <_fflush_r+0x12>
 8003760:	2500      	movs	r5, #0
 8003762:	0028      	movs	r0, r5
 8003764:	bd70      	pop	{r4, r5, r6, pc}
 8003766:	2800      	cmp	r0, #0
 8003768:	d004      	beq.n	8003774 <_fflush_r+0x20>
 800376a:	6983      	ldr	r3, [r0, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <_fflush_r+0x20>
 8003770:	f000 f892 	bl	8003898 <__sinit>
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <_fflush_r+0x74>)
 8003776:	429c      	cmp	r4, r3
 8003778:	d11b      	bne.n	80037b2 <_fflush_r+0x5e>
 800377a:	686c      	ldr	r4, [r5, #4]
 800377c:	220c      	movs	r2, #12
 800377e:	5ea3      	ldrsh	r3, [r4, r2]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ed      	beq.n	8003760 <_fflush_r+0xc>
 8003784:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003786:	07d2      	lsls	r2, r2, #31
 8003788:	d404      	bmi.n	8003794 <_fflush_r+0x40>
 800378a:	059b      	lsls	r3, r3, #22
 800378c:	d402      	bmi.n	8003794 <_fflush_r+0x40>
 800378e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003790:	f000 f923 	bl	80039da <__retarget_lock_acquire_recursive>
 8003794:	0028      	movs	r0, r5
 8003796:	0021      	movs	r1, r4
 8003798:	f7ff ff50 	bl	800363c <__sflush_r>
 800379c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800379e:	0005      	movs	r5, r0
 80037a0:	07db      	lsls	r3, r3, #31
 80037a2:	d4de      	bmi.n	8003762 <_fflush_r+0xe>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	059b      	lsls	r3, r3, #22
 80037a8:	d4db      	bmi.n	8003762 <_fflush_r+0xe>
 80037aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ac:	f000 f916 	bl	80039dc <__retarget_lock_release_recursive>
 80037b0:	e7d7      	b.n	8003762 <_fflush_r+0xe>
 80037b2:	4b06      	ldr	r3, [pc, #24]	; (80037cc <_fflush_r+0x78>)
 80037b4:	429c      	cmp	r4, r3
 80037b6:	d101      	bne.n	80037bc <_fflush_r+0x68>
 80037b8:	68ac      	ldr	r4, [r5, #8]
 80037ba:	e7df      	b.n	800377c <_fflush_r+0x28>
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <_fflush_r+0x7c>)
 80037be:	429c      	cmp	r4, r3
 80037c0:	d1dc      	bne.n	800377c <_fflush_r+0x28>
 80037c2:	68ec      	ldr	r4, [r5, #12]
 80037c4:	e7da      	b.n	800377c <_fflush_r+0x28>
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	08003f14 	.word	0x08003f14
 80037cc:	08003f34 	.word	0x08003f34
 80037d0:	08003ef4 	.word	0x08003ef4

080037d4 <std>:
 80037d4:	2300      	movs	r3, #0
 80037d6:	b510      	push	{r4, lr}
 80037d8:	0004      	movs	r4, r0
 80037da:	6003      	str	r3, [r0, #0]
 80037dc:	6043      	str	r3, [r0, #4]
 80037de:	6083      	str	r3, [r0, #8]
 80037e0:	8181      	strh	r1, [r0, #12]
 80037e2:	6643      	str	r3, [r0, #100]	; 0x64
 80037e4:	0019      	movs	r1, r3
 80037e6:	81c2      	strh	r2, [r0, #14]
 80037e8:	6103      	str	r3, [r0, #16]
 80037ea:	6143      	str	r3, [r0, #20]
 80037ec:	6183      	str	r3, [r0, #24]
 80037ee:	2208      	movs	r2, #8
 80037f0:	305c      	adds	r0, #92	; 0x5c
 80037f2:	f7ff fdd1 	bl	8003398 <memset>
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <std+0x38>)
 80037f8:	6224      	str	r4, [r4, #32]
 80037fa:	6263      	str	r3, [r4, #36]	; 0x24
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <std+0x3c>)
 80037fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <std+0x40>)
 8003802:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <std+0x44>)
 8003806:	6323      	str	r3, [r4, #48]	; 0x30
 8003808:	bd10      	pop	{r4, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	08003ca1 	.word	0x08003ca1
 8003810:	08003cc9 	.word	0x08003cc9
 8003814:	08003d01 	.word	0x08003d01
 8003818:	08003d2d 	.word	0x08003d2d

0800381c <_cleanup_r>:
 800381c:	b510      	push	{r4, lr}
 800381e:	4902      	ldr	r1, [pc, #8]	; (8003828 <_cleanup_r+0xc>)
 8003820:	f000 f8ba 	bl	8003998 <_fwalk_reent>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	08003755 	.word	0x08003755

0800382c <__sfmoreglue>:
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	2568      	movs	r5, #104	; 0x68
 8003830:	1e4a      	subs	r2, r1, #1
 8003832:	4355      	muls	r5, r2
 8003834:	000e      	movs	r6, r1
 8003836:	0029      	movs	r1, r5
 8003838:	3174      	adds	r1, #116	; 0x74
 800383a:	f000 f9a9 	bl	8003b90 <_malloc_r>
 800383e:	1e04      	subs	r4, r0, #0
 8003840:	d008      	beq.n	8003854 <__sfmoreglue+0x28>
 8003842:	2100      	movs	r1, #0
 8003844:	002a      	movs	r2, r5
 8003846:	6001      	str	r1, [r0, #0]
 8003848:	6046      	str	r6, [r0, #4]
 800384a:	300c      	adds	r0, #12
 800384c:	60a0      	str	r0, [r4, #8]
 800384e:	3268      	adds	r2, #104	; 0x68
 8003850:	f7ff fda2 	bl	8003398 <memset>
 8003854:	0020      	movs	r0, r4
 8003856:	bd70      	pop	{r4, r5, r6, pc}

08003858 <__sfp_lock_acquire>:
 8003858:	b510      	push	{r4, lr}
 800385a:	4802      	ldr	r0, [pc, #8]	; (8003864 <__sfp_lock_acquire+0xc>)
 800385c:	f000 f8bd 	bl	80039da <__retarget_lock_acquire_recursive>
 8003860:	bd10      	pop	{r4, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	200004ad 	.word	0x200004ad

08003868 <__sfp_lock_release>:
 8003868:	b510      	push	{r4, lr}
 800386a:	4802      	ldr	r0, [pc, #8]	; (8003874 <__sfp_lock_release+0xc>)
 800386c:	f000 f8b6 	bl	80039dc <__retarget_lock_release_recursive>
 8003870:	bd10      	pop	{r4, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	200004ad 	.word	0x200004ad

08003878 <__sinit_lock_acquire>:
 8003878:	b510      	push	{r4, lr}
 800387a:	4802      	ldr	r0, [pc, #8]	; (8003884 <__sinit_lock_acquire+0xc>)
 800387c:	f000 f8ad 	bl	80039da <__retarget_lock_acquire_recursive>
 8003880:	bd10      	pop	{r4, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	200004ae 	.word	0x200004ae

08003888 <__sinit_lock_release>:
 8003888:	b510      	push	{r4, lr}
 800388a:	4802      	ldr	r0, [pc, #8]	; (8003894 <__sinit_lock_release+0xc>)
 800388c:	f000 f8a6 	bl	80039dc <__retarget_lock_release_recursive>
 8003890:	bd10      	pop	{r4, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	200004ae 	.word	0x200004ae

08003898 <__sinit>:
 8003898:	b513      	push	{r0, r1, r4, lr}
 800389a:	0004      	movs	r4, r0
 800389c:	f7ff ffec 	bl	8003878 <__sinit_lock_acquire>
 80038a0:	69a3      	ldr	r3, [r4, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <__sinit+0x14>
 80038a6:	f7ff ffef 	bl	8003888 <__sinit_lock_release>
 80038aa:	bd13      	pop	{r0, r1, r4, pc}
 80038ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80038ae:	64e3      	str	r3, [r4, #76]	; 0x4c
 80038b0:	6523      	str	r3, [r4, #80]	; 0x50
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <__sinit+0x68>)
 80038b4:	4a13      	ldr	r2, [pc, #76]	; (8003904 <__sinit+0x6c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d101      	bne.n	80038c4 <__sinit+0x2c>
 80038c0:	2301      	movs	r3, #1
 80038c2:	61a3      	str	r3, [r4, #24]
 80038c4:	0020      	movs	r0, r4
 80038c6:	f000 f81f 	bl	8003908 <__sfp>
 80038ca:	6060      	str	r0, [r4, #4]
 80038cc:	0020      	movs	r0, r4
 80038ce:	f000 f81b 	bl	8003908 <__sfp>
 80038d2:	60a0      	str	r0, [r4, #8]
 80038d4:	0020      	movs	r0, r4
 80038d6:	f000 f817 	bl	8003908 <__sfp>
 80038da:	2200      	movs	r2, #0
 80038dc:	2104      	movs	r1, #4
 80038de:	60e0      	str	r0, [r4, #12]
 80038e0:	6860      	ldr	r0, [r4, #4]
 80038e2:	f7ff ff77 	bl	80037d4 <std>
 80038e6:	2201      	movs	r2, #1
 80038e8:	2109      	movs	r1, #9
 80038ea:	68a0      	ldr	r0, [r4, #8]
 80038ec:	f7ff ff72 	bl	80037d4 <std>
 80038f0:	2202      	movs	r2, #2
 80038f2:	2112      	movs	r1, #18
 80038f4:	68e0      	ldr	r0, [r4, #12]
 80038f6:	f7ff ff6d 	bl	80037d4 <std>
 80038fa:	2301      	movs	r3, #1
 80038fc:	61a3      	str	r3, [r4, #24]
 80038fe:	e7d2      	b.n	80038a6 <__sinit+0xe>
 8003900:	08003ef0 	.word	0x08003ef0
 8003904:	0800381d 	.word	0x0800381d

08003908 <__sfp>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	0007      	movs	r7, r0
 800390c:	f7ff ffa4 	bl	8003858 <__sfp_lock_acquire>
 8003910:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <__sfp+0x88>)
 8003912:	681e      	ldr	r6, [r3, #0]
 8003914:	69b3      	ldr	r3, [r6, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d102      	bne.n	8003920 <__sfp+0x18>
 800391a:	0030      	movs	r0, r6
 800391c:	f7ff ffbc 	bl	8003898 <__sinit>
 8003920:	3648      	adds	r6, #72	; 0x48
 8003922:	68b4      	ldr	r4, [r6, #8]
 8003924:	6873      	ldr	r3, [r6, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	d504      	bpl.n	8003934 <__sfp+0x2c>
 800392a:	6833      	ldr	r3, [r6, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d022      	beq.n	8003976 <__sfp+0x6e>
 8003930:	6836      	ldr	r6, [r6, #0]
 8003932:	e7f6      	b.n	8003922 <__sfp+0x1a>
 8003934:	220c      	movs	r2, #12
 8003936:	5ea5      	ldrsh	r5, [r4, r2]
 8003938:	2d00      	cmp	r5, #0
 800393a:	d11a      	bne.n	8003972 <__sfp+0x6a>
 800393c:	0020      	movs	r0, r4
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <__sfp+0x8c>)
 8003940:	3058      	adds	r0, #88	; 0x58
 8003942:	60e3      	str	r3, [r4, #12]
 8003944:	6665      	str	r5, [r4, #100]	; 0x64
 8003946:	f000 f847 	bl	80039d8 <__retarget_lock_init_recursive>
 800394a:	f7ff ff8d 	bl	8003868 <__sfp_lock_release>
 800394e:	0020      	movs	r0, r4
 8003950:	2208      	movs	r2, #8
 8003952:	0029      	movs	r1, r5
 8003954:	6025      	str	r5, [r4, #0]
 8003956:	60a5      	str	r5, [r4, #8]
 8003958:	6065      	str	r5, [r4, #4]
 800395a:	6125      	str	r5, [r4, #16]
 800395c:	6165      	str	r5, [r4, #20]
 800395e:	61a5      	str	r5, [r4, #24]
 8003960:	305c      	adds	r0, #92	; 0x5c
 8003962:	f7ff fd19 	bl	8003398 <memset>
 8003966:	6365      	str	r5, [r4, #52]	; 0x34
 8003968:	63a5      	str	r5, [r4, #56]	; 0x38
 800396a:	64a5      	str	r5, [r4, #72]	; 0x48
 800396c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800396e:	0020      	movs	r0, r4
 8003970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003972:	3468      	adds	r4, #104	; 0x68
 8003974:	e7d7      	b.n	8003926 <__sfp+0x1e>
 8003976:	2104      	movs	r1, #4
 8003978:	0038      	movs	r0, r7
 800397a:	f7ff ff57 	bl	800382c <__sfmoreglue>
 800397e:	1e04      	subs	r4, r0, #0
 8003980:	6030      	str	r0, [r6, #0]
 8003982:	d1d5      	bne.n	8003930 <__sfp+0x28>
 8003984:	f7ff ff70 	bl	8003868 <__sfp_lock_release>
 8003988:	230c      	movs	r3, #12
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	e7ef      	b.n	800396e <__sfp+0x66>
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	08003ef0 	.word	0x08003ef0
 8003994:	ffff0001 	.word	0xffff0001

08003998 <_fwalk_reent>:
 8003998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800399a:	0004      	movs	r4, r0
 800399c:	0006      	movs	r6, r0
 800399e:	2700      	movs	r7, #0
 80039a0:	9101      	str	r1, [sp, #4]
 80039a2:	3448      	adds	r4, #72	; 0x48
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	68a5      	ldr	r5, [r4, #8]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	9b00      	ldr	r3, [sp, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	d504      	bpl.n	80039bc <_fwalk_reent+0x24>
 80039b2:	6824      	ldr	r4, [r4, #0]
 80039b4:	2c00      	cmp	r4, #0
 80039b6:	d1f5      	bne.n	80039a4 <_fwalk_reent+0xc>
 80039b8:	0038      	movs	r0, r7
 80039ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039bc:	89ab      	ldrh	r3, [r5, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d908      	bls.n	80039d4 <_fwalk_reent+0x3c>
 80039c2:	220e      	movs	r2, #14
 80039c4:	5eab      	ldrsh	r3, [r5, r2]
 80039c6:	3301      	adds	r3, #1
 80039c8:	d004      	beq.n	80039d4 <_fwalk_reent+0x3c>
 80039ca:	0029      	movs	r1, r5
 80039cc:	0030      	movs	r0, r6
 80039ce:	9b01      	ldr	r3, [sp, #4]
 80039d0:	4798      	blx	r3
 80039d2:	4307      	orrs	r7, r0
 80039d4:	3568      	adds	r5, #104	; 0x68
 80039d6:	e7e8      	b.n	80039aa <_fwalk_reent+0x12>

080039d8 <__retarget_lock_init_recursive>:
 80039d8:	4770      	bx	lr

080039da <__retarget_lock_acquire_recursive>:
 80039da:	4770      	bx	lr

080039dc <__retarget_lock_release_recursive>:
 80039dc:	4770      	bx	lr
	...

080039e0 <__swhatbuf_r>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	000e      	movs	r6, r1
 80039e4:	001d      	movs	r5, r3
 80039e6:	230e      	movs	r3, #14
 80039e8:	5ec9      	ldrsh	r1, [r1, r3]
 80039ea:	0014      	movs	r4, r2
 80039ec:	b096      	sub	sp, #88	; 0x58
 80039ee:	2900      	cmp	r1, #0
 80039f0:	da08      	bge.n	8003a04 <__swhatbuf_r+0x24>
 80039f2:	220c      	movs	r2, #12
 80039f4:	5eb3      	ldrsh	r3, [r6, r2]
 80039f6:	2200      	movs	r2, #0
 80039f8:	602a      	str	r2, [r5, #0]
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	d411      	bmi.n	8003a22 <__swhatbuf_r+0x42>
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	e00f      	b.n	8003a24 <__swhatbuf_r+0x44>
 8003a04:	466a      	mov	r2, sp
 8003a06:	f000 f9bd 	bl	8003d84 <_fstat_r>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	dbf1      	blt.n	80039f2 <__swhatbuf_r+0x12>
 8003a0e:	23f0      	movs	r3, #240	; 0xf0
 8003a10:	9901      	ldr	r1, [sp, #4]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	4019      	ands	r1, r3
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <__swhatbuf_r+0x4c>)
 8003a18:	18c9      	adds	r1, r1, r3
 8003a1a:	424b      	negs	r3, r1
 8003a1c:	4159      	adcs	r1, r3
 8003a1e:	6029      	str	r1, [r5, #0]
 8003a20:	e7ed      	b.n	80039fe <__swhatbuf_r+0x1e>
 8003a22:	2340      	movs	r3, #64	; 0x40
 8003a24:	2000      	movs	r0, #0
 8003a26:	6023      	str	r3, [r4, #0]
 8003a28:	b016      	add	sp, #88	; 0x58
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	ffffe000 	.word	0xffffe000

08003a30 <__smakebuf_r>:
 8003a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a32:	2602      	movs	r6, #2
 8003a34:	898b      	ldrh	r3, [r1, #12]
 8003a36:	0005      	movs	r5, r0
 8003a38:	000c      	movs	r4, r1
 8003a3a:	4233      	tst	r3, r6
 8003a3c:	d006      	beq.n	8003a4c <__smakebuf_r+0x1c>
 8003a3e:	0023      	movs	r3, r4
 8003a40:	3347      	adds	r3, #71	; 0x47
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	6123      	str	r3, [r4, #16]
 8003a46:	2301      	movs	r3, #1
 8003a48:	6163      	str	r3, [r4, #20]
 8003a4a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003a4c:	466a      	mov	r2, sp
 8003a4e:	ab01      	add	r3, sp, #4
 8003a50:	f7ff ffc6 	bl	80039e0 <__swhatbuf_r>
 8003a54:	9900      	ldr	r1, [sp, #0]
 8003a56:	0007      	movs	r7, r0
 8003a58:	0028      	movs	r0, r5
 8003a5a:	f000 f899 	bl	8003b90 <_malloc_r>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d108      	bne.n	8003a74 <__smakebuf_r+0x44>
 8003a62:	220c      	movs	r2, #12
 8003a64:	5ea3      	ldrsh	r3, [r4, r2]
 8003a66:	059a      	lsls	r2, r3, #22
 8003a68:	d4ef      	bmi.n	8003a4a <__smakebuf_r+0x1a>
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	4393      	bics	r3, r2
 8003a6e:	431e      	orrs	r6, r3
 8003a70:	81a6      	strh	r6, [r4, #12]
 8003a72:	e7e4      	b.n	8003a3e <__smakebuf_r+0xe>
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <__smakebuf_r+0x84>)
 8003a76:	62ab      	str	r3, [r5, #40]	; 0x28
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	89a2      	ldrh	r2, [r4, #12]
 8003a7c:	6020      	str	r0, [r4, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	81a3      	strh	r3, [r4, #12]
 8003a82:	9b00      	ldr	r3, [sp, #0]
 8003a84:	6120      	str	r0, [r4, #16]
 8003a86:	6163      	str	r3, [r4, #20]
 8003a88:	9b01      	ldr	r3, [sp, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <__smakebuf_r+0x7a>
 8003a8e:	0028      	movs	r0, r5
 8003a90:	230e      	movs	r3, #14
 8003a92:	5ee1      	ldrsh	r1, [r4, r3]
 8003a94:	f000 f988 	bl	8003da8 <_isatty_r>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d006      	beq.n	8003aaa <__smakebuf_r+0x7a>
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	81a3      	strh	r3, [r4, #12]
 8003aaa:	89a0      	ldrh	r0, [r4, #12]
 8003aac:	4307      	orrs	r7, r0
 8003aae:	81a7      	strh	r7, [r4, #12]
 8003ab0:	e7cb      	b.n	8003a4a <__smakebuf_r+0x1a>
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	0800381d 	.word	0x0800381d

08003ab8 <_free_r>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	0005      	movs	r5, r0
 8003abc:	2900      	cmp	r1, #0
 8003abe:	d010      	beq.n	8003ae2 <_free_r+0x2a>
 8003ac0:	1f0c      	subs	r4, r1, #4
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	da00      	bge.n	8003aca <_free_r+0x12>
 8003ac8:	18e4      	adds	r4, r4, r3
 8003aca:	0028      	movs	r0, r5
 8003acc:	f000 f992 	bl	8003df4 <__malloc_lock>
 8003ad0:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <_free_r+0x90>)
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <_free_r+0x2c>
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	6014      	str	r4, [r2, #0]
 8003adc:	0028      	movs	r0, r5
 8003ade:	f000 f991 	bl	8003e04 <__malloc_unlock>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	42a3      	cmp	r3, r4
 8003ae6:	d908      	bls.n	8003afa <_free_r+0x42>
 8003ae8:	6821      	ldr	r1, [r4, #0]
 8003aea:	1860      	adds	r0, r4, r1
 8003aec:	4283      	cmp	r3, r0
 8003aee:	d1f3      	bne.n	8003ad8 <_free_r+0x20>
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	1841      	adds	r1, r0, r1
 8003af6:	6021      	str	r1, [r4, #0]
 8003af8:	e7ee      	b.n	8003ad8 <_free_r+0x20>
 8003afa:	001a      	movs	r2, r3
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <_free_r+0x4e>
 8003b02:	42a3      	cmp	r3, r4
 8003b04:	d9f9      	bls.n	8003afa <_free_r+0x42>
 8003b06:	6811      	ldr	r1, [r2, #0]
 8003b08:	1850      	adds	r0, r2, r1
 8003b0a:	42a0      	cmp	r0, r4
 8003b0c:	d10b      	bne.n	8003b26 <_free_r+0x6e>
 8003b0e:	6820      	ldr	r0, [r4, #0]
 8003b10:	1809      	adds	r1, r1, r0
 8003b12:	1850      	adds	r0, r2, r1
 8003b14:	6011      	str	r1, [r2, #0]
 8003b16:	4283      	cmp	r3, r0
 8003b18:	d1e0      	bne.n	8003adc <_free_r+0x24>
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	1841      	adds	r1, r0, r1
 8003b20:	6011      	str	r1, [r2, #0]
 8003b22:	6053      	str	r3, [r2, #4]
 8003b24:	e7da      	b.n	8003adc <_free_r+0x24>
 8003b26:	42a0      	cmp	r0, r4
 8003b28:	d902      	bls.n	8003b30 <_free_r+0x78>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	602b      	str	r3, [r5, #0]
 8003b2e:	e7d5      	b.n	8003adc <_free_r+0x24>
 8003b30:	6821      	ldr	r1, [r4, #0]
 8003b32:	1860      	adds	r0, r4, r1
 8003b34:	4283      	cmp	r3, r0
 8003b36:	d103      	bne.n	8003b40 <_free_r+0x88>
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	1841      	adds	r1, r0, r1
 8003b3e:	6021      	str	r1, [r4, #0]
 8003b40:	6063      	str	r3, [r4, #4]
 8003b42:	6054      	str	r4, [r2, #4]
 8003b44:	e7ca      	b.n	8003adc <_free_r+0x24>
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	200004b0 	.word	0x200004b0

08003b4c <sbrk_aligned>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	4e0f      	ldr	r6, [pc, #60]	; (8003b8c <sbrk_aligned+0x40>)
 8003b50:	000d      	movs	r5, r1
 8003b52:	6831      	ldr	r1, [r6, #0]
 8003b54:	0004      	movs	r4, r0
 8003b56:	2900      	cmp	r1, #0
 8003b58:	d102      	bne.n	8003b60 <sbrk_aligned+0x14>
 8003b5a:	f000 f88f 	bl	8003c7c <_sbrk_r>
 8003b5e:	6030      	str	r0, [r6, #0]
 8003b60:	0029      	movs	r1, r5
 8003b62:	0020      	movs	r0, r4
 8003b64:	f000 f88a 	bl	8003c7c <_sbrk_r>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d00a      	beq.n	8003b82 <sbrk_aligned+0x36>
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	1cc5      	adds	r5, r0, #3
 8003b70:	439d      	bics	r5, r3
 8003b72:	42a8      	cmp	r0, r5
 8003b74:	d007      	beq.n	8003b86 <sbrk_aligned+0x3a>
 8003b76:	1a29      	subs	r1, r5, r0
 8003b78:	0020      	movs	r0, r4
 8003b7a:	f000 f87f 	bl	8003c7c <_sbrk_r>
 8003b7e:	1c43      	adds	r3, r0, #1
 8003b80:	d101      	bne.n	8003b86 <sbrk_aligned+0x3a>
 8003b82:	2501      	movs	r5, #1
 8003b84:	426d      	negs	r5, r5
 8003b86:	0028      	movs	r0, r5
 8003b88:	bd70      	pop	{r4, r5, r6, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	200004b4 	.word	0x200004b4

08003b90 <_malloc_r>:
 8003b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b92:	2203      	movs	r2, #3
 8003b94:	1ccb      	adds	r3, r1, #3
 8003b96:	4393      	bics	r3, r2
 8003b98:	3308      	adds	r3, #8
 8003b9a:	0006      	movs	r6, r0
 8003b9c:	001f      	movs	r7, r3
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d232      	bcs.n	8003c08 <_malloc_r+0x78>
 8003ba2:	270c      	movs	r7, #12
 8003ba4:	42b9      	cmp	r1, r7
 8003ba6:	d831      	bhi.n	8003c0c <_malloc_r+0x7c>
 8003ba8:	0030      	movs	r0, r6
 8003baa:	f000 f923 	bl	8003df4 <__malloc_lock>
 8003bae:	4d32      	ldr	r5, [pc, #200]	; (8003c78 <_malloc_r+0xe8>)
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	001c      	movs	r4, r3
 8003bb4:	2c00      	cmp	r4, #0
 8003bb6:	d12e      	bne.n	8003c16 <_malloc_r+0x86>
 8003bb8:	0039      	movs	r1, r7
 8003bba:	0030      	movs	r0, r6
 8003bbc:	f7ff ffc6 	bl	8003b4c <sbrk_aligned>
 8003bc0:	0004      	movs	r4, r0
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d11e      	bne.n	8003c04 <_malloc_r+0x74>
 8003bc6:	682c      	ldr	r4, [r5, #0]
 8003bc8:	0025      	movs	r5, r4
 8003bca:	2d00      	cmp	r5, #0
 8003bcc:	d14a      	bne.n	8003c64 <_malloc_r+0xd4>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	0029      	movs	r1, r5
 8003bd2:	18e3      	adds	r3, r4, r3
 8003bd4:	0030      	movs	r0, r6
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	f000 f850 	bl	8003c7c <_sbrk_r>
 8003bdc:	9b01      	ldr	r3, [sp, #4]
 8003bde:	4283      	cmp	r3, r0
 8003be0:	d143      	bne.n	8003c6a <_malloc_r+0xda>
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	3703      	adds	r7, #3
 8003be6:	1aff      	subs	r7, r7, r3
 8003be8:	2303      	movs	r3, #3
 8003bea:	439f      	bics	r7, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	2f0c      	cmp	r7, #12
 8003bf0:	d200      	bcs.n	8003bf4 <_malloc_r+0x64>
 8003bf2:	270c      	movs	r7, #12
 8003bf4:	0039      	movs	r1, r7
 8003bf6:	0030      	movs	r0, r6
 8003bf8:	f7ff ffa8 	bl	8003b4c <sbrk_aligned>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d034      	beq.n	8003c6a <_malloc_r+0xda>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	19df      	adds	r7, r3, r7
 8003c04:	6027      	str	r7, [r4, #0]
 8003c06:	e013      	b.n	8003c30 <_malloc_r+0xa0>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	dacb      	bge.n	8003ba4 <_malloc_r+0x14>
 8003c0c:	230c      	movs	r3, #12
 8003c0e:	2500      	movs	r5, #0
 8003c10:	6033      	str	r3, [r6, #0]
 8003c12:	0028      	movs	r0, r5
 8003c14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	1bd1      	subs	r1, r2, r7
 8003c1a:	d420      	bmi.n	8003c5e <_malloc_r+0xce>
 8003c1c:	290b      	cmp	r1, #11
 8003c1e:	d917      	bls.n	8003c50 <_malloc_r+0xc0>
 8003c20:	19e2      	adds	r2, r4, r7
 8003c22:	6027      	str	r7, [r4, #0]
 8003c24:	42a3      	cmp	r3, r4
 8003c26:	d111      	bne.n	8003c4c <_malloc_r+0xbc>
 8003c28:	602a      	str	r2, [r5, #0]
 8003c2a:	6863      	ldr	r3, [r4, #4]
 8003c2c:	6011      	str	r1, [r2, #0]
 8003c2e:	6053      	str	r3, [r2, #4]
 8003c30:	0030      	movs	r0, r6
 8003c32:	0025      	movs	r5, r4
 8003c34:	f000 f8e6 	bl	8003e04 <__malloc_unlock>
 8003c38:	2207      	movs	r2, #7
 8003c3a:	350b      	adds	r5, #11
 8003c3c:	1d23      	adds	r3, r4, #4
 8003c3e:	4395      	bics	r5, r2
 8003c40:	1aea      	subs	r2, r5, r3
 8003c42:	429d      	cmp	r5, r3
 8003c44:	d0e5      	beq.n	8003c12 <_malloc_r+0x82>
 8003c46:	1b5b      	subs	r3, r3, r5
 8003c48:	50a3      	str	r3, [r4, r2]
 8003c4a:	e7e2      	b.n	8003c12 <_malloc_r+0x82>
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	e7ec      	b.n	8003c2a <_malloc_r+0x9a>
 8003c50:	6862      	ldr	r2, [r4, #4]
 8003c52:	42a3      	cmp	r3, r4
 8003c54:	d101      	bne.n	8003c5a <_malloc_r+0xca>
 8003c56:	602a      	str	r2, [r5, #0]
 8003c58:	e7ea      	b.n	8003c30 <_malloc_r+0xa0>
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	e7e8      	b.n	8003c30 <_malloc_r+0xa0>
 8003c5e:	0023      	movs	r3, r4
 8003c60:	6864      	ldr	r4, [r4, #4]
 8003c62:	e7a7      	b.n	8003bb4 <_malloc_r+0x24>
 8003c64:	002c      	movs	r4, r5
 8003c66:	686d      	ldr	r5, [r5, #4]
 8003c68:	e7af      	b.n	8003bca <_malloc_r+0x3a>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	0030      	movs	r0, r6
 8003c6e:	6033      	str	r3, [r6, #0]
 8003c70:	f000 f8c8 	bl	8003e04 <__malloc_unlock>
 8003c74:	e7cd      	b.n	8003c12 <_malloc_r+0x82>
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	200004b0 	.word	0x200004b0

08003c7c <_sbrk_r>:
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	b570      	push	{r4, r5, r6, lr}
 8003c80:	4d06      	ldr	r5, [pc, #24]	; (8003c9c <_sbrk_r+0x20>)
 8003c82:	0004      	movs	r4, r0
 8003c84:	0008      	movs	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fc ffba 	bl	8000c00 <_sbrk>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d103      	bne.n	8003c98 <_sbrk_r+0x1c>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d000      	beq.n	8003c98 <_sbrk_r+0x1c>
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	bd70      	pop	{r4, r5, r6, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	200004b8 	.word	0x200004b8

08003ca0 <__sread>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	000c      	movs	r4, r1
 8003ca4:	250e      	movs	r5, #14
 8003ca6:	5f49      	ldrsh	r1, [r1, r5]
 8003ca8:	f000 f8b4 	bl	8003e14 <_read_r>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	db03      	blt.n	8003cb8 <__sread+0x18>
 8003cb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cb2:	181b      	adds	r3, r3, r0
 8003cb4:	6563      	str	r3, [r4, #84]	; 0x54
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	4a02      	ldr	r2, [pc, #8]	; (8003cc4 <__sread+0x24>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	e7f9      	b.n	8003cb6 <__sread+0x16>
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	ffffefff 	.word	0xffffefff

08003cc8 <__swrite>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	001f      	movs	r7, r3
 8003ccc:	898b      	ldrh	r3, [r1, #12]
 8003cce:	0005      	movs	r5, r0
 8003cd0:	000c      	movs	r4, r1
 8003cd2:	0016      	movs	r6, r2
 8003cd4:	05db      	lsls	r3, r3, #23
 8003cd6:	d505      	bpl.n	8003ce4 <__swrite+0x1c>
 8003cd8:	230e      	movs	r3, #14
 8003cda:	5ec9      	ldrsh	r1, [r1, r3]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2302      	movs	r3, #2
 8003ce0:	f000 f874 	bl	8003dcc <_lseek_r>
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <__swrite+0x34>)
 8003ce8:	0028      	movs	r0, r5
 8003cea:	4013      	ands	r3, r2
 8003cec:	81a3      	strh	r3, [r4, #12]
 8003cee:	0032      	movs	r2, r6
 8003cf0:	230e      	movs	r3, #14
 8003cf2:	5ee1      	ldrsh	r1, [r4, r3]
 8003cf4:	003b      	movs	r3, r7
 8003cf6:	f000 f81f 	bl	8003d38 <_write_r>
 8003cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cfc:	ffffefff 	.word	0xffffefff

08003d00 <__sseek>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	000c      	movs	r4, r1
 8003d04:	250e      	movs	r5, #14
 8003d06:	5f49      	ldrsh	r1, [r1, r5]
 8003d08:	f000 f860 	bl	8003dcc <_lseek_r>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	1c42      	adds	r2, r0, #1
 8003d10:	d103      	bne.n	8003d1a <__sseek+0x1a>
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <__sseek+0x28>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	0152      	lsls	r2, r2, #5
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	81a3      	strh	r3, [r4, #12]
 8003d22:	6560      	str	r0, [r4, #84]	; 0x54
 8003d24:	e7f8      	b.n	8003d18 <__sseek+0x18>
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	ffffefff 	.word	0xffffefff

08003d2c <__sclose>:
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	230e      	movs	r3, #14
 8003d30:	5ec9      	ldrsh	r1, [r1, r3]
 8003d32:	f000 f815 	bl	8003d60 <_close_r>
 8003d36:	bd10      	pop	{r4, pc}

08003d38 <_write_r>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	0004      	movs	r4, r0
 8003d3c:	0008      	movs	r0, r1
 8003d3e:	0011      	movs	r1, r2
 8003d40:	001a      	movs	r2, r3
 8003d42:	2300      	movs	r3, #0
 8003d44:	4d05      	ldr	r5, [pc, #20]	; (8003d5c <_write_r+0x24>)
 8003d46:	602b      	str	r3, [r5, #0]
 8003d48:	f7fc ff12 	bl	8000b70 <_write>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_write_r+0x20>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d000      	beq.n	8003d58 <_write_r+0x20>
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	200004b8 	.word	0x200004b8

08003d60 <_close_r>:
 8003d60:	2300      	movs	r3, #0
 8003d62:	b570      	push	{r4, r5, r6, lr}
 8003d64:	4d06      	ldr	r5, [pc, #24]	; (8003d80 <_close_r+0x20>)
 8003d66:	0004      	movs	r4, r0
 8003d68:	0008      	movs	r0, r1
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	f7fc ff1c 	bl	8000ba8 <_close>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d103      	bne.n	8003d7c <_close_r+0x1c>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d000      	beq.n	8003d7c <_close_r+0x1c>
 8003d7a:	6023      	str	r3, [r4, #0]
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}
 8003d7e:	46c0      	nop			; (mov r8, r8)
 8003d80:	200004b8 	.word	0x200004b8

08003d84 <_fstat_r>:
 8003d84:	2300      	movs	r3, #0
 8003d86:	b570      	push	{r4, r5, r6, lr}
 8003d88:	4d06      	ldr	r5, [pc, #24]	; (8003da4 <_fstat_r+0x20>)
 8003d8a:	0004      	movs	r4, r0
 8003d8c:	0008      	movs	r0, r1
 8003d8e:	0011      	movs	r1, r2
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	f7fc ff13 	bl	8000bbc <_fstat>
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	d103      	bne.n	8003da2 <_fstat_r+0x1e>
 8003d9a:	682b      	ldr	r3, [r5, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d000      	beq.n	8003da2 <_fstat_r+0x1e>
 8003da0:	6023      	str	r3, [r4, #0]
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	200004b8 	.word	0x200004b8

08003da8 <_isatty_r>:
 8003da8:	2300      	movs	r3, #0
 8003daa:	b570      	push	{r4, r5, r6, lr}
 8003dac:	4d06      	ldr	r5, [pc, #24]	; (8003dc8 <_isatty_r+0x20>)
 8003dae:	0004      	movs	r4, r0
 8003db0:	0008      	movs	r0, r1
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	f7fc ff10 	bl	8000bd8 <_isatty>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d103      	bne.n	8003dc4 <_isatty_r+0x1c>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d000      	beq.n	8003dc4 <_isatty_r+0x1c>
 8003dc2:	6023      	str	r3, [r4, #0]
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	200004b8 	.word	0x200004b8

08003dcc <_lseek_r>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	0004      	movs	r4, r0
 8003dd0:	0008      	movs	r0, r1
 8003dd2:	0011      	movs	r1, r2
 8003dd4:	001a      	movs	r2, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	4d05      	ldr	r5, [pc, #20]	; (8003df0 <_lseek_r+0x24>)
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	f7fc ff05 	bl	8000bea <_lseek>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d103      	bne.n	8003dec <_lseek_r+0x20>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d000      	beq.n	8003dec <_lseek_r+0x20>
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	200004b8 	.word	0x200004b8

08003df4 <__malloc_lock>:
 8003df4:	b510      	push	{r4, lr}
 8003df6:	4802      	ldr	r0, [pc, #8]	; (8003e00 <__malloc_lock+0xc>)
 8003df8:	f7ff fdef 	bl	80039da <__retarget_lock_acquire_recursive>
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	200004ac 	.word	0x200004ac

08003e04 <__malloc_unlock>:
 8003e04:	b510      	push	{r4, lr}
 8003e06:	4802      	ldr	r0, [pc, #8]	; (8003e10 <__malloc_unlock+0xc>)
 8003e08:	f7ff fde8 	bl	80039dc <__retarget_lock_release_recursive>
 8003e0c:	bd10      	pop	{r4, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	200004ac 	.word	0x200004ac

08003e14 <_read_r>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	0004      	movs	r4, r0
 8003e18:	0008      	movs	r0, r1
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	001a      	movs	r2, r3
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4d05      	ldr	r5, [pc, #20]	; (8003e38 <_read_r+0x24>)
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	f7fc fe87 	bl	8000b36 <_read>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d103      	bne.n	8003e34 <_read_r+0x20>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d000      	beq.n	8003e34 <_read_r+0x20>
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	200004b8 	.word	0x200004b8

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
